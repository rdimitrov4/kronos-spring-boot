name: Release

on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Download sapmachine JDK 17
        run: |
          download_url="https://github.com/SAP/SapMachine/releases/download/sapmachine-17.0.2/sapmachine-jdk-17.0.2_linux-x64_bin.tar.gz"
          wget -O "${RUNNER_TEMP}/sapmachine-jdk-17.tar.gz" "${download_url}"
      - name: Setup sapmachine JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/sapmachine-jdk-17.tar.gz
          java-version: '17.0.2'
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          architecture: x64
      - name: Set Kronos Version
        run: echo KRONOS_VERSION=${GITHUB_REF#refs/*/} | tr v " " | sed 's/ //'  >> $GITHUB_ENV
      - name: Updates /.m2/settings.xml
        run: echo '${{ secrets.MAVEN_M2_SETTINGS }}' > /home/runner/.m2/settings.xml
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: amd64,arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Set Multi-Builder Docker Buildx
        run: docker buildx create --use --name multi-builder --platform linux/arm64,linux/amd64
      - name: Maven Build
        run: mvn clean install -Dmaven.javadoc.skip=false
      - name: Docker Login
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}} ${{secrets.DOCKER_REGISTRY}}
      - name: Push Kronos
        run: |
          cd releng/server
          cp -r "${JAVA_HOME}" jdk
          docker build --load -t ghcr.io/codbex/kronos:${{ env.KRONOS_VERSION }} --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
          docker push ghcr.io/codbex/kronos:${{ env.KRONOS_VERSION }}
          cd ../../
      - name: Push Kronos for SAP Cloud Foundry
        run: |
          cd releng/sap-cf
          cp -r "${JAVA_HOME}" jdk
          docker build --load -t ghcr.io/codbex/kronos-cf:${{ env.KRONOS_VERSION }} --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
          docker push ghcr.io/codbex/kronos-cf:${{ env.KRONOS_VERSION }}
          cd ../../
      - name: Push Kronos for SAP Kyma
        run: |
          cd releng/sap-kyma
          cp -r "${JAVA_HOME}" jdk
          docker build --load -t ghcr.io/codbex/kronos-kyma:${{ env.KRONOS_VERSION }} --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
          docker push ghcr.io/codbex/kronos-kyma:${{ env.KRONOS_VERSION }}
          cd ../../
      - name: Push Kronos for SAP Kyma Runtime
        run: |
          cd releng/sap-kyma-runtime
          docker build --load -t ghcr.io/codbex/kronos-kyma-runtime-base -f Dockerfile-base .
          docker push ghcr.io/codbex/kronos-kyma-runtime-base
          docker build --load -t ghcr.io/codbex/kronos-kyma-runtime .
          docker push ghcr.io/codbex/kronos-kyma-runtime
          docker build --load -t ghcr.io/codbex/kronos-kyma-runtime-distro -f Dockerfile-distro .
          docker push ghcr.io/codbex/kronos-kyma-runtime-distro
          cd ../../
      # - uses: buildpacks/github-actions/setup-pack@v4.1.0
      # - name: Kronos Buildpack
      #   run: |
      #     cd releng/buildpacks/kronos/
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-base . --target base
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-base ghcr.io/codbex/kronos-buildpacks-stack-base:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-base:${{ env.KRONOS_VERSION }}
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-run . --target run
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-run ghcr.io/codbex/kronos-buildpacks-stack-run:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-run:${{ env.KRONOS_VERSION }}
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-build . --target build
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-build ghcr.io/codbex/kronos-buildpacks-stack-build:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-build:${{ env.KRONOS_VERSION }}
      #     cd buildpack/
      #     find *.toml -type f -exec sed -i ''s/#{KronosVersion}#/${{ env.KRONOS_VERSION }}/g'' {} \;
      #     pack buildpack package ghcr.io/codbex/kronos-buildpacks --config ./package.toml
      #     docker tag ghcr.io/codbex/kronos-buildpacks ghcr.io/codbex/kronos-buildpacks:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks:${{ env.KRONOS_VERSION }}
      #     pack builder create ghcr.io/codbex/kronos-buildpacks-builder --config ./builder.toml
      #     docker tag ghcr.io/codbex/kronos-buildpacks-builder ghcr.io/codbex/kronos-buildpacks-builder:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-builder:${{ env.KRONOS_VERSION }}
      #     cd ../../../../
      # - name: Kronos Kyma Buildpack
      #   run: |
      #     cd releng/buildpacks/kronos-kyma/
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-base-kyma . --target base
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-base-kyma ghcr.io/codbex/kronos-buildpacks-stack-base-kyma:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-base-kyma:${{ env.KRONOS_VERSION }}
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-run-kyma . --target run
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-run-kyma ghcr.io/codbex/kronos-buildpacks-stack-run-kyma:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-run-kyma:${{ env.KRONOS_VERSION }}
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-build-kyma . --target build
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-build-kyma ghcr.io/codbex/kronos-buildpacks-stack-build-kyma:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-build-kyma:${{ env.KRONOS_VERSION }}
      #     cd buildpack/
      #     find *.toml -type f -exec sed -i ''s/#{KronosVersion}#/${{ env.KRONOS_VERSION }}/g'' {} \;
      #     pack buildpack package ghcr.io/codbex/kronos-buildpacks-kyma --config ./package.toml
      #     docker tag ghcr.io/codbex/kronos-buildpacks-kyma ghcr.io/codbex/kronos-buildpacks-kyma:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-kyma:${{ env.KRONOS_VERSION }}
      #     pack builder create ghcr.io/codbex/kronos-buildpacks-builder-kyma --config ./builder.toml
      #     docker tag ghcr.io/codbex/kronos-buildpacks-builder-kyma ghcr.io/codbex/kronos-buildpacks-builder-kyma:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-builder-kyma:${{ env.KRONOS_VERSION }}
      #     cd ../../../../
      # - name: Kronos Kyma Runtime Buildpack
      #   run: |
      #     cd releng/buildpacks/kronos-kyma/
      #     docker build --load -t ghcr.io/codbex/kronos-buildpacks-stack-base-kyma . --target base
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-base-kyma
      #     docker build --load -t ghcr.io/codbex/kronos-buildpacks-stack-run-kyma . --target run
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-run-kyma
      #     docker build --load -t ghcr.io/codbex/kronos-buildpacks-stack-build-kyma . --target build
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-build-kyma
      #     cd buildpack/
      #     find *.toml -type f -exec sed -i ''s/#{KronosVersion}#/latest/g'' {} \;
      #     pack buildpack package ghcr.io/codbex/kronos-buildpacks-kyma --config ./package.toml
      #     docker push ghcr.io/codbex/kronos-buildpacks-kyma
      #     pack builder create ghcr.io/codbex/kronos-buildpacks-builder-kyma --config ./builder.toml
      #     docker push ghcr.io/codbex/kronos-buildpacks-builder-kyma
      #     cd ../../../../
      # - name: Kronos Cloud Foundry Buildpack
      #   run: |
      #     cd releng/buildpacks/kronos-cf/
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-base-cf . --target base
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-base-cf ghcr.io/codbex/kronos-buildpacks-stack-base-cf:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-base-cf:${{ env.KRONOS_VERSION }}
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-run-cf . --target run
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-run-cf ghcr.io/codbex/kronos-buildpacks-stack-run-cf:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-run-cf:${{ env.KRONOS_VERSION }}
      #     docker build --load --build-arg KRONOS_VERSION=${{ env.KRONOS_VERSION }} -t ghcr.io/codbex/kronos-buildpacks-stack-build-cf . --target build
      #     docker tag ghcr.io/codbex/kronos-buildpacks-stack-build-cf ghcr.io/codbex/kronos-buildpacks-stack-build-cf:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-stack-build-cf:${{ env.KRONOS_VERSION }}
      #     cd buildpack/
      #     find *.toml -type f -exec sed -i ''s/#{KronosVersion}#/${{ env.KRONOS_VERSION }}/g'' {} \;
      #     pack buildpack package ghcr.io/codbex/kronos-buildpacks-cf --config ./package.toml
      #     docker tag ghcr.io/codbex/kronos-buildpacks-cf ghcr.io/codbex/kronos-buildpacks-cf:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-cf:${{ env.KRONOS_VERSION }}
      #     pack builder create ghcr.io/codbex/kronos-buildpacks-builder-cf --config ./builder.toml
      #     docker tag ghcr.io/codbex/kronos-buildpacks-builder-cf ghcr.io/codbex/kronos-buildpacks-builder-cf:${{ env.KRONOS_VERSION }}
      #     docker push ghcr.io/codbex/kronos-buildpacks-builder-cf:${{ env.KRONOS_VERSION }}
      #     cd ../../../../


      #---------------Publish to Maven Central-----------------#

      - name: Publish packages to Maven Central
        run: |
          mvn javadoc:jar
          mvn deploy -P release -DskipTests -Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASS_PHRASE }}
      #---------------Publish to Maven Central-----------------#

      #----------------Publish GitHub Release------------------#

      - name: Package WAR files
        run: |
          zip --junk-paths server releng/server/target/ROOT.war
          zip --junk-paths sap-cf releng/sap-cf/target/ROOT.war

      - name: Package Samples
        run: |
          cd samples/
          zip -r api-db api-db/*
          zip -r api-hdb api-hdb/*
          zip -r api-import api-import/*
          zip -r api-jobs api-jobs/*
          zip -r api-net api-net/*
          zip -r api-session api-session/*
          zip -r api-trace api-trace/*
          zip -r api-util api-util/*
          zip -r api-web api-web/*
          zip -r hdb-hdbdd-simple hdb-hdbdd-simple/*
          zip -r hdb-hdbsequence-simple hdb-hdbsequence-simple/*
          zip -r hdb-hdbstructure-simple hdb-hdbstructure-simple/*
          zip -r hdb-hdbtable-simple hdb-hdbtable-simple/*
          zip -r hdb-hdbti-simple hdb-hdbti-simple/*
          zip -r hdb-procedure-simple hdb-procedure-simple/*
          zip -r hdb-schema-simple hdb-schema-simple/*
          zip -r hdb-simple hdb-simple/*
          zip -r hdb-synonym-simple hdb-synonym-simple/*
          zip -r hdb-tablefunction-simple hdb-tablefunction-simple/*
          zip -r hdb-view-simple hdb-view-simple/*
          zip -r hdi-cube hdi-cube/*
          zip -r hdi-ext hdi-ext/*
          zip -r hdi-simple hdi-simple/*
          zip -r products products/*
          zip -r xsjs xsjs/*
          zip -r xsjs-simple xsjs-simple/*
          zip -r xsodata-navigations xsodata-navigations/*
          zip -r xsodata-simple xsodata-simple/*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.KRONOS_VERSION }}
          release_name: ${{ env.KRONOS_VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Kronos - ${{ env.KRONOS_VERSION }}

            #### Docker images:
              - [ghcr.io/codbex/kronos](https://ghcr.io/codbex/kronos) - Kronos Server.
              - [ghcr.io/codbex/kronos-cf](https://ghcr.io/codbex/kronos-cf) - Kronos Cloud Foundry.
              - [ghcr.io/codbex/kronos-kyma](https://ghcr.io/codbex/kronos-kyma) - Kronos Kyma.

            #### Available for download `*.war` packages:
              - [server](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/server.zip) - Kronos Server.
              - [sap-cf](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/sap-cf.zip) - Kronos Cloud Foundry.

            > _**Note:** Unzip the downloaded file to extract the `ROOT.war` binary._

            For more information go to [https://www.dirigible.io/help/setup/](https://www.dirigible.io/help/setup/).

            #### Available for download `*.zip` samples:
              - _**[products](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/products.zip) - Products Sample Application.**_
              - [api-db](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-db.zip) - XSJS API $.db.
              - [api-hdb](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-hdb.zip) - XSJS API $.hdb.
              - [api-import](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-import.zip) - XSJS API $.import.
              - [api-jobs](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-jobs.zip) - XSJS API $.jobs.
              - [api-net](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-net.zip) - XSJS API $.net.
              - [api-session](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-session.zip) - XSJS API $.session.
              - [api-trace](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-trace.zip) - XSJS API $.trace.
              - [api-util](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-util.zip) - XSJS API $.util.
              - [api-web](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/api-web.zip) - XSJS API $.web.
              - [hdb-hdbdd-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-hdbdd-simple.zip) - HDBDD - Simple.
              - [hdb-hdbsequence-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-hdbsequence-simple.zip) - HDBSequence - Simple.
              - [hdb-hdbstructure-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-hdbstructure-simple.zip) - HDBStructure - Simple.
              - [hdb-hdbtable-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-hdbtable-simple.zip) - HDBTable - Simple.
              - [hdb-hdbti-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-hdbti-simple.zip) - HDBTI - Simple.
              - [hdb-procedure-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-procedure-simple.zip) - HDBProcedure - Simple.
              - [hdb-schema-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-schema-simple.zip) - HDBSchema - Simple.
              - [hdb-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-simple.zip) - HDB Table.
              - [hdb-synonym-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-synonym-simple.zip) - HDBSynonym - Simple.
              - [hdb-tablefunction-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-tablefunction-simple.zip) - HDBTableFunction - Simple.
              - [hdb-view-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdb-view-simple.zip) - HDBView - Simple.
              - [hdi-cube](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdi-cube.zip) - HDI Cube.
              - [hdi-ext](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdi-ext.zip) - HDI Ext.
              - [hdi-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/hdi-simple.zip) - HDI.
              - [xsjs](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/xsjs.zip) - XSJS APIs.
              - [xsjs-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/xsjs-simple.zip) - XSJS Hello World.
              - [xsodata-navigations](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/xsodata-navigations.zip) - XSOData - Navigations.
              - [xsodata-simple](https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/xsodata-simple.zip) - XSOData - Simple.

            ### Cloud Native Buildpacks

            #### Pack

            Available Buildpack Builders:
            - [ghcr.io/codbex/kronos-buildpacks-builder:${{ env.KRONOS_VERSION }}](https://ghcr.io/codbex/kronos-buildpacks-builder) - builder for local deployments.
            - [ghcr.io/codbex/kronos-buildpacks-builder-kyma:${{ env.KRONOS_VERSION }}](https://ghcr.io/codbex/kronos-buildpacks-builder-kyma) - builder for Kyma ready deployments.
            - [ghcr.io/codbex/kronos-buildpacks-builder-cf:${{ env.KRONOS_VERSION }}](https://ghcr.io/codbex/kronos-buildpacks-builder-cf) - builder for Cloud Foundry ready deployments

            Building Docker Image with **pack**:
            ```
            pack build --builder ghcr.io/codbex/kronos-buildpacks-builder:${{ env.KRONOS_VERSION }} <my-org>/<my-repository>
            ```
            > _**Note:** The command will package all sub-folders (`project1`, `project2`, etc.) into a Kronos docker image with the application sources._

            ### Cloud Foundry - SAP Java Buildpack

            **manifest.yaml**

            ```yaml
            applications:
            - name: <application-name>
              host: <host>
              memory: 2G
              buildpack: sap_java_buildpack
              path: ROOT.war
              env:
                JBP_CONFIG_COMPONENTS: "jres: ['com.sap.xs.java.buildpack.jdk.SAPMachineJDK']"
                JBP_CONFIG_SAP_MACHINE_JRE: 'jre: { version: 11.+ }'
              services:
                - <service-binding>
            ```

            #### Kpack

            - Install [Kpack](https://github.com/pivotal/kpack) on your Kubernetes/Kyma cluster
            - Create `ClusterStore`, `ClusterStack` and `Builder`:

            ```yaml
            apiVersion: kpack.io/v1alpha1
            kind: ClusterStore
            metadata:
              name: kronos-store
            spec:
              sources:
              - image: ghcr.io/codbex/kronos-buildpacks:${{ env.KRONOS_VERSION }}
            ---
            apiVersion: kpack.io/v1alpha1
            kind: ClusterStack
            metadata:
              name: kronos-stack
            spec:
              id: com.codbex.kronos
              buildImage:
                image: ghcr.io/codbex/kronos-buildpacks-stack-build-kyma:${{ env.KRONOS_VERSION }}
              runImage:
                image: ghcr.io/codbex/kronos-buildpacks-stack-run-kyma:${{ env.KRONOS_VERSION }}
            ---
            apiVersion: kpack.io/v1alpha1
            kind: Builder
            metadata:
              name: kronos-builder
            spec:
              serviceAccount: <your-service-account>
              tag: <your-docker-organization>/<your-docker-builder-repository>
              stack:
                name: kronos-stack
                kind: ClusterStack
              store:
                name: kronos-store
                kind: ClusterStore
              order:
              - group:
                - id: ghcr.io/codbex/kronos-buildpacks
            ```

            > _**Note**: Replace `<your-service-account>` with your ServiceAccount (sample could be found [here](https://github.com/codbex/codbex-kronos/blob/main/releng/buildpacks/kronos/kpack/service-account.yaml))._

            > _**Note**: Also replace `<your-docker-organization>/<your-docker-builder-repository>` with your Docker Repository, where the Docker Image Builder will be hosted (e.g. `my-organization/my-builder`)_

            #### Usage

            ```yaml
            apiVersion: kpack.io/v1alpha1
            kind: Image
            metadata:
              name: kronos-application
              namespace: default
            spec:
              tag: <your-docker-organization>/<your-application-docker-image-repository>
              serviceAccount: <your-service-account>
              builder:
                name: kronos-builder
                kind: Builder
              source:
                blob:
                  url: https://github.com/codbex/codbex-kronos/releases/download/v${{ env.KRONOS_VERSION }}/products.zip
            ```

            > _**Note**: Replace `<your-service-account>` with your ServiceAccount (sample could be found [here](https://github.com/codbex/codbex-kronos/blob/main/releng/buildpacks/kronos/kpack/service-account.yaml))._

            > _**Note**: Also replace `<your-docker-organization>/<your-application-docker-image-repository>` with your Docker Repository, where the Docker Image Builder will be hosted (e.g. `my-organization/my-application`)_

      - name: Upload Server
        id: upload-server
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./server.zip
          asset_name: server.zip
          asset_content_type: application/zip

      - name: Upload SAP CF
        id: upload-sap-cf
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sap-cf.zip
          asset_name: sap-cf.zip
          asset_content_type: application/zip

      - name: Upload Sample - api-db
        id: upload-sample-api-db
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-db.zip
          asset_name: api-db.zip
          asset_content_type: api-db/zip

      - name: Upload Sample - api-hdb
        id: upload-sample-api-hdb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-hdb.zip
          asset_name: api-hdb.zip
          asset_content_type: api-hdb/zip

      - name: Upload Sample - api-import
        id: upload-sample-api-import
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-import.zip
          asset_name: api-import.zip
          asset_content_type: api-import/zip

      - name: Upload Sample - api-jobs
        id: upload-sample-api-jobs
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-jobs.zip
          asset_name: api-jobs.zip
          asset_content_type: api-jobs/zip

      - name: Upload Sample - api-net
        id: upload-sample-api-net
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-net.zip
          asset_name: api-net.zip
          asset_content_type: api-net/zip

      - name: Upload Sample - api-session
        id: upload-sample-api-session
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-session.zip
          asset_name: api-session.zip
          asset_content_type: api-session/zip

      - name: Upload Sample - api-trace
        id: upload-sample-api-trace
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-trace.zip
          asset_name: api-trace.zip
          asset_content_type: api-trace/zip

      - name: Upload Sample - api-util
        id: upload-sample-api-util
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-util.zip
          asset_name: api-util.zip
          asset_content_type: api-util/zip

      - name: Upload Sample - api-web
        id: upload-sample-api-web
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/api-web.zip
          asset_name: api-web.zip
          asset_content_type: api-web/zip

      - name: Upload Sample - products
        id: upload-sample-products
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/products.zip
          asset_name: products.zip
          asset_content_type: application/zip

      - name: Upload Sample - hdb-hdbsequence-simple
        id: upload-sample-hdb-hdbsequence-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-hdbsequence-simple.zip
          asset_name: hdb-hdbsequence-simple.zip
          asset_content_type: hdb-hdbsequence-simple/zip

      - name: Upload Sample - hdb-hdbstructure-simple
        id: upload-sample-hdb-hdbstructure-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-hdbstructure-simple.zip
          asset_name: hdb-hdbstructure-simple.zip
          asset_content_type: hdb-hdbstructure-simple/zip

      - name: Upload Sample - hdb-hdbtable-simple
        id: upload-sample-hdb-hdbtable-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-hdbtable-simple.zip
          asset_name: hdb-hdbtable-simple.zip
          asset_content_type: hdb-hdbtable-simple/zip

      - name: Upload Sample - hdb-hdbti-simple
        id: upload-sample-hdb-hdbti-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-hdbti-simple.zip
          asset_name: hdb-hdbti-simple.zip
          asset_content_type: hdb-hdbti-simple/zip

      - name: Upload Sample - hdb-hdbdd-simple
        id: upload-sample-hdb-hdbdd-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-hdbdd-simple.zip
          asset_name: hdb-hdbdd-simple.zip
          asset_content_type: hdb-hdbdd-simple/zip

      - name: Upload Sample - hdb-procedure-simple
        id: upload-sample-hdb-procedure-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-procedure-simple.zip
          asset_name: hdb-procedure-simple.zip
          asset_content_type: hdb-procedure-simple/zip

      - name: Upload Sample - hdb-schema-simple
        id: upload-sample-hdb-schema-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-schema-simple.zip
          asset_name: hdb-schema-simple.zip
          asset_content_type: hdb-schema-simple/zip

      - name: Upload Sample - hdb-simple
        id: upload-sample-hdb-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-simple.zip
          asset_name: hdb-simple.zip
          asset_content_type: hdb-simple/zip

      - name: Upload Sample - hdb-synonym-simple
        id: upload-sample-hdb-synonym-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-synonym-simple.zip
          asset_name: hdb-synonym-simple.zip
          asset_content_type: hdb-synonym-simple/zip

      - name: Upload Sample - hdb-tablefunction-simple
        id: upload-sample-hdb-tablefunction-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-tablefunction-simple.zip
          asset_name: hdb-tablefunction-simple.zip
          asset_content_type: hdb-tablefunction-simple/zip

      - name: Upload Sample - hdb-view-simple
        id: upload-sample-hdb-view-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdb-view-simple.zip
          asset_name: hdb-view-simple.zip
          asset_content_type: hdb-view-simple/zip

      - name: Upload Sample - hdi-cube
        id: upload-sample-hdi-cube
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdi-cube.zip
          asset_name: hdi-cube.zip
          asset_content_type: hdi-cube/zip

      - name: Upload Sample - hdi-ext
        id: upload-sample-hdi-ext
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdi-ext.zip
          asset_name: hdi-ext.zip
          asset_content_type: hdi-ext/zip

      - name: Upload Sample - hdi-simple
        id: upload-sample-hdi-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/hdi-simple.zip
          asset_name: hdi-simple.zip
          asset_content_type: hdi-simple/zip

      - name: Upload Sample - xsjs
        id: upload-sample-xsjs
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/xsjs.zip
          asset_name: xsjs.zip
          asset_content_type: xsjs/zip

      - name: Upload Sample - xsjs-simple
        id: upload-sample-xsjs-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/xsjs-simple.zip
          asset_name: xsjs-simple.zip
          asset_content_type: xsjs-simple/zip

      - name: Upload Sample - xsodata-navigations
        id: upload-sample-xsodata-navigations
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/xsodata-navigations.zip
          asset_name: xsodata-navigations.zip
          asset_content_type: xsodata-navigations/zip

      - name: Upload Sample - xsodata-simple
        id: upload-sample-xsodata-simple
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./samples/xsodata-simple.zip
          asset_name: xsodata-simple.zip
          asset_content_type: xsodata-simple/zip

      #----------------Publish GitHub Release------------------#

      #----------------Publish Helm Release------------------#
      # - id: install-secret-key
      #   name: Install gpg secret key
      #   run: |
      #     cat <(echo -e "${{ secrets.GPG_KEY_HELM }}") | gpg --batch --import  --no-tty --batch --yes
      # - name: Helm tool installer
      #   uses: Azure/setup-helm@v1
      # - name: Helm Charts Release - Checkout gh-pages
      #   run: |
      #     mkdir charts-temp
      #     cp -r releng/helm-charts/ charts-temp/
      #     #### Git Checkout Workaround
      #     git add .github/
      #     git add .reuse/
      #     git add LICENSES/
      #     git add modules/
      #     git add releng/
      #     git add samples/
      #     git reset --hard
      #     ####
      #     git fetch
      #     git checkout gh-pages

      #     cp charts/* .
      # - name: Helm Charts Release - Set Chart Version - Kronos
      #   run: |
      #     cd charts-temp/helm-charts/
      #     find kronos/*.yaml -type f -exec sed -i ''s/#{KronosVersion}#/${{ env.KRONOS_VERSION }}/g'' {} \;
      #     find kronos-kpack/*.yaml -type f -exec sed -i ''s/#{KronosVersion}#/${{ env.KRONOS_VERSION }}/g'' {} \;
      #     find kronos-kpack/templates/*.yaml -type f -exec sed -i ''s/#{KronosVersion}#/${{ env.KRONOS_VERSION }}/g'' {} \;
      #     find kronos-landscape/*.yaml -type f -exec sed -i ''s/#{KronosVersion}#/${{ env.KRONOS_VERSION }}/g'' {} \;
      # - name: Helm Charts Release
      #   run: |
      #     cp charts/* charts-temp/helm-charts/
      #     cd charts-temp/helm-charts/
          
      #     gpg --no-tty --batch --export-secret-keys > ~/.gnupg/secring.gpg
      #     helm package --sign --key "Kronos-gpg" --keyring /home/runner/.gnupg/secring.gpg kronos
      #     helm package --sign --key "Kronos-gpg" --keyring /home/runner/.gnupg/secring.gpg kronos-kpack
      #     helm package --sign --key "Kronos-gpg" --keyring /home/runner/.gnupg/secring.gpg kronos-landscape
      #     cd ..
      #     helm repo index helm-charts/ --url https://codbex.github.io/codbex-kronos/charts

      #     cp helm-charts/index.yaml ../.
      #     cp helm-charts/kronos-${{ env.KRONOS_VERSION }}.tgz ../charts/
      #     cp helm-charts/kronos-${{ env.KRONOS_VERSION }}.tgz.prov ../charts/
      #     cp helm-charts/kronos-kpack-${{ env.KRONOS_VERSION }}.tgz ../charts/
      #     cp helm-charts/kronos-kpack-${{ env.KRONOS_VERSION }}.tgz.prov ../charts/
      #     cp helm-charts/kronos-landscape-${{ env.KRONOS_VERSION }}.tgz ../charts/
      #     cp helm-charts/kronos-landscape-${{ env.KRONOS_VERSION }}.tgz.prov ../charts/
      #     cd ..
      #     git config user.name "$GITHUB_ACTOR"
      #     git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      #     git add index.yaml
      #     git add charts/
      #     git commit -m "Updates Helm Charts - Release ${{ env.KRONOS_VERSION }} - ci skip"
      #     git push origin gh-pages
      #     git add .
      #     git reset --hard
      #     git checkout main
      #----------------Publish Helm Release------------------#

      #-----------------Create GitHub Branch-------------------#

      - name: Create GitHub Branch
        run: |
          git checkout -b ${{ env.KRONOS_VERSION }}
          git push origin ${{ env.KRONOS_VERSION }}

      #-----------------Create GitHub Branch-------------------#

      - name: Slack Notification
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.14.0
        with:
          payload: "{\"type\":\"Release\",\"url\":\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
