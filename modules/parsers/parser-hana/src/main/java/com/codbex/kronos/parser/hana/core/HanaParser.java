/*
 * Copyright (c) 2022 codbex or an codbex affiliate company and contributors
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-FileCopyrightText: 2022 codbex or an codbex affiliate company and contributors
 * SPDX-License-Identifier: EPL-2.0
 */
// Generated from com.codbex.kronos.parser.hana.core/Hana.g4 by ANTLR 4.10.1
package com.codbex.kronos.parser.hana.core;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

/**
 * The Class HanaParser.
 */
@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class HanaParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	/** The Constant _decisionToDFA. */
	protected static final DFA[] _decisionToDFA;
	
	/** The Constant _sharedContextCache. */
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	
	/** The Constant R. */
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, A_LETTER=9, 
		ADD=10, AFTER=11, AGENT=12, AGGREGATE=13, ALL=14, ALTER=15, ALPHANUM=16, 
		ANALYZE=17, AND=18, ANY=19, ARRAY=20, AS=21, ASC=22, ASSOCIATE=23, AT=24, 
		ATTRIBUTE=25, AUDIT=26, AUTHID=27, AUTO=28, AUTOMATIC=29, AUTONOMOUS_TRANSACTION=30, 
		BATCH=31, BEFORE=32, BEGIN=33, BETWEEN=34, BFILE=35, BINARY_DOUBLE=36, 
		BINARY_FLOAT=37, BINARY_INTEGER=38, BIGINT=39, BLOB=40, BLOCK=41, BODY=42, 
		BOOLEAN=43, BOTH=44, BREADTH=45, BREAK=46, BULK=47, BY=48, BYTE=49, C_LETTER=50, 
		CACHE=51, CALL=52, CANONICAL=53, CASCADE=54, CASE=55, CAST=56, CHAR=57, 
		CHAR_CS=58, CHARACTER=59, CHECK=60, CHR=61, CLOB=62, CLOSE=63, CLUSTER=64, 
		COLLECT=65, COLUMNS=66, COMMENT=67, COMMIT=68, COMMITTED=69, COMPATIBILITY=70, 
		COMPILE=71, COMPOUND=72, CONNECT=73, CONNECT_BY_ROOT=74, CONSTANT=75, 
		CONSTRAINT=76, CONSTRAINTS=77, CONSTRUCTOR=78, CONTENT=79, CONTEXT=80, 
		CONTINUE=81, CONVERT=82, CORRUPT_XID=83, CORRUPT_XID_ALL=84, COST=85, 
		COUNT=86, CREATE=87, CROSS=88, CUBE=89, CURRENT=90, CURRENT_USER=91, CURSOR=92, 
		CUSTOMDATUM=93, CYCLE=94, DATA=95, DATABASE=96, DATE=97, DAY=98, DB_ROLE_CHANGE=99, 
		DBTIMEZONE=100, DDL=101, DEBUG=102, DEC=103, DECIMAL=104, DECLARE=105, 
		DECOMPOSE=106, DECREMENT=107, DEFAULT=108, DEFAULTS=109, DEFERRED=110, 
		DEFINER=111, DELETE=112, DEPTH=113, DESC=114, DETERMINISTIC=115, DIMENSION=116, 
		DISABLE=117, DISASSOCIATE=118, DISTINCT=119, DOCUMENT=120, DOUBLE=121, 
		DROP=122, DSINTERVAL_UNCONSTRAINED=123, EACH=124, ELEMENT=125, ELSE=126, 
		ELSIF=127, EMPTY=128, ENABLE=129, ENCODING=130, END=131, ENTITYESCAPING=132, 
		ERRORS=133, ESCAPE=134, EVALNAME=135, EXCEPT=136, EXCEPTION=137, EXCEPTION_INIT=138, 
		EXCEPTIONS=139, EXCLUDE=140, EXCLUSIVE=141, EXECUTE=142, EXISTS=143, EXIT=144, 
		EXPLAIN=145, EXTERNAL=146, EXTRACT=147, FAILURE=148, FALSE=149, FETCH=150, 
		FINAL=151, FIRST=152, FIRST_VALUE=153, FLOAT=154, FOLLOWING=155, FOLLOWS=156, 
		FOR=157, FORALL=158, FORCE=159, FROM=160, FULL=161, FUNCTION=162, GOTO=163, 
		GRANT=164, GROUP=165, GROUPING=166, HASH=167, HAVING=168, HANDLER=169, 
		HIDE=170, HOUR=171, IF=172, IGNORE=173, IMMEDIATE=174, IN=175, INCLUDE=176, 
		INCLUDING=177, INCREMENT=178, INDENT=179, INDEX=180, INDEXED=181, INDICATOR=182, 
		INDICES=183, INFINITE=184, INLINE=185, INNER=186, INOUT=187, INSERT=188, 
		INSTANTIABLE=189, INSTEAD=190, INT=191, INTEGER=192, INTERSECT=193, INTERVAL=194, 
		INTO=195, INVALIDATE=196, INVOKER=197, IS=198, ISOLATION=199, ITERATE=200, 
		JAVA=201, JOIN=202, KEEP=203, LANGUAGE=204, LAST=205, LAST_VALUE=206, 
		LEADING=207, LEFT=208, LEVEL=209, LIBRARY=210, LIKE=211, LIKE2=212, LIKE4=213, 
		LIKEC=214, LIKE_REGEXPR=215, LIMIT=216, LOCAL=217, LOCK=218, LOCKED=219, 
		LOG=220, LOGOFF=221, LOGON=222, LONG=223, LOOP=224, MAIN=225, MAP=226, 
		MATCHED=227, MAXVALUE=228, MEASURES=229, MEMBER=230, MERGE=231, MINUS=232, 
		MINUTE=233, MINVALUE=234, MLSLABEL=235, MODE=236, MODEL=237, MODIFY=238, 
		MONTH=239, MULTISET=240, NAME=241, NAN=242, NATURAL=243, NATURALN=244, 
		NAV=245, NCHAR=246, NCHAR_CS=247, NCLOB=248, NESTED=249, NEW=250, NO=251, 
		NOAUDIT=252, NOCACHE=253, NOCOPY=254, NOCYCLE=255, NOENTITYESCAPING=256, 
		NOMAXVALUE=257, NOMINVALUE=258, NONE=259, NOORDER=260, NOSCHEMACHECK=261, 
		NOT=262, NOWAIT=263, NULL=264, NULLS=265, NUMBER=266, NUMERIC=267, NVARCHAR=268, 
		OBJECT=269, OF=270, OFF=271, OID=272, OLD=273, ON=274, ONLY=275, OPEN=276, 
		OPTION=277, OR=278, ORADATA=279, ORDER=280, ORDINALITY=281, OSERROR=282, 
		OUT=283, OUTER=284, OVER=285, OVERRIDING=286, PACKAGE=287, PARALLEL_ENABLE=288, 
		PARAMETERS=289, PARENT=290, PARTITION=291, PASSING=292, PATH=293, PERCENT_ROWTYPE=294, 
		PERCENT_TYPE=295, PIPELINED=296, PIVOT=297, PLAN=298, PLS_INTEGER=299, 
		POSITIVE=300, POSITIVEN=301, PRAGMA=302, PRECEDING=303, PRECISION=304, 
		PRESENT=305, PRIOR=306, PROCEDURE=307, RAISE=308, RANGE=309, RAW=310, 
		READ=311, READS=312, REAL=313, RECORD=314, REF=315, REFERENCE=316, REFERENCING=317, 
		REJECT=318, RELIES_ON=319, RENAME=320, REPLACE=321, RESPECT=322, RESTRICT_REFERENCES=323, 
		RESULT=324, RESULT_CACHE=325, RETURN=326, RETURNS=327, RETURNING=328, 
		REUSE=329, REVERSE=330, REVOKE=331, RIGHT=332, ROLLBACK=333, ROLLUP=334, 
		ROW=335, ROWID=336, ROWS=337, RULES=338, SAMPLE=339, SAVE=340, SAVEPOINT=341, 
		SCHEMA=342, SCHEMACHECK=343, SCN=344, SEARCH=345, SECOND=346, SECONDDATE=347, 
		SECURITY=348, SEED=349, SEGMENT=350, SELECT=351, SELF=352, SEQUENCE=353, 
		SEQUENTIAL=354, SERIALIZABLE=355, SERIALLY_REUSABLE=356, SERVERERROR=357, 
		SESSIONTIMEZONE=358, SET=359, SETS=360, SETTINGS=361, SHARE=362, SHOW=363, 
		SHUTDOWN=364, SIBLINGS=365, SIGNTYPE=366, SIMPLE_INTEGER=367, SINGLE=368, 
		SIZE=369, SKIP_=370, SMALLINT=371, SMALLDECIMAL=372, SNAPSHOT=373, SOME=374, 
		SPECIFICATION=375, SQL=376, SQLDATA=377, SQLERROR=378, SQLEXCEPTION=379, 
		SQLSCRIPT=380, STANDALONE=381, START=382, STARTUP=383, STATEMENT=384, 
		STATEMENT_ID=385, STATIC=386, STATISTICS=387, STRING=388, SUBMULTISET=389, 
		SUBPARTITION=390, SUBSTITUTABLE=391, SUBTYPE=392, SUCCESS=393, SUSPEND=394, 
		TABLE=395, TEMPORARY=396, THE=397, THEN=398, TIME=399, TIMESTAMP=400, 
		TIMESTAMP_LTZ_UNCONSTRAINED=401, TIMESTAMP_TZ_UNCONSTRAINED=402, TIMESTAMP_UNCONSTRAINED=403, 
		TIMEZONE_ABBR=404, TIMEZONE_HOUR=405, TIMEZONE_MINUTE=406, TIMEZONE_REGION=407, 
		TINYINT=408, TO=409, TRAILING=410, TRANSACTION=411, TRANSLATE=412, TREAT=413, 
		TRIGGER=414, TRIM=415, TRUE=416, TRUNCATE=417, TYPE=418, UNBOUNDED=419, 
		UNDER=420, UNION=421, UNIQUE=422, UNLIMITED=423, UNPIVOT=424, UNTIL=425, 
		UPDATE=426, UPDATED=427, UPSERT=428, UROWID=429, USE=430, USING=431, VALIDATE=432, 
		VALUE=433, VALUES=434, VARCHAR=435, VARCHAR2=436, VARIABLE=437, VARRAY=438, 
		VARYING=439, VERSION=440, VERSIONS=441, VIEW=442, WAIT=443, WARNING=444, 
		WELLFORMED=445, WHEN=446, WHENEVER=447, WHERE=448, WHILE=449, WITH=450, 
		WITHIN=451, WORK=452, WRITE=453, XML=454, XMLAGG=455, XMLATTRIBUTES=456, 
		XMLCAST=457, XMLCOLATTVAL=458, XMLELEMENT=459, XMLEXISTS=460, XMLFOREST=461, 
		XMLNAMESPACES=462, XMLPARSE=463, XMLPI=464, XMLQUERY=465, XMLROOT=466, 
		XMLSERIALIZE=467, XMLTABLE=468, YEAR=469, YES=470, YMINTERVAL_UNCONSTRAINED=471, 
		ZONE=472, TOP=473, DO=474, AUTONOMOUS=475, CONDITION=476, ELSEIF=477, 
		EXECUTION=478, OVERVIEW=479, RESIGNAL=480, MESSAGE_TEXT=481, SHORTTEXT=482, 
		SIGNAL=483, SQL_ERROR_CODE=484, SQL_ERROR_MESSAGE=485, SQLWARNING=486, 
		TEXT=487, UNNEST=488, VARBINARY=489, STRING_AGG=490, CORR_SPEARMAN=491, 
		VAR=492, STDDEV_POP=493, VAR_POP=494, STDDEV_SAMP=495, VAR_SAMP=496, PREDICTION=497, 
		PREDICTION_BOUNDS=498, PREDICTION_COST=499, PREDICTION_DETAILS=500, PREDICTION_PROBABILITY=501, 
		PREDICTION_SET=502, CUME_DIST=503, DENSE_RANK=504, LISTAGG=505, PERCENT_RANK=506, 
		PERCENTILE_CONT=507, PERCENTILE_DISC=508, RANK=509, AVG=510, CORR=511, 
		LAG=512, LEAD=513, MAX=514, MEDIAN=515, MIN=516, NTILE=517, RATIO_TO_REPORT=518, 
		ROW_NUMBER=519, SUM=520, VARIANCE=521, REGR_=522, STDDEV=523, VAR_=524, 
		COVAR_=525, NATIONAL_CHAR_STRING_LIT=526, BIT_STRING_LIT=527, HEX_STRING_LIT=528, 
		DOUBLE_PERIOD=529, PERIOD=530, UNSIGNED_INTEGER=531, APPROXIMATE_NUM_LIT=532, 
		CHAR_STRING=533, DELIMITED_ID=534, PERCENT=535, AMPERSAND=536, LEFT_PAREN=537, 
		RIGHT_PAREN=538, DOUBLE_ASTERISK=539, ASTERISK=540, PLUS_SIGN=541, MINUS_SIGN=542, 
		COMMA=543, SOLIDUS=544, AT_SIGN=545, ASSIGN_OP=546, BINDVAR=547, COLON=548, 
		SEMICOLON=549, LESS_THAN_OR_EQUALS_OP=550, LESS_THAN_OP=551, GREATER_THAN_OR_EQUALS_OP=552, 
		NOT_EQUAL_OP=553, CARRET_OPERATOR_PART=554, TILDE_OPERATOR_PART=555, EXCLAMATION_OPERATOR_PART=556, 
		GREATER_THAN_OP=557, CONCATENATION_OP=558, VERTICAL_BAR=559, EQUALS_OP=560, 
		LEFT_BRACKET=561, RIGHT_BRACKET=562, INTRODUCER=563, SPACES=564, SINGLE_LINE_COMMENT=565, 
		MULTI_LINE_COMMENT=566, PROMPT=567, REGULAR_ID=568, R=569;
	
	/** The Constant RULE_regular_id. */
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_set_schema = 4, RULE_drop_procedure = 5, 
		RULE_create_procedure_body = 6, RULE_create_func_body = 7, RULE_param_name = 8, 
		RULE_return_type = 9, RULE_return_table_type = 10, RULE_param_type = 11, 
		RULE_sql_type = 12, RULE_table_type = 13, RULE_table_type_definition = 14, 
		RULE_column_list_definition = 15, RULE_column_elem = 16, RULE_column_name = 17, 
		RULE_data_type = 18, RULE_parameter = 19, RULE_parameter_clause = 20, 
		RULE_lang = 21, RULE_security_mode = 22, RULE_default_schema_name = 23, 
		RULE_view_name = 24, RULE_proc_decl_list = 25, RULE_proc_decl = 26, RULE_proc_decl_op = 27, 
		RULE_proc_variable = 28, RULE_proc_table_variable = 29, RULE_variable_name_list = 30, 
		RULE_array_datatype = 31, RULE_array_constructor = 32, RULE_proc_default = 33, 
		RULE_proc_cursor = 34, RULE_proc_cursor_param_list = 35, RULE_variable_name = 36, 
		RULE_cursor_name = 37, RULE_proc_cursor_param = 38, RULE_proc_condition = 39, 
		RULE_sql_error_code = 40, RULE_proc_handler_list = 41, RULE_proc_handler = 42, 
		RULE_proc_condition_value_list = 43, RULE_proc_condition_value = 44, RULE_proc_stmt_list = 45, 
		RULE_func_stmt_list = 46, RULE_proc_stmt = 47, RULE_proc_sql = 48, RULE_update_stmt = 49, 
		RULE_insert_stmt = 50, RULE_delete_stmt = 51, RULE_truncate_stmt = 52, 
		RULE_create_stmt = 53, RULE_proc_while = 54, RULE_proc_for = 55, RULE_proc_rollback = 56, 
		RULE_proc_commit = 57, RULE_proc_break = 58, RULE_proc_signal = 59, RULE_proc_resignal = 60, 
		RULE_signal_value = 61, RULE_signal_name = 62, RULE_set_signal_info = 63, 
		RULE_message_string = 64, RULE_proc_if = 65, RULE_proc_elseif_list = 66, 
		RULE_proc_else = 67, RULE_proc_block = 68, RULE_proc_block_option = 69, 
		RULE_proc_assign = 70, RULE_proc_single_assign = 71, RULE_unnest_function = 72, 
		RULE_table_name = 73, RULE_as_col_names = 74, RULE_column_name_list = 75, 
		RULE_proc_call = 76, RULE_param_list = 77, RULE_proc_param = 78, RULE_named_param = 79, 
		RULE_procedure_body = 80, RULE_procedure_body_ = 81, RULE_func_body = 82, 
		RULE_parameter_name = 83, RULE_for_each_row = 84, RULE_alter_attribute_definition = 85, 
		RULE_attribute_definition = 86, RULE_alter_collection_clauses = 87, RULE_dependent_handling_clause = 88, 
		RULE_dependent_exceptions_part = 89, RULE_type_definition = 90, RULE_object_type_def = 91, 
		RULE_object_as_part = 92, RULE_object_under_part = 93, RULE_nested_table_type_def = 94, 
		RULE_sqlj_object_type = 95, RULE_type_body = 96, RULE_type_body_elements = 97, 
		RULE_map_order_func_declaration = 98, RULE_subprog_decl_in_type = 99, 
		RULE_proc_decl_in_type = 100, RULE_func_decl_in_type = 101, RULE_constructor_declaration = 102, 
		RULE_modifier_clause = 103, RULE_object_member_spec = 104, RULE_sqlj_object_type_attr = 105, 
		RULE_element_spec = 106, RULE_element_spec_options = 107, RULE_subprogram_spec = 108, 
		RULE_type_procedure_spec = 109, RULE_type_function_spec = 110, RULE_constructor_spec = 111, 
		RULE_map_order_function_spec = 112, RULE_pragma_clause = 113, RULE_pragma_elements = 114, 
		RULE_type_elements_parameter = 115, RULE_create_sequence = 116, RULE_sequence_spec = 117, 
		RULE_sequence_start_clause = 118, RULE_invoker_rights_clause = 119, RULE_compiler_parameters_clause = 120, 
		RULE_call_spec = 121, RULE_java_spec = 122, RULE_c_spec = 123, RULE_c_agent_in_clause = 124, 
		RULE_c_parameters_clause = 125, RULE_default_value_part = 126, RULE_declare_spec = 127, 
		RULE_variable_declaration = 128, RULE_subtype_declaration = 129, RULE_cursor_declaration = 130, 
		RULE_parameter_spec = 131, RULE_exception_declaration = 132, RULE_pragma_declaration = 133, 
		RULE_record_declaration = 134, RULE_record_type_dec = 135, RULE_field_spec = 136, 
		RULE_record_var_dec = 137, RULE_table_declaration = 138, RULE_table_type_dec = 139, 
		RULE_table_indexed_by_part = 140, RULE_varray_type_def = 141, RULE_table_var_dec = 142, 
		RULE_seq_of_statements = 143, RULE_label_declaration = 144, RULE_statement = 145, 
		RULE_assignment_statement = 146, RULE_continue_statement = 147, RULE_exit_statement = 148, 
		RULE_goto_statement = 149, RULE_if_statement = 150, RULE_elsif_part = 151, 
		RULE_else_part = 152, RULE_loop_statement = 153, RULE_cursor_loop_param = 154, 
		RULE_forall_statement = 155, RULE_bounds_clause = 156, RULE_between_bound = 157, 
		RULE_lower_bound = 158, RULE_upper_bound = 159, RULE_null_statement = 160, 
		RULE_raise_statement = 161, RULE_return_statement = 162, RULE_function_call = 163, 
		RULE_body = 164, RULE_exception_clause = 165, RULE_exception_handler = 166, 
		RULE_trigger_block = 167, RULE_block = 168, RULE_sql_statement = 169, 
		RULE_execute_immediate = 170, RULE_dynamic_returning_clause = 171, RULE_data_manipulation_language_statements = 172, 
		RULE_cursor_manipulation_statements = 173, RULE_close_statement = 174, 
		RULE_open_statement = 175, RULE_fetch_statement = 176, RULE_open_for_statement = 177, 
		RULE_transaction_control_statements = 178, RULE_set_transaction_command = 179, 
		RULE_set_constraint_command = 180, RULE_commit_statement = 181, RULE_write_clause = 182, 
		RULE_rollback_statement = 183, RULE_savepoint_statement = 184, RULE_explain_statement = 185, 
		RULE_select_statement = 186, RULE_subquery_factoring_clause = 187, RULE_factoring_element = 188, 
		RULE_search_clause = 189, RULE_cycle_clause = 190, RULE_subquery = 191, 
		RULE_subquery_operation_part = 192, RULE_subquery_basic_elements = 193, 
		RULE_query_block = 194, RULE_selected_element = 195, RULE_from_clause = 196, 
		RULE_select_list_elements = 197, RULE_table_ref_list = 198, RULE_table_ref = 199, 
		RULE_table_ref_aux = 200, RULE_join_clause = 201, RULE_join_on_part = 202, 
		RULE_join_using_part = 203, RULE_outer_join_type = 204, RULE_query_partition_clause = 205, 
		RULE_flashback_query_clause = 206, RULE_pivot_clause = 207, RULE_pivot_element = 208, 
		RULE_pivot_for_clause = 209, RULE_pivot_in_clause = 210, RULE_pivot_in_clause_element = 211, 
		RULE_pivot_in_clause_elements = 212, RULE_unpivot_clause = 213, RULE_unpivot_in_clause = 214, 
		RULE_unpivot_in_elements = 215, RULE_hierarchical_query_clause = 216, 
		RULE_start_part = 217, RULE_group_by_clause = 218, RULE_group_by_elements = 219, 
		RULE_rollup_cube_clause = 220, RULE_grouping_sets_clause = 221, RULE_grouping_sets_elements = 222, 
		RULE_having_clause = 223, RULE_model_clause = 224, RULE_cell_reference_options = 225, 
		RULE_return_rows_clause = 226, RULE_reference_model = 227, RULE_main_model = 228, 
		RULE_model_column_clauses = 229, RULE_model_column_partition_part = 230, 
		RULE_model_column_list = 231, RULE_model_column = 232, RULE_model_rules_clause = 233, 
		RULE_model_rules_part = 234, RULE_model_rules_element = 235, RULE_cell_assignment = 236, 
		RULE_model_iterate_clause = 237, RULE_until_part = 238, RULE_order_by_clause = 239, 
		RULE_order_by_elements = 240, RULE_for_update_clause = 241, RULE_for_update_of_part = 242, 
		RULE_for_update_options = 243, RULE_update_statement = 244, RULE_update_set_clause = 245, 
		RULE_column_based_update_set_clause = 246, RULE_delete_statement = 247, 
		RULE_insert_statement = 248, RULE_declare_statement = 249, RULE_exception_statement = 250, 
		RULE_proc_condition_value_ = 251, RULE_single_table_insert = 252, RULE_multi_table_insert = 253, 
		RULE_multi_table_element = 254, RULE_conditional_insert_clause = 255, 
		RULE_conditional_insert_when_part = 256, RULE_conditional_insert_else_part = 257, 
		RULE_insert_into_clause = 258, RULE_values_clause = 259, RULE_merge_statement = 260, 
		RULE_merge_update_clause = 261, RULE_merge_element = 262, RULE_merge_update_delete_part = 263, 
		RULE_merge_insert_clause = 264, RULE_selected_tableview = 265, RULE_lock_table_statement = 266, 
		RULE_wait_nowait_part = 267, RULE_lock_table_element = 268, RULE_lock_mode = 269, 
		RULE_general_table_ref = 270, RULE_static_returning_clause = 271, RULE_error_logging_clause = 272, 
		RULE_error_logging_into_part = 273, RULE_error_logging_reject_part = 274, 
		RULE_dml_table_expression_clause = 275, RULE_table_collection_expression = 276, 
		RULE_subquery_restriction_clause = 277, RULE_sample_clause = 278, RULE_seed_part = 279, 
		RULE_cursor_expression = 280, RULE_expression_list = 281, RULE_condition = 282, 
		RULE_condition_wrapper = 283, RULE_condition_ = 284, RULE_predicate = 285, 
		RULE_comparison_predicate = 286, RULE_relational_operator = 287, RULE_range_predicate = 288, 
		RULE_in_predicate = 289, RULE_exist_predicate = 290, RULE_like_predicate = 291, 
		RULE_null_predicate = 292, RULE_expression__list = 293, RULE_expression_ = 294, 
		RULE_correlation_name = 295, RULE_operator = 296, RULE_case_expression_ = 297, 
		RULE_simple_case_expression_ = 298, RULE_search_case_expression_ = 299, 
		RULE_function_expression_ = 300, RULE_aggregate_expression_ = 301, RULE_agg_name = 302, 
		RULE_delimiter = 303, RULE_aggregate_order_by_clause = 304, RULE_expression = 305, 
		RULE_expression_wrapper = 306, RULE_logical_and_expression = 307, RULE_negated_expression = 308, 
		RULE_equality_expression = 309, RULE_multiset_expression = 310, RULE_multiset_type = 311, 
		RULE_relational_expression = 312, RULE_relational_expression_operator = 313, 
		RULE_compound_expression = 314, RULE_like_type = 315, RULE_like_escape_part = 316, 
		RULE_in_elements = 317, RULE_between_elements = 318, RULE_concatenation = 319, 
		RULE_concatenation_wrapper = 320, RULE_additive_expression = 321, RULE_multiply_expression = 322, 
		RULE_datetime_expression = 323, RULE_interval_expression = 324, RULE_model_expression = 325, 
		RULE_model_expression_element = 326, RULE_single_column_for_loop = 327, 
		RULE_for_like_part = 328, RULE_for_increment_decrement_type = 329, RULE_multi_column_for_loop = 330, 
		RULE_unary_expression = 331, RULE_case_statement = 332, RULE_simple_case_statement = 333, 
		RULE_simple_case_when_part = 334, RULE_searched_case_statement = 335, 
		RULE_searched_case_when_part = 336, RULE_case_else_part = 337, RULE_atom = 338, 
		RULE_expression_or_vector = 339, RULE_vector_expr = 340, RULE_quantified_expression = 341, 
		RULE_standard_function = 342, RULE_over_clause_keyword = 343, RULE_within_or_over_clause_keyword = 344, 
		RULE_standard_prediction_function_keyword = 345, RULE_over_clause = 346, 
		RULE_windowing_clause = 347, RULE_windowing_type = 348, RULE_windowing_elements = 349, 
		RULE_using_clause = 350, RULE_using_element = 351, RULE_collect_order_by_part = 352, 
		RULE_within_or_over_part = 353, RULE_cost_matrix_clause = 354, RULE_xml_passing_clause = 355, 
		RULE_xml_attributes_clause = 356, RULE_xml_namespaces_clause = 357, RULE_xml_table_column = 358, 
		RULE_xml_general_default_part = 359, RULE_xml_multiuse_expression_element = 360, 
		RULE_xmlroot_param_version_part = 361, RULE_xmlroot_param_standalone_part = 362, 
		RULE_xmlserialize_param_enconding_part = 363, RULE_xmlserialize_param_version_part = 364, 
		RULE_xmlserialize_param_ident_part = 365, RULE_sql_plus_command = 366, 
		RULE_whenever_command = 367, RULE_set_command = 368, RULE_exit_command = 369, 
		RULE_prompt_command = 370, RULE_partition_extension_clause = 371, RULE_column_alias = 372, 
		RULE_table_alias = 373, RULE_alias_quoted_string = 374, RULE_where_clause = 375, 
		RULE_current_of_clause = 376, RULE_into_clause = 377, RULE_xml_column_name = 378, 
		RULE_cost_class_name = 379, RULE_attribute_name = 380, RULE_savepoint_name = 381, 
		RULE_rollback_segment_name = 382, RULE_table_var_name = 383, RULE_schema_name = 384, 
		RULE_routine_name = 385, RULE_package_name = 386, RULE_implementation_type_name = 387, 
		RULE_reference_model_name = 388, RULE_main_model_name = 389, RULE_aggregate_function_name = 390, 
		RULE_query_name = 391, RULE_constraint_name = 392, RULE_label_name = 393, 
		RULE_type_name = 394, RULE_sequence_name = 395, RULE_exception_name = 396, 
		RULE_function_name = 397, RULE_proc_name = 398, RULE_trigger_name = 399, 
		RULE_variable_name_old = 400, RULE_index_name = 401, RULE_cursor_name_old = 402, 
		RULE_record_name = 403, RULE_collection_name = 404, RULE_link_name = 405, 
		RULE_column_name_old = 406, RULE_tableview_name = 407, RULE_char_set_name = 408, 
		RULE_keep_clause = 409, RULE_function_argument = 410, RULE_function_argument_analytic = 411, 
		RULE_function_argument_modeling = 412, RULE_respect_or_ignore_nulls = 413, 
		RULE_argument = 414, RULE_type_spec = 415, RULE_datatype = 416, RULE_precision_part = 417, 
		RULE_native_datatype_element = 418, RULE_bind_variable = 419, RULE_bind_sql_error_code = 420, 
		RULE_const_sql_error_code = 421, RULE_bind_sql_error_message = 422, RULE_const_sql_error_message = 423, 
		RULE_general_element = 424, RULE_general_element_part = 425, RULE_table_element = 426, 
		RULE_constant = 427, RULE_numeric = 428, RULE_numeric_negative = 429, 
		RULE_quoted_string = 430, RULE_id = 431, RULE_id_expression = 432, RULE_not_equal_op = 433, 
		RULE_greater_than_or_equals_op = 434, RULE_less_than_or_equals_op = 435, 
		RULE_concatenation_op = 436, RULE_outer_join_sign = 437, RULE_regular_id = 438;
	
	/**
	 * Make rule names.
	 *
	 * @return the string[]
	 */
	private static String[] makeRuleNames() {
		return new String[] {
			"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
			"set_schema", "drop_procedure", "create_procedure_body", "create_func_body", 
			"param_name", "return_type", "return_table_type", "param_type", "sql_type", 
			"table_type", "table_type_definition", "column_list_definition", "column_elem", 
			"column_name", "data_type", "parameter", "parameter_clause", "lang", 
			"security_mode", "default_schema_name", "view_name", "proc_decl_list", 
			"proc_decl", "proc_decl_op", "proc_variable", "proc_table_variable", 
			"variable_name_list", "array_datatype", "array_constructor", "proc_default", 
			"proc_cursor", "proc_cursor_param_list", "variable_name", "cursor_name", 
			"proc_cursor_param", "proc_condition", "sql_error_code", "proc_handler_list", 
			"proc_handler", "proc_condition_value_list", "proc_condition_value", 
			"proc_stmt_list", "func_stmt_list", "proc_stmt", "proc_sql", "update_stmt", 
			"insert_stmt", "delete_stmt", "truncate_stmt", "create_stmt", "proc_while", 
			"proc_for", "proc_rollback", "proc_commit", "proc_break", "proc_signal", 
			"proc_resignal", "signal_value", "signal_name", "set_signal_info", "message_string", 
			"proc_if", "proc_elseif_list", "proc_else", "proc_block", "proc_block_option", 
			"proc_assign", "proc_single_assign", "unnest_function", "table_name", 
			"as_col_names", "column_name_list", "proc_call", "param_list", "proc_param", 
			"named_param", "procedure_body", "procedure_body_", "func_body", "parameter_name", 
			"for_each_row", "alter_attribute_definition", "attribute_definition", 
			"alter_collection_clauses", "dependent_handling_clause", "dependent_exceptions_part", 
			"type_definition", "object_type_def", "object_as_part", "object_under_part", 
			"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
			"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
			"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
			"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
			"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
			"pragma_clause", "pragma_elements", "type_elements_parameter", "create_sequence", 
			"sequence_spec", "sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause", 
			"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
			"default_value_part", "declare_spec", "variable_declaration", "subtype_declaration", 
			"cursor_declaration", "parameter_spec", "exception_declaration", "pragma_declaration", 
			"record_declaration", "record_type_dec", "field_spec", "record_var_dec", 
			"table_declaration", "table_type_dec", "table_indexed_by_part", "varray_type_def", 
			"table_var_dec", "seq_of_statements", "label_declaration", "statement", 
			"assignment_statement", "continue_statement", "exit_statement", "goto_statement", 
			"if_statement", "elsif_part", "else_part", "loop_statement", "cursor_loop_param", 
			"forall_statement", "bounds_clause", "between_bound", "lower_bound", 
			"upper_bound", "null_statement", "raise_statement", "return_statement", 
			"function_call", "body", "exception_clause", "exception_handler", "trigger_block", 
			"block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
			"data_manipulation_language_statements", "cursor_manipulation_statements", 
			"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
			"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
			"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
			"explain_statement", "select_statement", "subquery_factoring_clause", 
			"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
			"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
			"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
			"join_clause", "join_on_part", "join_using_part", "outer_join_type", 
			"query_partition_clause", "flashback_query_clause", "pivot_clause", "pivot_element", 
			"pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
			"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
			"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
			"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
			"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
			"model_column_clauses", "model_column_partition_part", "model_column_list", 
			"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
			"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
			"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
			"update_statement", "update_set_clause", "column_based_update_set_clause", 
			"delete_statement", "insert_statement", "declare_statement", "exception_statement", 
			"proc_condition_value_", "single_table_insert", "multi_table_insert", 
			"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
			"conditional_insert_else_part", "insert_into_clause", "values_clause", 
			"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
			"merge_insert_clause", "selected_tableview", "lock_table_statement", 
			"wait_nowait_part", "lock_table_element", "lock_mode", "general_table_ref", 
			"static_returning_clause", "error_logging_clause", "error_logging_into_part", 
			"error_logging_reject_part", "dml_table_expression_clause", "table_collection_expression", 
			"subquery_restriction_clause", "sample_clause", "seed_part", "cursor_expression", 
			"expression_list", "condition", "condition_wrapper", "condition_", "predicate", 
			"comparison_predicate", "relational_operator", "range_predicate", "in_predicate", 
			"exist_predicate", "like_predicate", "null_predicate", "expression__list", 
			"expression_", "correlation_name", "operator", "case_expression_", "simple_case_expression_", 
			"search_case_expression_", "function_expression_", "aggregate_expression_", 
			"agg_name", "delimiter", "aggregate_order_by_clause", "expression", "expression_wrapper", 
			"logical_and_expression", "negated_expression", "equality_expression", 
			"multiset_expression", "multiset_type", "relational_expression", "relational_expression_operator", 
			"compound_expression", "like_type", "like_escape_part", "in_elements", 
			"between_elements", "concatenation", "concatenation_wrapper", "additive_expression", 
			"multiply_expression", "datetime_expression", "interval_expression", 
			"model_expression", "model_expression_element", "single_column_for_loop", 
			"for_like_part", "for_increment_decrement_type", "multi_column_for_loop", 
			"unary_expression", "case_statement", "simple_case_statement", "simple_case_when_part", 
			"searched_case_statement", "searched_case_when_part", "case_else_part", 
			"atom", "expression_or_vector", "vector_expr", "quantified_expression", 
			"standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
			"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
			"windowing_type", "windowing_elements", "using_clause", "using_element", 
			"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
			"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
			"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
			"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
			"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
			"whenever_command", "set_command", "exit_command", "prompt_command", 
			"partition_extension_clause", "column_alias", "table_alias", "alias_quoted_string", 
			"where_clause", "current_of_clause", "into_clause", "xml_column_name", 
			"cost_class_name", "attribute_name", "savepoint_name", "rollback_segment_name", 
			"table_var_name", "schema_name", "routine_name", "package_name", "implementation_type_name", 
			"reference_model_name", "main_model_name", "aggregate_function_name", 
			"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
			"exception_name", "function_name", "proc_name", "trigger_name", "variable_name_old", 
			"index_name", "cursor_name_old", "record_name", "collection_name", "link_name", 
			"column_name_old", "tableview_name", "char_set_name", "keep_clause", 
			"function_argument", "function_argument_analytic", "function_argument_modeling", 
			"respect_or_ignore_nulls", "argument", "type_spec", "datatype", "precision_part", 
			"native_datatype_element", "bind_variable", "bind_sql_error_code", "const_sql_error_code", 
			"bind_sql_error_message", "const_sql_error_message", "general_element", 
			"general_element_part", "table_element", "constant", "numeric", "numeric_negative", 
			"quoted_string", "id", "id_expression", "not_equal_op", "greater_than_or_equals_op", 
			"less_than_or_equals_op", "concatenation_op", "outer_join_sign", "regular_id"
		};
	}
	
	/** The Constant ruleNames. */
	public static final String[] ruleNames = makeRuleNames();

	/**
	 * Make literal names.
	 *
	 * @return the string[]
	 */
	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'..'", "'''", "'=>'", "'!='", "'<>'", "'::'", "'^='", "'~='", 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, "'.'", null, null, null, null, "'%'", "'&'", 
			"'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", "'@'", "':='", 
			null, "':'", "';'", "'<='", "'<'", "'>='", null, "'^'", "'~'", "'!'", 
			"'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'"
		};
	}
	
	/** The Constant _LITERAL_NAMES. */
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	
	/**
	 * Make symbolic names.
	 *
	 * @return the string[]
	 */
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, "A_LETTER", "ADD", 
			"AFTER", "AGENT", "AGGREGATE", "ALL", "ALTER", "ALPHANUM", "ANALYZE", 
			"AND", "ANY", "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", 
			"AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BATCH", "BEFORE", 
			"BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", 
			"BIGINT", "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BREAK", 
			"BULK", "BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", 
			"CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB", 
			"CLOSE", "CLUSTER", "COLLECT", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
			"COMPATIBILITY", "COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", 
			"CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT", 
			"CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", "COST", "COUNT", 
			"CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
			"CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE", 
			"DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT", 
			"DEFAULT", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DEPTH", "DESC", 
			"DETERMINISTIC", "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
			"DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "ELEMENT", 
			"ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", "ENTITYESCAPING", 
			"ERRORS", "ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", 
			"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
			"EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FINAL", "FIRST", 
			"FIRST_VALUE", "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", "FORCE", 
			"FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPING", "HASH", 
			"HAVING", "HANDLER", "HIDE", "HOUR", "IF", "IGNORE", "IMMEDIATE", "IN", 
			"INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", 
			"INDICES", "INFINITE", "INLINE", "INNER", "INOUT", "INSERT", "INSTANTIABLE", 
			"INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", 
			"INVOKER", "IS", "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", 
			"LAST", "LAST_VALUE", "LEADING", "LEFT", "LEVEL", "LIBRARY", "LIKE", 
			"LIKE2", "LIKE4", "LIKEC", "LIKE_REGEXPR", "LIMIT", "LOCAL", "LOCK", 
			"LOCKED", "LOG", "LOGOFF", "LOGON", "LONG", "LOOP", "MAIN", "MAP", "MATCHED", 
			"MAXVALUE", "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", "MINVALUE", 
			"MLSLABEL", "MODE", "MODEL", "MODIFY", "MONTH", "MULTISET", "NAME", "NAN", 
			"NATURAL", "NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", 
			"NEW", "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
			"NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", "NOT", 
			"NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR", "OBJECT", 
			"OF", "OFF", "OID", "OLD", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", 
			"ORDER", "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
			"PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING", 
			"PATH", "PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", 
			"PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", 
			"PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", "RAW", "READ", "READS", 
			"REAL", "RECORD", "REF", "REFERENCE", "REFERENCING", "REJECT", "RELIES_ON", 
			"RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", 
			"RETURN", "RETURNS", "RETURNING", "REUSE", "REVERSE", "REVOKE", "RIGHT", 
			"ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", "SAVE", 
			"SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SECONDDATE", 
			"SECURITY", "SEED", "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
			"SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", 
			"SET", "SETS", "SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", 
			"SIMPLE_INTEGER", "SINGLE", "SIZE", "SKIP_", "SMALLINT", "SMALLDECIMAL", 
			"SNAPSHOT", "SOME", "SPECIFICATION", "SQL", "SQLDATA", "SQLERROR", "SQLEXCEPTION", 
			"SQLSCRIPT", "STANDALONE", "START", "STARTUP", "STATEMENT", "STATEMENT_ID", 
			"STATIC", "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", 
			"SUBTYPE", "SUCCESS", "SUSPEND", "TABLE", "TEMPORARY", "THE", "THEN", 
			"TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", 
			"TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
			"TIMEZONE_REGION", "TINYINT", "TO", "TRAILING", "TRANSACTION", "TRANSLATE", 
			"TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", 
			"UNDER", "UNION", "UNIQUE", "UNLIMITED", "UNPIVOT", "UNTIL", "UPDATE", 
			"UPDATED", "UPSERT", "UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", 
			"VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", "VARYING", "VERSION", "VERSIONS", 
			"VIEW", "WAIT", "WARNING", "WELLFORMED", "WHEN", "WHENEVER", "WHERE", 
			"WHILE", "WITH", "WITHIN", "WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", 
			"XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", 
			"XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
			"YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", "TOP", "DO", "AUTONOMOUS", 
			"CONDITION", "ELSEIF", "EXECUTION", "OVERVIEW", "RESIGNAL", "MESSAGE_TEXT", 
			"SHORTTEXT", "SIGNAL", "SQL_ERROR_CODE", "SQL_ERROR_MESSAGE", "SQLWARNING", 
			"TEXT", "UNNEST", "VARBINARY", "STRING_AGG", "CORR_SPEARMAN", "VAR", 
			"STDDEV_POP", "VAR_POP", "STDDEV_SAMP", "VAR_SAMP", "PREDICTION", "PREDICTION_BOUNDS", 
			"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
			"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "RANK", "AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", 
			"MIN", "NTILE", "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", "REGR_", 
			"STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", 
			"HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
			"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", 
			"RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", 
			"COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", 
			"LESS_THAN_OR_EQUALS_OP", "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", 
			"NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
			"GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
			"PROMPT", "REGULAR_ID", "R"
		};
	}
	
	/** The Constant _SYMBOLIC_NAMES. */
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	
	/** The Constant VOCABULARY. */
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * The Constant tokenNames.
	 *
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	/**
	 * Gets the token names.
	 *
	 * @return the token names
	 */
	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	/**
	 * Gets the vocabulary.
	 *
	 * @return the vocabulary
	 */
	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	/**
	 * Gets the grammar file name.
	 *
	 * @return the grammar file name
	 */
	@Override
	public String getGrammarFileName() { return "Hana.g4"; }

	/**
	 * Gets the rule names.
	 *
	 * @return the rule names
	 */
	@Override
	public String[] getRuleNames() { return ruleNames; }

	/**
	 * Gets the serialized ATN.
	 *
	 * @return the serialized ATN
	 */
	@Override
	public String getSerializedATN() { return _serializedATN; }

	/**
	 * Gets the atn.
	 *
	 * @return the atn
	 */
	@Override
	public ATN getATN() { return _ATN; }

	/**
	 * Instantiates a new hana parser.
	 *
	 * @param input the input
	 */
	public HanaParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	/**
	 * The Class Swallow_to_semiContext.
	 */
	public static class Swallow_to_semiContext extends ParserRuleContext {
		
		/**
		 * Semicolon.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SEMICOLON() { return getTokens(HanaParser.SEMICOLON); }
		
		/**
		 * Semicolon.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON(int i) {
			return getToken(HanaParser.SEMICOLON, i);
		}
		
		/**
		 * Instantiates a new swallow to semi context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSwallow_to_semi(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSwallow_to_semi(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Swallow to semi.
	 *
	 * @return the swallow to semi context
	 * @throws RecognitionException the recognition exception
	 */
	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(879); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(878);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(881); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Compilation_unitContext.
	 */
	public static class Compilation_unitContext extends ParserRuleContext {
		
		/**
		 * Eof.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EOF() { return getToken(HanaParser.EOF, 0); }
		
		/**
		 * Unit statement.
		 *
		 * @return the list
		 */
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		
		/**
		 * Unit statement.
		 *
		 * @param i the i
		 * @return the unit statement context
		 */
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		
		/**
		 * Instantiates a new compilation unit context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCompilation_unit(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCompilation_unit(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Compilation unit.
	 *
	 * @return the compilation unit context
	 * @throws RecognitionException the recognition exception
	 */
	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (CREATE - 87)) | (1L << (DECLARE - 87)) | (1L << (DELETE - 87)) | (1L << (DROP - 87)) | (1L << (EXPLAIN - 87)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (FUNCTION - 162)) | (1L << (INSERT - 162)) | (1L << (LOCK - 162)))) != 0) || _la==MERGE || ((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (PROCEDURE - 307)) | (1L << (SELECT - 307)) | (1L << (SET - 307)))) != 0) || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(883);
				unit_statement();
				}
				}
				setState(888);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(889);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sql_scriptContext.
	 */
	public static class Sql_scriptContext extends ParserRuleContext {
		
		/**
		 * Eof.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EOF() { return getToken(HanaParser.EOF, 0); }
		
		/**
		 * Unit statement.
		 *
		 * @return the list
		 */
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		
		/**
		 * Unit statement.
		 *
		 * @param i the i
		 * @return the unit statement context
		 */
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		
		/**
		 * Instantiates a new sql script context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sql_script; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_script(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_script(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sql script.
	 *
	 * @return the sql script context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (CREATE - 87)) | (1L << (DECLARE - 87)) | (1L << (DELETE - 87)) | (1L << (DROP - 87)) | (1L << (EXPLAIN - 87)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (FUNCTION - 162)) | (1L << (INSERT - 162)) | (1L << (LOCK - 162)))) != 0) || _la==MERGE || ((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (PROCEDURE - 307)) | (1L << (SELECT - 307)) | (1L << (SET - 307)))) != 0) || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(891);
				unit_statement();
				}
				}
				setState(896);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(897);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Unit_statementContext.
	 */
	public static class Unit_statementContext extends ParserRuleContext {
		
		/**
		 * Sets the schema.
		 *
		 * @return the sets the schema context
		 */
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		
		/**
		 * Creates the func body.
		 *
		 * @return the creates the func body context
		 */
		public Create_func_bodyContext create_func_body() {
			return getRuleContext(Create_func_bodyContext.class,0);
		}
		
		/**
		 * Creates the procedure body.
		 *
		 * @return the creates the procedure body context
		 */
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		
		/**
		 * Creates the sequence.
		 *
		 * @return the creates the sequence context
		 */
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		
		/**
		 * Drop procedure.
		 *
		 * @return the drop procedure context
		 */
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		
		/**
		 * Data manipulation language statements.
		 *
		 * @return the data manipulation language statements context
		 */
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		
		/**
		 * Instantiates a new unit statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnit_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnit_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Unit statement.
	 *
	 * @return the unit statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(899);
				set_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(900);
				create_func_body();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(901);
				create_procedure_body();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(902);
				create_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(903);
				drop_procedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(904);
				data_manipulation_language_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Set_schemaContext.
	 */
	public static class Set_schemaContext extends ParserRuleContext {
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Schema.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SCHEMA() { return getToken(HanaParser.SCHEMA, 0); }
		
		/**
		 * Schema name.
		 *
		 * @return the schema name context
		 */
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new sets the schema context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Set_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_set_schema; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_schema(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_schema(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sets the schema.
	 *
	 * @return the sets the schema context
	 * @throws RecognitionException the recognition exception
	 */
	public final Set_schemaContext set_schema() throws RecognitionException {
		Set_schemaContext _localctx = new Set_schemaContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_set_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(907);
			match(SET);
			setState(908);
			match(SCHEMA);
			setState(909);
			schema_name();
			setState(910);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Drop_procedureContext.
	 */
	public static class Drop_procedureContext extends ParserRuleContext {
		
		/**
		 * Drop.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DROP() { return getToken(HanaParser.DROP, 0); }
		
		/**
		 * Procedure.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PROCEDURE() { return getToken(HanaParser.PROCEDURE, 0); }
		
		/**
		 * Proc name.
		 *
		 * @return the proc name context
		 */
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new drop procedure context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDrop_procedure(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDrop_procedure(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Drop procedure.
	 *
	 * @return the drop procedure context
	 * @throws RecognitionException the recognition exception
	 */
	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(912);
			match(DROP);
			setState(913);
			match(PROCEDURE);
			setState(914);
			proc_name();
			setState(915);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Create_procedure_bodyContext.
	 */
	public static class Create_procedure_bodyContext extends ParserRuleContext {
		
		/**
		 * Procedure.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PROCEDURE() { return getToken(HanaParser.PROCEDURE, 0); }
		
		/**
		 * Proc name.
		 *
		 * @return the proc name context
		 */
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Begin.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BEGIN() { return getToken(HanaParser.BEGIN, 0); }
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Creates the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CREATE() { return getToken(HanaParser.CREATE, 0); }
		
		/**
		 * Parameter clause.
		 *
		 * @return the parameter clause context
		 */
		public Parameter_clauseContext parameter_clause() {
			return getRuleContext(Parameter_clauseContext.class,0);
		}
		
		/**
		 * Language.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		
		/**
		 * Lang.
		 *
		 * @return the lang context
		 */
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		
		/**
		 * Sql.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SQL() { return getTokens(HanaParser.SQL); }
		
		/**
		 * Sql.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SQL(int i) {
			return getToken(HanaParser.SQL, i);
		}
		
		/**
		 * Security.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SECURITY() { return getToken(HanaParser.SECURITY, 0); }
		
		/**
		 * Security mode.
		 *
		 * @return the security mode context
		 */
		public Security_modeContext security_mode() {
			return getRuleContext(Security_modeContext.class,0);
		}
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Schema.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SCHEMA() { return getToken(HanaParser.SCHEMA, 0); }
		
		/**
		 * Default schema name.
		 *
		 * @return the default schema name context
		 */
		public Default_schema_nameContext default_schema_name() {
			return getRuleContext(Default_schema_nameContext.class,0);
		}
		
		/**
		 * Reads.
		 *
		 * @return the terminal node
		 */
		public TerminalNode READS() { return getToken(HanaParser.READS, 0); }
		
		/**
		 * Data.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DATA() { return getToken(HanaParser.DATA, 0); }
		
		/**
		 * Sequential.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		
		/**
		 * Execution.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXECUTION() { return getToken(HanaParser.EXECUTION, 0); }
		
		/**
		 * Procedure body.
		 *
		 * @return the procedure body context
		 */
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Result.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		
		/**
		 * View.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VIEW() { return getToken(HanaParser.VIEW, 0); }
		
		/**
		 * View name.
		 *
		 * @return the view name context
		 */
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new creates the procedure body context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCreate_procedure_body(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCreate_procedure_body(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Creates the procedure body.
	 *
	 * @return the creates the procedure body context
	 * @throws RecognitionException the recognition exception
	 */
	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(917);
				match(CREATE);
				}
			}

			setState(920);
			match(PROCEDURE);
			setState(921);
			proc_name();
			setState(923);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(922);
				parameter_clause();
				}
			}

			setState(927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LANGUAGE) {
				{
				setState(925);
				match(LANGUAGE);
				setState(926);
				lang();
				}
			}

			setState(932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(929);
				match(SQL);
				setState(930);
				match(SECURITY);
				setState(931);
				security_mode();
				}
			}

			setState(937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(934);
				match(DEFAULT);
				setState(935);
				match(SCHEMA);
				setState(936);
				default_schema_name();
				}
			}

			setState(948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READS) {
				{
				setState(939);
				match(READS);
				setState(940);
				match(SQL);
				setState(941);
				match(DATA);
				setState(946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(942);
					match(WITH);
					setState(943);
					match(RESULT);
					setState(944);
					match(VIEW);
					setState(945);
					view_name();
					}
				}

				}
			}

			setState(950);
			match(AS);
			setState(951);
			match(BEGIN);
			setState(954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(952);
				match(SEQUENTIAL);
				setState(953);
				match(EXECUTION);
				}
				break;
			}
			setState(957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(956);
				procedure_body();
				}
			}

			setState(959);
			match(END);
			setState(961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(960);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Create_func_bodyContext.
	 */
	public static class Create_func_bodyContext extends ParserRuleContext {
		
		/**
		 * Function.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		
		/**
		 * Proc name.
		 *
		 * @return the proc name context
		 */
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		
		/**
		 * Returns.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURNS() { return getToken(HanaParser.RETURNS, 0); }
		
		/**
		 * Return type.
		 *
		 * @return the return type context
		 */
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Begin.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BEGIN() { return getToken(HanaParser.BEGIN, 0); }
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Parameter clause.
		 *
		 * @return the parameter clause context
		 */
		public Parameter_clauseContext parameter_clause() {
			return getRuleContext(Parameter_clauseContext.class,0);
		}
		
		/**
		 * Language.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		
		/**
		 * Lang.
		 *
		 * @return the lang context
		 */
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		
		/**
		 * Sql.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SQL() { return getTokens(HanaParser.SQL); }
		
		/**
		 * Sql.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SQL(int i) {
			return getToken(HanaParser.SQL, i);
		}
		
		/**
		 * Security.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SECURITY() { return getToken(HanaParser.SECURITY, 0); }
		
		/**
		 * Security mode.
		 *
		 * @return the security mode context
		 */
		public Security_modeContext security_mode() {
			return getRuleContext(Security_modeContext.class,0);
		}
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Schema.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SCHEMA() { return getToken(HanaParser.SCHEMA, 0); }
		
		/**
		 * Default schema name.
		 *
		 * @return the default schema name context
		 */
		public Default_schema_nameContext default_schema_name() {
			return getRuleContext(Default_schema_nameContext.class,0);
		}
		
		/**
		 * Reads.
		 *
		 * @return the terminal node
		 */
		public TerminalNode READS() { return getToken(HanaParser.READS, 0); }
		
		/**
		 * Data.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DATA() { return getToken(HanaParser.DATA, 0); }
		
		/**
		 * Sequential.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		
		/**
		 * Execution.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXECUTION() { return getToken(HanaParser.EXECUTION, 0); }
		
		/**
		 * Procedure body.
		 *
		 * @return the procedure body context
		 */
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Result.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		
		/**
		 * View.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VIEW() { return getToken(HanaParser.VIEW, 0); }
		
		/**
		 * View name.
		 *
		 * @return the view name context
		 */
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new creates the func body context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Create_func_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_create_func_body; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCreate_func_body(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCreate_func_body(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCreate_func_body(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Creates the func body.
	 *
	 * @return the creates the func body context
	 * @throws RecognitionException the recognition exception
	 */
	public final Create_func_bodyContext create_func_body() throws RecognitionException {
		Create_func_bodyContext _localctx = new Create_func_bodyContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_create_func_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(963);
			match(FUNCTION);
			setState(964);
			proc_name();
			setState(966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(965);
				parameter_clause();
				}
			}

			setState(968);
			match(RETURNS);
			setState(969);
			return_type();
			setState(972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LANGUAGE) {
				{
				setState(970);
				match(LANGUAGE);
				setState(971);
				lang();
				}
			}

			setState(977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(974);
				match(SQL);
				setState(975);
				match(SECURITY);
				setState(976);
				security_mode();
				}
			}

			setState(982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(979);
				match(DEFAULT);
				setState(980);
				match(SCHEMA);
				setState(981);
				default_schema_name();
				}
			}

			setState(993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READS) {
				{
				setState(984);
				match(READS);
				setState(985);
				match(SQL);
				setState(986);
				match(DATA);
				setState(991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(987);
					match(WITH);
					setState(988);
					match(RESULT);
					setState(989);
					match(VIEW);
					setState(990);
					view_name();
					}
				}

				}
			}

			setState(995);
			match(AS);
			setState(996);
			match(BEGIN);
			setState(999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(997);
				match(SEQUENTIAL);
				setState(998);
				match(EXECUTION);
				}
				break;
			}
			setState(1002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1001);
				procedure_body();
				}
			}

			setState(1004);
			match(END);
			setState(1005);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Param_nameContext.
	 */
	public static class Param_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new param name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_param_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParam_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParam_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Param name.
	 *
	 * @return the param name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1007);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Return_typeContext.
	 */
	public static class Return_typeContext extends ParserRuleContext {
		
		/**
		 * Param list.
		 *
		 * @return the param list context
		 */
		public Param_listContext param_list() {
			return getRuleContext(Param_listContext.class,0);
		}
		
		/**
		 * Return table type.
		 *
		 * @return the return table type context
		 */
		public Return_table_typeContext return_table_type() {
			return getRuleContext(Return_table_typeContext.class,0);
		}
		
		/**
		 * Instantiates a new return type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Return_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_return_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReturn_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReturn_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReturn_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Return type.
	 *
	 * @return the return type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Return_typeContext return_type() throws RecognitionException {
		Return_typeContext _localctx = new Return_typeContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_return_type);
		try {
			setState(1011);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case BINDVAR:
			case COLON:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1009);
				param_list();
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1010);
				return_table_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Return_table_typeContext.
	 */
	public static class Return_table_typeContext extends ParserRuleContext {
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * Column list definition.
		 *
		 * @return the column list definition context
		 */
		public Column_list_definitionContext column_list_definition() {
			return getRuleContext(Column_list_definitionContext.class,0);
		}
		
		/**
		 * Instantiates a new return table type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Return_table_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_return_table_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReturn_table_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReturn_table_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReturn_table_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Return table type.
	 *
	 * @return the return table type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Return_table_typeContext return_table_type() throws RecognitionException {
		Return_table_typeContext _localctx = new Return_table_typeContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_return_table_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1013);
			match(TABLE);
			setState(1014);
			column_list_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Param_typeContext.
	 */
	public static class Param_typeContext extends ParserRuleContext {
		
		/**
		 * Sql type.
		 *
		 * @return the sql type context
		 */
		public Sql_typeContext sql_type() {
			return getRuleContext(Sql_typeContext.class,0);
		}
		
		/**
		 * Table type.
		 *
		 * @return the table type context
		 */
		public Table_typeContext table_type() {
			return getRuleContext(Table_typeContext.class,0);
		}
		
		/**
		 * Table type definition.
		 *
		 * @return the table type definition context
		 */
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		
		/**
		 * Instantiates a new param type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Param_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_param_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParam_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParam_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParam_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Param type.
	 *
	 * @return the param type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Param_typeContext param_type() throws RecognitionException {
		Param_typeContext _localctx = new Param_typeContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_param_type);
		try {
			setState(1019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1016);
				sql_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1017);
				table_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1018);
				table_type_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sql_typeContext.
	 */
	public static class Sql_typeContext extends ParserRuleContext {
		
		/**
		 * Date.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DATE() { return getToken(HanaParser.DATE, 0); }
		
		/**
		 * Time.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		
		/**
		 * Timestamp.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		
		/**
		 * Seconddate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SECONDDATE() { return getToken(HanaParser.SECONDDATE, 0); }
		
		/**
		 * Tinyint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TINYINT() { return getToken(HanaParser.TINYINT, 0); }
		
		/**
		 * Smallint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SMALLINT() { return getToken(HanaParser.SMALLINT, 0); }
		
		/**
		 * Integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTEGER() { return getToken(HanaParser.INTEGER, 0); }
		
		/**
		 * Int.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INT() { return getToken(HanaParser.INT, 0); }
		
		/**
		 * Bigint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BIGINT() { return getToken(HanaParser.BIGINT, 0); }
		
		/**
		 * Decimal.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECIMAL() { return getToken(HanaParser.DECIMAL, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the list
		 */
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		
		/**
		 * Numeric.
		 *
		 * @param i the i
		 * @return the numeric context
		 */
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * Smalldecimal.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SMALLDECIMAL() { return getToken(HanaParser.SMALLDECIMAL, 0); }
		
		/**
		 * Real.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REAL() { return getToken(HanaParser.REAL, 0); }
		
		/**
		 * Double.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DOUBLE() { return getToken(HanaParser.DOUBLE, 0); }
		
		/**
		 * Varchar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARCHAR() { return getToken(HanaParser.VARCHAR, 0); }
		
		/**
		 * Nvarchar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NVARCHAR() { return getToken(HanaParser.NVARCHAR, 0); }
		
		/**
		 * Alphanum.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALPHANUM() { return getToken(HanaParser.ALPHANUM, 0); }
		
		/**
		 * Varbinary.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARBINARY() { return getToken(HanaParser.VARBINARY, 0); }
		
		/**
		 * Blob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BLOB() { return getToken(HanaParser.BLOB, 0); }
		
		/**
		 * Clob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CLOB() { return getToken(HanaParser.CLOB, 0); }
		
		/**
		 * Nclob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NCLOB() { return getToken(HanaParser.NCLOB, 0); }
		
		/**
		 * String.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STRING() { return getToken(HanaParser.STRING, 0); }
		
		/**
		 * Char.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR() { return getToken(HanaParser.CHAR, 0); }
		
		/**
		 * Instantiates a new sql type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sql_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sql_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sql type.
	 *
	 * @return the sql type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sql_typeContext sql_type() throws RecognitionException {
		Sql_typeContext _localctx = new Sql_typeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_sql_type);
		int _la;
		try {
			setState(1083);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1021);
				match(DATE);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(1022);
				match(TIME);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1023);
				match(TIMESTAMP);
				}
				break;
			case SECONDDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1024);
				match(SECONDDATE);
				}
				break;
			case TINYINT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1025);
				match(TINYINT);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1026);
				match(SMALLINT);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 7);
				{
				setState(1027);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 8);
				{
				setState(1028);
				match(INT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1029);
				match(BIGINT);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 10);
				{
				setState(1030);
				match(DECIMAL);
				setState(1039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1031);
					match(LEFT_PAREN);
					setState(1032);
					numeric();
					setState(1035);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1033);
						match(COMMA);
						setState(1034);
						numeric();
						}
					}

					setState(1037);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case SMALLDECIMAL:
				enterOuterAlt(_localctx, 11);
				{
				setState(1041);
				match(SMALLDECIMAL);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 12);
				{
				setState(1042);
				match(REAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1043);
				match(DOUBLE);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 14);
				{
				setState(1044);
				match(VARCHAR);
				setState(1049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1045);
					match(LEFT_PAREN);
					setState(1046);
					numeric();
					setState(1047);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case NVARCHAR:
				enterOuterAlt(_localctx, 15);
				{
				setState(1051);
				match(NVARCHAR);
				setState(1056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1052);
					match(LEFT_PAREN);
					setState(1053);
					numeric();
					setState(1054);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case ALPHANUM:
				enterOuterAlt(_localctx, 16);
				{
				setState(1058);
				match(ALPHANUM);
				setState(1063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1059);
					match(LEFT_PAREN);
					setState(1060);
					numeric();
					setState(1061);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case VARBINARY:
				enterOuterAlt(_localctx, 17);
				{
				setState(1065);
				match(VARBINARY);
				setState(1070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1066);
					match(LEFT_PAREN);
					setState(1067);
					numeric();
					setState(1068);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 18);
				{
				setState(1072);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 19);
				{
				setState(1073);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 20);
				{
				setState(1074);
				match(NCLOB);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 21);
				{
				setState(1075);
				match(STRING);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(1076);
				match(CHAR);
				setState(1081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1077);
					match(LEFT_PAREN);
					setState(1078);
					numeric();
					setState(1079);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_typeContext.
	 */
	public static class Table_typeContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Schema name.
		 *
		 * @return the schema name context
		 */
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Instantiates a new table type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table type.
	 *
	 * @return the table type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_typeContext table_type() throws RecognitionException {
		Table_typeContext _localctx = new Table_typeContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_table_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1085);
				schema_name();
				setState(1086);
				match(PERIOD);
				}
				break;
			}
			setState(1090);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_type_definitionContext.
	 */
	public static class Table_type_definitionContext extends ParserRuleContext {
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * Column list definition.
		 *
		 * @return the column list definition context
		 */
		public Column_list_definitionContext column_list_definition() {
			return getRuleContext(Column_list_definitionContext.class,0);
		}
		
		/**
		 * Instantiates a new table type definition context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_type_definition(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_type_definition(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table type definition.
	 *
	 * @return the table type definition context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_table_type_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1092);
			match(TABLE);
			setState(1093);
			column_list_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Column_list_definitionContext.
	 */
	public static class Column_list_definitionContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Column elem.
		 *
		 * @return the list
		 */
		public List<Column_elemContext> column_elem() {
			return getRuleContexts(Column_elemContext.class);
		}
		
		/**
		 * Column elem.
		 *
		 * @param i the i
		 * @return the column elem context
		 */
		public Column_elemContext column_elem(int i) {
			return getRuleContext(Column_elemContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new column list definition context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Column_list_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_column_list_definition; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_list_definition(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_list_definition(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_list_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Column list definition.
	 *
	 * @return the column list definition context
	 * @throws RecognitionException the recognition exception
	 */
	public final Column_list_definitionContext column_list_definition() throws RecognitionException {
		Column_list_definitionContext _localctx = new Column_list_definitionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_column_list_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1095);
			match(LEFT_PAREN);
			setState(1096);
			column_elem();
			setState(1101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1097);
				match(COMMA);
				setState(1098);
				column_elem();
				}
				}
				setState(1103);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1104);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Column_elemContext.
	 */
	public static class Column_elemContext extends ParserRuleContext {
		
		/**
		 * Column name.
		 *
		 * @return the column name context
		 */
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		
		/**
		 * Data type.
		 *
		 * @return the data type context
		 */
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		
		/**
		 * Instantiates a new column elem context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_column_elem; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_elem(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_elem(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Column elem.
	 *
	 * @return the column elem context
	 * @throws RecognitionException the recognition exception
	 */
	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1106);
			column_name();
			setState(1107);
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Column_nameContext.
	 */
	public static class Column_nameContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new column name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_column_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Column name.
	 *
	 * @return the column name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1109);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Data_typeContext.
	 */
	public static class Data_typeContext extends ParserRuleContext {
		
		/**
		 * Sql type.
		 *
		 * @return the sql type context
		 */
		public Sql_typeContext sql_type() {
			return getRuleContext(Sql_typeContext.class,0);
		}
		
		/**
		 * Shorttext.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SHORTTEXT() { return getToken(HanaParser.SHORTTEXT, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the numeric context
		 */
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Text.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TEXT() { return getToken(HanaParser.TEXT, 0); }
		
		/**
		 * Instantiates a new data type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_data_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterData_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitData_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Data type.
	 *
	 * @return the data type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_data_type);
		int _la;
		try {
			setState(1120);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALPHANUM:
			case BIGINT:
			case BLOB:
			case CHAR:
			case CLOB:
			case DATE:
			case DECIMAL:
			case DOUBLE:
			case INT:
			case INTEGER:
			case NCLOB:
			case NVARCHAR:
			case REAL:
			case SECONDDATE:
			case SMALLINT:
			case SMALLDECIMAL:
			case STRING:
			case TIME:
			case TIMESTAMP:
			case TINYINT:
			case VARCHAR:
			case VARBINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1111);
				sql_type();
				}
				break;
			case SHORTTEXT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1112);
				match(SHORTTEXT);
				setState(1117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1113);
					match(LEFT_PAREN);
					setState(1114);
					numeric();
					setState(1115);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case TEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1119);
				match(TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class ParameterContext.
	 */
	public static class ParameterContext extends ParserRuleContext {
		
		/**
		 * Param name.
		 *
		 * @return the param name context
		 */
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		
		/**
		 * Param type.
		 *
		 * @return the param type context
		 */
		public Param_typeContext param_type() {
			return getRuleContext(Param_typeContext.class,0);
		}
		
		/**
		 * Default value part.
		 *
		 * @return the default value part context
		 */
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Out.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		
		/**
		 * Inout.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INOUT() { return getToken(HanaParser.INOUT, 0); }
		
		/**
		 * Instantiates a new parameter context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_parameter; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParameter(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParameter(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Parameter.
	 *
	 * @return the parameter context
	 * @throws RecognitionException the recognition exception
	 */
	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				setState(1122);
				_la = _input.LA(1);
				if ( !(_la==IN || _la==INOUT || _la==OUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1125);
			param_name();
			setState(1126);
			param_type();
			setState(1128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(1127);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Parameter_clauseContext.
	 */
	public static class Parameter_clauseContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Parameter.
		 *
		 * @return the list
		 */
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		
		/**
		 * Parameter.
		 *
		 * @param i the i
		 * @return the parameter context
		 */
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new parameter clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Parameter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_parameter_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParameter_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParameter_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParameter_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Parameter clause.
	 *
	 * @return the parameter clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Parameter_clauseContext parameter_clause() throws RecognitionException {
		Parameter_clauseContext _localctx = new Parameter_clauseContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_parameter_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1130);
			match(LEFT_PAREN);
			setState(1132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1131);
				parameter();
				}
			}

			setState(1138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1134);
				match(COMMA);
				setState(1135);
				parameter();
				}
				}
				setState(1140);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1141);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class LangContext.
	 */
	public static class LangContext extends ParserRuleContext {
		
		/**
		 * Sqlscript.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQLSCRIPT() { return getToken(HanaParser.SQLSCRIPT, 0); }
		
		/**
		 * R.
		 *
		 * @return the terminal node
		 */
		public TerminalNode R() { return getToken(HanaParser.R, 0); }
		
		/**
		 * Instantiates a new lang context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public LangContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_lang; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLang(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLang(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLang(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Lang.
	 *
	 * @return the lang context
	 * @throws RecognitionException the recognition exception
	 */
	public final LangContext lang() throws RecognitionException {
		LangContext _localctx = new LangContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_lang);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1143);
			_la = _input.LA(1);
			if ( !(_la==SQLSCRIPT || _la==R) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Security_modeContext.
	 */
	public static class Security_modeContext extends ParserRuleContext {
		
		/**
		 * Definer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFINER() { return getToken(HanaParser.DEFINER, 0); }
		
		/**
		 * Invoker.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INVOKER() { return getToken(HanaParser.INVOKER, 0); }
		
		/**
		 * Instantiates a new security mode context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Security_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_security_mode; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSecurity_mode(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSecurity_mode(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSecurity_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Security mode.
	 *
	 * @return the security mode context
	 * @throws RecognitionException the recognition exception
	 */
	public final Security_modeContext security_mode() throws RecognitionException {
		Security_modeContext _localctx = new Security_modeContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_security_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1145);
			_la = _input.LA(1);
			if ( !(_la==DEFINER || _la==INVOKER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Default_schema_nameContext.
	 */
	public static class Default_schema_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new default schema name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Default_schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_default_schema_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDefault_schema_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDefault_schema_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDefault_schema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Default schema name.
	 *
	 * @return the default schema name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Default_schema_nameContext default_schema_name() throws RecognitionException {
		Default_schema_nameContext _localctx = new Default_schema_nameContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_default_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1147);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class View_nameContext.
	 */
	public static class View_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new view name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public View_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_view_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterView_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitView_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitView_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * View name.
	 *
	 * @return the view name context
	 * @throws RecognitionException the recognition exception
	 */
	public final View_nameContext view_name() throws RecognitionException {
		View_nameContext _localctx = new View_nameContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_view_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1149);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_decl_listContext.
	 */
	public static class Proc_decl_listContext extends ParserRuleContext {
		
		/**
		 * Proc decl.
		 *
		 * @return the list
		 */
		public List<Proc_declContext> proc_decl() {
			return getRuleContexts(Proc_declContext.class);
		}
		
		/**
		 * Proc decl.
		 *
		 * @param i the i
		 * @return the proc decl context
		 */
		public Proc_declContext proc_decl(int i) {
			return getRuleContext(Proc_declContext.class,i);
		}
		
		/**
		 * Instantiates a new proc decl list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_decl_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_decl_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_decl_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_decl_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_decl_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc decl list.
	 *
	 * @return the proc decl list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_decl_listContext proc_decl_list() throws RecognitionException {
		Proc_decl_listContext _localctx = new Proc_decl_listContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_proc_decl_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1151);
			proc_decl();
			setState(1155);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1152);
					proc_decl();
					}
					} 
				}
				setState(1157);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_declContext.
	 */
	public static class Proc_declContext extends ParserRuleContext {
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Proc decl op.
		 *
		 * @return the proc decl op context
		 */
		public Proc_decl_opContext proc_decl_op() {
			return getRuleContext(Proc_decl_opContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new proc decl context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_decl; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_decl(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_decl(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc decl.
	 *
	 * @return the proc decl context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_declContext proc_decl() throws RecognitionException {
		Proc_declContext _localctx = new Proc_declContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_proc_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1158);
			match(DECLARE);
			setState(1159);
			proc_decl_op();
			setState(1160);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_decl_opContext.
	 */
	public static class Proc_decl_opContext extends ParserRuleContext {
		
		/**
		 * Proc variable.
		 *
		 * @return the proc variable context
		 */
		public Proc_variableContext proc_variable() {
			return getRuleContext(Proc_variableContext.class,0);
		}
		
		/**
		 * Proc table variable.
		 *
		 * @return the proc table variable context
		 */
		public Proc_table_variableContext proc_table_variable() {
			return getRuleContext(Proc_table_variableContext.class,0);
		}
		
		/**
		 * Proc cursor.
		 *
		 * @return the proc cursor context
		 */
		public Proc_cursorContext proc_cursor() {
			return getRuleContext(Proc_cursorContext.class,0);
		}
		
		/**
		 * Proc condition.
		 *
		 * @return the proc condition context
		 */
		public Proc_conditionContext proc_condition() {
			return getRuleContext(Proc_conditionContext.class,0);
		}
		
		/**
		 * Instantiates a new proc decl op context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_decl_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_decl_op; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_decl_op(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_decl_op(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_decl_op(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc decl op.
	 *
	 * @return the proc decl op context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_decl_opContext proc_decl_op() throws RecognitionException {
		Proc_decl_opContext _localctx = new Proc_decl_opContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_proc_decl_op);
		try {
			setState(1166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1162);
				proc_variable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1163);
				proc_table_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1164);
				proc_cursor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1165);
				proc_condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_variableContext.
	 */
	public static class Proc_variableContext extends ParserRuleContext {
		
		/**
		 * Variable name list.
		 *
		 * @return the variable name list context
		 */
		public Variable_name_listContext variable_name_list() {
			return getRuleContext(Variable_name_listContext.class,0);
		}
		
		/**
		 * Sql type.
		 *
		 * @return the sql type context
		 */
		public Sql_typeContext sql_type() {
			return getRuleContext(Sql_typeContext.class,0);
		}
		
		/**
		 * Array datatype.
		 *
		 * @return the array datatype context
		 */
		public Array_datatypeContext array_datatype() {
			return getRuleContext(Array_datatypeContext.class,0);
		}
		
		/**
		 * Constant.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTANT() { return getToken(HanaParser.CONSTANT, 0); }
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Proc default.
		 *
		 * @return the proc default context
		 */
		public Proc_defaultContext proc_default() {
			return getRuleContext(Proc_defaultContext.class,0);
		}
		
		/**
		 * Instantiates a new proc variable context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_variable; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_variable(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_variable(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc variable.
	 *
	 * @return the proc variable context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_variableContext proc_variable() throws RecognitionException {
		Proc_variableContext _localctx = new Proc_variableContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_proc_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1168);
			variable_name_list();
			setState(1170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTANT) {
				{
				setState(1169);
				match(CONSTANT);
				}
			}

			setState(1174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				setState(1172);
				sql_type();
				}
				break;
			case 2:
				{
				setState(1173);
				array_datatype();
				}
				break;
			}
			setState(1178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1176);
				match(NOT);
				setState(1177);
				match(NULL);
				}
			}

			setState(1181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP || _la==EQUALS_OP) {
				{
				setState(1180);
				proc_default();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_table_variableContext.
	 */
	public static class Proc_table_variableContext extends ParserRuleContext {
		
		/**
		 * Variable name list.
		 *
		 * @return the variable name list context
		 */
		public Variable_name_listContext variable_name_list() {
			return getRuleContext(Variable_name_listContext.class,0);
		}
		
		/**
		 * Table type definition.
		 *
		 * @return the table type definition context
		 */
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		
		/**
		 * Table type.
		 *
		 * @return the table type context
		 */
		public Table_typeContext table_type() {
			return getRuleContext(Table_typeContext.class,0);
		}
		
		/**
		 * Instantiates a new proc table variable context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_table_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_table_variable; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_table_variable(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_table_variable(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_table_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc table variable.
	 *
	 * @return the proc table variable context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_table_variableContext proc_table_variable() throws RecognitionException {
		Proc_table_variableContext _localctx = new Proc_table_variableContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_proc_table_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1183);
			variable_name_list();
			setState(1186);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(1184);
				table_type_definition();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(1185);
				table_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Variable_name_listContext.
	 */
	public static class Variable_name_listContext extends ParserRuleContext {
		
		/**
		 * Variable name.
		 *
		 * @return the list
		 */
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		
		/**
		 * Variable name.
		 *
		 * @param i the i
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * Instantiates a new variable name list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Variable_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_variable_name_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVariable_name_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVariable_name_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVariable_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Variable name list.
	 *
	 * @return the variable name list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Variable_name_listContext variable_name_list() throws RecognitionException {
		Variable_name_listContext _localctx = new Variable_name_listContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_variable_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1188);
			variable_name();
			setState(1191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1189);
				match(COMMA);
				setState(1190);
				variable_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Array_datatypeContext.
	 */
	public static class Array_datatypeContext extends ParserRuleContext {
		
		/**
		 * Sql type.
		 *
		 * @return the sql type context
		 */
		public Sql_typeContext sql_type() {
			return getRuleContext(Sql_typeContext.class,0);
		}
		
		/**
		 * Array.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ARRAY() { return getToken(HanaParser.ARRAY, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Array constructor.
		 *
		 * @return the array constructor context
		 */
		public Array_constructorContext array_constructor() {
			return getRuleContext(Array_constructorContext.class,0);
		}
		
		/**
		 * Instantiates a new array datatype context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Array_datatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_array_datatype; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterArray_datatype(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitArray_datatype(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitArray_datatype(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Array datatype.
	 *
	 * @return the array datatype context
	 * @throws RecognitionException the recognition exception
	 */
	public final Array_datatypeContext array_datatype() throws RecognitionException {
		Array_datatypeContext _localctx = new Array_datatypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_array_datatype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1193);
			sql_type();
			setState(1194);
			match(ARRAY);
			setState(1197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				setState(1195);
				match(EQUALS_OP);
				setState(1196);
				array_constructor();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Array_constructorContext.
	 */
	public static class Array_constructorContext extends ParserRuleContext {
		
		/**
		 * Array.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ARRAY() { return getToken(HanaParser.ARRAY, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new array constructor context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Array_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_array_constructor; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterArray_constructor(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitArray_constructor(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitArray_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Array constructor.
	 *
	 * @return the array constructor context
	 * @throws RecognitionException the recognition exception
	 */
	public final Array_constructorContext array_constructor() throws RecognitionException {
		Array_constructorContext _localctx = new Array_constructorContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_array_constructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1199);
			match(ARRAY);
			setState(1200);
			match(LEFT_PAREN);
			setState(1201);
			expression();
			setState(1206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1202);
				match(COMMA);
				setState(1203);
				expression();
				}
				}
				setState(1208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1209);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_defaultContext.
	 */
	public static class Proc_defaultContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Assign op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASSIGN_OP() { return getToken(HanaParser.ASSIGN_OP, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Instantiates a new proc default context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_default; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_default(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_default(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_default(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc default.
	 *
	 * @return the proc default context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_defaultContext proc_default() throws RecognitionException {
		Proc_defaultContext _localctx = new Proc_defaultContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_proc_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1211);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP || _la==EQUALS_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1212);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_cursorContext.
	 */
	public static class Proc_cursorContext extends ParserRuleContext {
		
		/**
		 * Cursor.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		
		/**
		 * Cursor name.
		 *
		 * @return the cursor name context
		 */
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Proc cursor param list.
		 *
		 * @return the proc cursor param list context
		 */
		public Proc_cursor_param_listContext proc_cursor_param_list() {
			return getRuleContext(Proc_cursor_param_listContext.class,0);
		}
		
		/**
		 * Instantiates a new proc cursor context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_cursor; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_cursor(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_cursor(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc cursor.
	 *
	 * @return the proc cursor context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_cursorContext proc_cursor() throws RecognitionException {
		Proc_cursorContext _localctx = new Proc_cursorContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_proc_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1214);
			match(CURSOR);
			setState(1215);
			cursor_name();
			setState(1217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1216);
				proc_cursor_param_list();
				}
			}

			setState(1219);
			match(FOR);
			setState(1220);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_cursor_param_listContext.
	 */
	public static class Proc_cursor_param_listContext extends ParserRuleContext {
		
		/**
		 * Proc cursor param.
		 *
		 * @return the list
		 */
		public List<Proc_cursor_paramContext> proc_cursor_param() {
			return getRuleContexts(Proc_cursor_paramContext.class);
		}
		
		/**
		 * Proc cursor param.
		 *
		 * @param i the i
		 * @return the proc cursor param context
		 */
		public Proc_cursor_paramContext proc_cursor_param(int i) {
			return getRuleContext(Proc_cursor_paramContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new proc cursor param list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_cursor_param_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_cursor_param_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_cursor_param_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_cursor_param_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_cursor_param_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc cursor param list.
	 *
	 * @return the proc cursor param list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_cursor_param_listContext proc_cursor_param_list() throws RecognitionException {
		Proc_cursor_param_listContext _localctx = new Proc_cursor_param_listContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_proc_cursor_param_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1222);
			proc_cursor_param();
			setState(1227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1223);
				match(COMMA);
				setState(1224);
				proc_cursor_param();
				}
				}
				setState(1229);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Variable_nameContext.
	 */
	public static class Variable_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * General element part.
		 *
		 * @return the list
		 */
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		
		/**
		 * General element part.
		 *
		 * @param i the i
		 * @return the general element part context
		 */
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		
		/**
		 * Left bracket.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_BRACKET() { return getToken(HanaParser.LEFT_BRACKET, 0); }
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Right bracket.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_BRACKET() { return getToken(HanaParser.RIGHT_BRACKET, 0); }
		
		/**
		 * Instantiates a new variable name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_variable_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVariable_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVariable_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Variable name.
	 *
	 * @return the variable name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_variable_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1230);
			id_expression();
			setState(1235);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1231);
					match(PERIOD);
					setState(1232);
					general_element_part();
					}
					} 
				}
				setState(1237);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			setState(1242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				setState(1238);
				match(LEFT_BRACKET);
				setState(1239);
				bind_variable();
				setState(1240);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cursor_nameContext.
	 */
	public static class Cursor_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new cursor name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cursor name.
	 *
	 * @return the cursor name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1244);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_cursor_paramContext.
	 */
	public static class Proc_cursor_paramContext extends ParserRuleContext {
		
		/**
		 * Param name.
		 *
		 * @return the param name context
		 */
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		
		/**
		 * Data type.
		 *
		 * @return the data type context
		 */
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		
		/**
		 * Instantiates a new proc cursor param context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_cursor_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_cursor_param; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_cursor_param(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_cursor_param(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_cursor_param(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc cursor param.
	 *
	 * @return the proc cursor param context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_cursor_paramContext proc_cursor_param() throws RecognitionException {
		Proc_cursor_paramContext _localctx = new Proc_cursor_paramContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_proc_cursor_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1246);
			param_name();
			setState(1247);
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_conditionContext.
	 */
	public static class Proc_conditionContext extends ParserRuleContext {
		
		/**
		 * Variable name.
		 *
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		
		/**
		 * Condition.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONDITION() { return getToken(HanaParser.CONDITION, 0); }
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Sql error code.
		 *
		 * @return the sql error code context
		 */
		public Sql_error_codeContext sql_error_code() {
			return getRuleContext(Sql_error_codeContext.class,0);
		}
		
		/**
		 * Instantiates a new proc condition context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_condition; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_condition(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_condition(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc condition.
	 *
	 * @return the proc condition context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_conditionContext proc_condition() throws RecognitionException {
		Proc_conditionContext _localctx = new Proc_conditionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_proc_condition);
		try {
			setState(1257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1249);
				variable_name();
				setState(1250);
				match(CONDITION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1252);
				variable_name();
				setState(1253);
				match(CONDITION);
				setState(1254);
				match(FOR);
				setState(1255);
				sql_error_code();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sql_error_codeContext.
	 */
	public static class Sql_error_codeContext extends ParserRuleContext {
		
		/**
		 * Numeric.
		 *
		 * @return the numeric context
		 */
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		
		/**
		 * Sql error code.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQL_ERROR_CODE() { return getToken(HanaParser.SQL_ERROR_CODE, 0); }
		
		/**
		 * Instantiates a new sql error code context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sql_error_codeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sql_error_code; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_error_code(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_error_code(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_error_code(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sql error code.
	 *
	 * @return the sql error code context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sql_error_codeContext sql_error_code() throws RecognitionException {
		Sql_error_codeContext _localctx = new Sql_error_codeContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_sql_error_code);
		try {
			setState(1262);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1259);
				numeric();
				}
				break;
			case SQL_ERROR_CODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1260);
				match(SQL_ERROR_CODE);
				setState(1261);
				numeric();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_handler_listContext.
	 */
	public static class Proc_handler_listContext extends ParserRuleContext {
		
		/**
		 * Proc handler.
		 *
		 * @return the list
		 */
		public List<Proc_handlerContext> proc_handler() {
			return getRuleContexts(Proc_handlerContext.class);
		}
		
		/**
		 * Proc handler.
		 *
		 * @param i the i
		 * @return the proc handler context
		 */
		public Proc_handlerContext proc_handler(int i) {
			return getRuleContext(Proc_handlerContext.class,i);
		}
		
		/**
		 * Instantiates a new proc handler list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_handler_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_handler_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_handler_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_handler_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_handler_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc handler list.
	 *
	 * @return the proc handler list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_handler_listContext proc_handler_list() throws RecognitionException {
		Proc_handler_listContext _localctx = new Proc_handler_listContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_proc_handler_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1264);
				proc_handler();
				}
				}
				setState(1267); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DECLARE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_handlerContext.
	 */
	public static class Proc_handlerContext extends ParserRuleContext {
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Exit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		
		/**
		 * Handler.
		 *
		 * @return the terminal node
		 */
		public TerminalNode HANDLER() { return getToken(HanaParser.HANDLER, 0); }
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Proc condition value list.
		 *
		 * @return the proc condition value list context
		 */
		public Proc_condition_value_listContext proc_condition_value_list() {
			return getRuleContext(Proc_condition_value_listContext.class,0);
		}
		
		/**
		 * Proc stmt.
		 *
		 * @return the proc stmt context
		 */
		public Proc_stmtContext proc_stmt() {
			return getRuleContext(Proc_stmtContext.class,0);
		}
		
		/**
		 * Instantiates a new proc handler context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_handler; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_handler(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_handler(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc handler.
	 *
	 * @return the proc handler context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_handlerContext proc_handler() throws RecognitionException {
		Proc_handlerContext _localctx = new Proc_handlerContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_proc_handler);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1269);
			match(DECLARE);
			setState(1270);
			match(EXIT);
			setState(1271);
			match(HANDLER);
			setState(1272);
			match(FOR);
			setState(1273);
			proc_condition_value_list();
			setState(1274);
			proc_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_condition_value_listContext.
	 */
	public static class Proc_condition_value_listContext extends ParserRuleContext {
		
		/**
		 * Proc condition value.
		 *
		 * @return the list
		 */
		public List<Proc_condition_valueContext> proc_condition_value() {
			return getRuleContexts(Proc_condition_valueContext.class);
		}
		
		/**
		 * Proc condition value.
		 *
		 * @param i the i
		 * @return the proc condition value context
		 */
		public Proc_condition_valueContext proc_condition_value(int i) {
			return getRuleContext(Proc_condition_valueContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new proc condition value list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_condition_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_condition_value_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_condition_value_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_condition_value_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_condition_value_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc condition value list.
	 *
	 * @return the proc condition value list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_condition_value_listContext proc_condition_value_list() throws RecognitionException {
		Proc_condition_value_listContext _localctx = new Proc_condition_value_listContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_proc_condition_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1276);
			proc_condition_value();
			setState(1281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1277);
				match(COMMA);
				setState(1278);
				proc_condition_value();
				}
				}
				setState(1283);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_condition_valueContext.
	 */
	public static class Proc_condition_valueContext extends ParserRuleContext {
		
		/**
		 * Sqlexception.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQLEXCEPTION() { return getToken(HanaParser.SQLEXCEPTION, 0); }
		
		/**
		 * Sqlwarning.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQLWARNING() { return getToken(HanaParser.SQLWARNING, 0); }
		
		/**
		 * Sql error code.
		 *
		 * @return the sql error code context
		 */
		public Sql_error_codeContext sql_error_code() {
			return getRuleContext(Sql_error_codeContext.class,0);
		}
		
		/**
		 * Variable name.
		 *
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new proc condition value context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_condition_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_condition_value; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_condition_value(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_condition_value(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_condition_value(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc condition value.
	 *
	 * @return the proc condition value context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_condition_valueContext proc_condition_value() throws RecognitionException {
		Proc_condition_valueContext _localctx = new Proc_condition_valueContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_proc_condition_value);
		try {
			setState(1288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLEXCEPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1284);
				match(SQLEXCEPTION);
				}
				break;
			case SQLWARNING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1285);
				match(SQLWARNING);
				}
				break;
			case SQL_ERROR_CODE:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1286);
				sql_error_code();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 4);
				{
				setState(1287);
				variable_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_stmt_listContext.
	 */
	public static class Proc_stmt_listContext extends ParserRuleContext {
		
		/**
		 * Proc stmt.
		 *
		 * @return the list
		 */
		public List<Proc_stmtContext> proc_stmt() {
			return getRuleContexts(Proc_stmtContext.class);
		}
		
		/**
		 * Proc stmt.
		 *
		 * @param i the i
		 * @return the proc stmt context
		 */
		public Proc_stmtContext proc_stmt(int i) {
			return getRuleContext(Proc_stmtContext.class,i);
		}
		
		/**
		 * Instantiates a new proc stmt list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_stmt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_stmt_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_stmt_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_stmt_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_stmt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc stmt list.
	 *
	 * @return the proc stmt list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_stmt_listContext proc_stmt_list() throws RecognitionException {
		Proc_stmt_listContext _localctx = new Proc_stmt_listContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_proc_stmt_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1291); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1290);
					proc_stmt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1293); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Func_stmt_listContext.
	 */
	public static class Func_stmt_listContext extends ParserRuleContext {
		
		/**
		 * Proc stmt.
		 *
		 * @return the list
		 */
		public List<Proc_stmtContext> proc_stmt() {
			return getRuleContexts(Proc_stmtContext.class);
		}
		
		/**
		 * Proc stmt.
		 *
		 * @param i the i
		 * @return the proc stmt context
		 */
		public Proc_stmtContext proc_stmt(int i) {
			return getRuleContext(Proc_stmtContext.class,i);
		}
		
		/**
		 * Instantiates a new func stmt list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Func_stmt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_func_stmt_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunc_stmt_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunc_stmt_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunc_stmt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Func stmt list.
	 *
	 * @return the func stmt list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Func_stmt_listContext func_stmt_list() throws RecognitionException {
		Func_stmt_listContext _localctx = new Func_stmt_listContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_func_stmt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1296); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1295);
				proc_stmt();
				}
				}
				setState(1298); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_stmtContext.
	 */
	public static class Proc_stmtContext extends ParserRuleContext {
		
		/**
		 * Proc block.
		 *
		 * @return the proc block context
		 */
		public Proc_blockContext proc_block() {
			return getRuleContext(Proc_blockContext.class,0);
		}
		
		/**
		 * Proc assign.
		 *
		 * @return the proc assign context
		 */
		public Proc_assignContext proc_assign() {
			return getRuleContext(Proc_assignContext.class,0);
		}
		
		/**
		 * Proc single assign.
		 *
		 * @return the proc single assign context
		 */
		public Proc_single_assignContext proc_single_assign() {
			return getRuleContext(Proc_single_assignContext.class,0);
		}
		
		/**
		 * Proc sql.
		 *
		 * @return the proc sql context
		 */
		public Proc_sqlContext proc_sql() {
			return getRuleContext(Proc_sqlContext.class,0);
		}
		
		/**
		 * Proc call.
		 *
		 * @return the proc call context
		 */
		public Proc_callContext proc_call() {
			return getRuleContext(Proc_callContext.class,0);
		}
		
		/**
		 * Proc if.
		 *
		 * @return the proc if context
		 */
		public Proc_ifContext proc_if() {
			return getRuleContext(Proc_ifContext.class,0);
		}
		
		/**
		 * Proc signal.
		 *
		 * @return the proc signal context
		 */
		public Proc_signalContext proc_signal() {
			return getRuleContext(Proc_signalContext.class,0);
		}
		
		/**
		 * Proc resignal.
		 *
		 * @return the proc resignal context
		 */
		public Proc_resignalContext proc_resignal() {
			return getRuleContext(Proc_resignalContext.class,0);
		}
		
		/**
		 * Proc while.
		 *
		 * @return the proc while context
		 */
		public Proc_whileContext proc_while() {
			return getRuleContext(Proc_whileContext.class,0);
		}
		
		/**
		 * Proc for.
		 *
		 * @return the proc for context
		 */
		public Proc_forContext proc_for() {
			return getRuleContext(Proc_forContext.class,0);
		}
		
		/**
		 * Proc rollback.
		 *
		 * @return the proc rollback context
		 */
		public Proc_rollbackContext proc_rollback() {
			return getRuleContext(Proc_rollbackContext.class,0);
		}
		
		/**
		 * Proc commit.
		 *
		 * @return the proc commit context
		 */
		public Proc_commitContext proc_commit() {
			return getRuleContext(Proc_commitContext.class,0);
		}
		
		/**
		 * Instantiates a new proc stmt context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_stmt; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_stmt(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_stmt(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc stmt.
	 *
	 * @return the proc stmt context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_stmtContext proc_stmt() throws RecognitionException {
		Proc_stmtContext _localctx = new Proc_stmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_proc_stmt);
		try {
			setState(1312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1300);
				proc_block();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1301);
				proc_assign();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1302);
				proc_single_assign();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1303);
				proc_sql();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1304);
				proc_call();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1305);
				proc_if();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1306);
				proc_signal();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1307);
				proc_resignal();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1308);
				proc_while();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1309);
				proc_for();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1310);
				proc_rollback();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1311);
				proc_commit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_sqlContext.
	 */
	public static class Proc_sqlContext extends ParserRuleContext {
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Insert stmt.
		 *
		 * @return the insert stmt context
		 */
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		
		/**
		 * Update stmt.
		 *
		 * @return the update stmt context
		 */
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		
		/**
		 * Delete stmt.
		 *
		 * @return the delete stmt context
		 */
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		
		/**
		 * Creates the stmt.
		 *
		 * @return the creates the stmt context
		 */
		public Create_stmtContext create_stmt() {
			return getRuleContext(Create_stmtContext.class,0);
		}
		
		/**
		 * Truncate stmt.
		 *
		 * @return the truncate stmt context
		 */
		public Truncate_stmtContext truncate_stmt() {
			return getRuleContext(Truncate_stmtContext.class,0);
		}
		
		/**
		 * Instantiates a new proc sql context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_sql; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_sql(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_sql(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc sql.
	 *
	 * @return the proc sql context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_sqlContext proc_sql() throws RecognitionException {
		Proc_sqlContext _localctx = new Proc_sqlContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_proc_sql);
		try {
			setState(1332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1314);
				subquery();
				setState(1315);
				match(SEMICOLON);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1317);
				insert_stmt();
				setState(1318);
				match(SEMICOLON);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1320);
				update_stmt();
				setState(1321);
				match(SEMICOLON);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1323);
				delete_stmt();
				setState(1324);
				match(SEMICOLON);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1326);
				create_stmt();
				setState(1327);
				match(SEMICOLON);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1329);
				truncate_stmt();
				setState(1330);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Update_stmtContext.
	 */
	public static class Update_stmtContext extends ParserRuleContext {
		
		/**
		 * Update.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		
		/**
		 * General table ref.
		 *
		 * @return the general table ref context
		 */
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		
		/**
		 * Update set clause.
		 *
		 * @return the update set clause context
		 */
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Table alias.
		 *
		 * @return the table alias context
		 */
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		
		/**
		 * From clause.
		 *
		 * @return the from clause context
		 */
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		
		/**
		 * Where clause.
		 *
		 * @return the where clause context
		 */
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		
		/**
		 * Static returning clause.
		 *
		 * @return the static returning clause context
		 */
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		
		/**
		 * Error logging clause.
		 *
		 * @return the error logging clause context
		 */
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new update stmt context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Update_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_update_stmt; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUpdate_stmt(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUpdate_stmt(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUpdate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Update stmt.
	 *
	 * @return the update stmt context
	 * @throws RecognitionException the recognition exception
	 */
	public final Update_stmtContext update_stmt() throws RecognitionException {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_update_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1334);
			match(UPDATE);
			setState(1335);
			general_table_ref();
			setState(1338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1336);
				match(AS);
				setState(1337);
				table_alias();
				}
			}

			setState(1340);
			update_set_clause();
			setState(1342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1341);
				from_clause();
				}
			}

			setState(1345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1344);
				where_clause();
				}
			}

			setState(1348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(1347);
				static_returning_clause();
				}
			}

			setState(1351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(1350);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Insert_stmtContext.
	 */
	public static class Insert_stmtContext extends ParserRuleContext {
		
		/**
		 * Insert.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INSERT() { return getToken(HanaParser.INSERT, 0); }
		
		/**
		 * Single table insert.
		 *
		 * @return the single table insert context
		 */
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		
		/**
		 * Multi table insert.
		 *
		 * @return the multi table insert context
		 */
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		
		/**
		 * Instantiates a new insert stmt context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Insert_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_insert_stmt; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInsert_stmt(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInsert_stmt(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInsert_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Insert stmt.
	 *
	 * @return the insert stmt context
	 * @throws RecognitionException the recognition exception
	 */
	public final Insert_stmtContext insert_stmt() throws RecognitionException {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_insert_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1353);
			match(INSERT);
			setState(1356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(1354);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(1355);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Delete_stmtContext.
	 */
	public static class Delete_stmtContext extends ParserRuleContext {
		
		/**
		 * Delete statement.
		 *
		 * @return the delete statement context
		 */
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		
		/**
		 * Instantiates a new delete stmt context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Delete_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_delete_stmt; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDelete_stmt(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDelete_stmt(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDelete_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Delete stmt.
	 *
	 * @return the delete stmt context
	 * @throws RecognitionException the recognition exception
	 */
	public final Delete_stmtContext delete_stmt() throws RecognitionException {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_delete_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1358);
			delete_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Truncate_stmtContext.
	 */
	public static class Truncate_stmtContext extends ParserRuleContext {
		
		/**
		 * Truncate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRUNCATE() { return getToken(HanaParser.TRUNCATE, 0); }
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * Table ref.
		 *
		 * @return the table ref context
		 */
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		
		/**
		 * Instantiates a new truncate stmt context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Truncate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_truncate_stmt; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTruncate_stmt(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTruncate_stmt(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTruncate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Truncate stmt.
	 *
	 * @return the truncate stmt context
	 * @throws RecognitionException the recognition exception
	 */
	public final Truncate_stmtContext truncate_stmt() throws RecognitionException {
		Truncate_stmtContext _localctx = new Truncate_stmtContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_truncate_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1360);
			match(TRUNCATE);
			setState(1361);
			match(TABLE);
			setState(1362);
			table_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Create_stmtContext.
	 */
	public static class Create_stmtContext extends ParserRuleContext {
		
		/**
		 * Creates the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CREATE() { return getToken(HanaParser.CREATE, 0); }
		
		/**
		 * Local.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOCAL() { return getToken(HanaParser.LOCAL, 0); }
		
		/**
		 * Temporary.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TEMPORARY() { return getToken(HanaParser.TEMPORARY, 0); }
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * Table name.
		 *
		 * @return the table name context
		 */
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		
		/**
		 * Column list definition.
		 *
		 * @return the column list definition context
		 */
		public Column_list_definitionContext column_list_definition() {
			return getRuleContext(Column_list_definitionContext.class,0);
		}
		
		/**
		 * Instantiates a new creates the stmt context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Create_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_create_stmt; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCreate_stmt(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCreate_stmt(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCreate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Creates the stmt.
	 *
	 * @return the creates the stmt context
	 * @throws RecognitionException the recognition exception
	 */
	public final Create_stmtContext create_stmt() throws RecognitionException {
		Create_stmtContext _localctx = new Create_stmtContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_create_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1364);
			match(CREATE);
			setState(1365);
			match(LOCAL);
			setState(1366);
			match(TEMPORARY);
			setState(1367);
			match(TABLE);
			setState(1368);
			table_name();
			setState(1369);
			column_list_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_whileContext.
	 */
	public static class Proc_whileContext extends ParserRuleContext {
		
		/**
		 * While.
		 *
		 * @return the list
		 */
		public List<TerminalNode> WHILE() { return getTokens(HanaParser.WHILE); }
		
		/**
		 * While.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode WHILE(int i) {
			return getToken(HanaParser.WHILE, i);
		}
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Do.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DO() { return getToken(HanaParser.DO, 0); }
		
		/**
		 * Proc stmt list.
		 *
		 * @return the proc stmt list context
		 */
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new proc while context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_whileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_while; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_while(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_while(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_while(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc while.
	 *
	 * @return the proc while context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_whileContext proc_while() throws RecognitionException {
		Proc_whileContext _localctx = new Proc_whileContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_proc_while);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1371);
			match(WHILE);
			setState(1372);
			condition();
			setState(1373);
			match(DO);
			setState(1374);
			proc_stmt_list();
			setState(1375);
			match(END);
			setState(1376);
			match(WHILE);
			setState(1377);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_forContext.
	 */
	public static class Proc_forContext extends ParserRuleContext {
		
		/**
		 * For.
		 *
		 * @return the list
		 */
		public List<TerminalNode> FOR() { return getTokens(HanaParser.FOR); }
		
		/**
		 * For.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode FOR(int i) {
			return getToken(HanaParser.FOR, i);
		}
		
		/**
		 * Param name.
		 *
		 * @return the list
		 */
		public List<Param_nameContext> param_name() {
			return getRuleContexts(Param_nameContext.class);
		}
		
		/**
		 * Param name.
		 *
		 * @param i the i
		 * @return the param name context
		 */
		public Param_nameContext param_name(int i) {
			return getRuleContext(Param_nameContext.class,i);
		}
		
		/**
		 * Do.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DO() { return getToken(HanaParser.DO, 0); }
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Proc stmt list.
		 *
		 * @return the proc stmt list context
		 */
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		
		/**
		 * Instantiates a new proc for context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_for; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_for(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_for(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_for(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc for.
	 *
	 * @return the proc for context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_forContext proc_for() throws RecognitionException {
		Proc_forContext _localctx = new Proc_forContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_proc_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1379);
			match(FOR);
			setState(1380);
			param_name();
			setState(1383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1381);
				match(AS);
				setState(1382);
				param_name();
				}
			}

			setState(1390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(1385);
				match(IN);
				setState(1386);
				expression();
				setState(1387);
				match(T__0);
				setState(1388);
				expression();
				}
			}

			setState(1392);
			match(DO);
			setState(1394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1393);
				proc_stmt_list();
				}
			}

			setState(1396);
			match(END);
			setState(1397);
			match(FOR);
			setState(1398);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_rollbackContext.
	 */
	public static class Proc_rollbackContext extends ParserRuleContext {
		
		/**
		 * Rollback.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new proc rollback context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_rollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_rollback; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_rollback(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_rollback(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_rollback(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc rollback.
	 *
	 * @return the proc rollback context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_rollbackContext proc_rollback() throws RecognitionException {
		Proc_rollbackContext _localctx = new Proc_rollbackContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_proc_rollback);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1400);
			match(ROLLBACK);
			setState(1401);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_commitContext.
	 */
	public static class Proc_commitContext extends ParserRuleContext {
		
		/**
		 * Commit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMIT() { return getToken(HanaParser.COMMIT, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new proc commit context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_commitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_commit; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_commit(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_commit(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_commit(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc commit.
	 *
	 * @return the proc commit context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_commitContext proc_commit() throws RecognitionException {
		Proc_commitContext _localctx = new Proc_commitContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_proc_commit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1403);
			match(COMMIT);
			setState(1404);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_breakContext.
	 */
	public static class Proc_breakContext extends ParserRuleContext {
		
		/**
		 * Break.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BREAK() { return getToken(HanaParser.BREAK, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new proc break context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_breakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_break; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_break(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_break(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_break(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc break.
	 *
	 * @return the proc break context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_breakContext proc_break() throws RecognitionException {
		Proc_breakContext _localctx = new Proc_breakContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_proc_break);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1406);
			match(BREAK);
			setState(1407);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_signalContext.
	 */
	public static class Proc_signalContext extends ParserRuleContext {
		
		/**
		 * Signal.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIGNAL() { return getToken(HanaParser.SIGNAL, 0); }
		
		/**
		 * Signal value.
		 *
		 * @return the signal value context
		 */
		public Signal_valueContext signal_value() {
			return getRuleContext(Signal_valueContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Sets the signal info.
		 *
		 * @return the sets the signal info context
		 */
		public Set_signal_infoContext set_signal_info() {
			return getRuleContext(Set_signal_infoContext.class,0);
		}
		
		/**
		 * Instantiates a new proc signal context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_signalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_signal; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_signal(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_signal(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_signal(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc signal.
	 *
	 * @return the proc signal context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_signalContext proc_signal() throws RecognitionException {
		Proc_signalContext _localctx = new Proc_signalContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_proc_signal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1409);
			match(SIGNAL);
			setState(1410);
			signal_value();
			setState(1412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1411);
				set_signal_info();
				}
			}

			setState(1414);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_resignalContext.
	 */
	public static class Proc_resignalContext extends ParserRuleContext {
		
		/**
		 * Resignal.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESIGNAL() { return getToken(HanaParser.RESIGNAL, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Signal value.
		 *
		 * @return the signal value context
		 */
		public Signal_valueContext signal_value() {
			return getRuleContext(Signal_valueContext.class,0);
		}
		
		/**
		 * Sets the signal info.
		 *
		 * @return the sets the signal info context
		 */
		public Set_signal_infoContext set_signal_info() {
			return getRuleContext(Set_signal_infoContext.class,0);
		}
		
		/**
		 * Instantiates a new proc resignal context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_resignalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_resignal; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_resignal(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_resignal(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_resignal(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc resignal.
	 *
	 * @return the proc resignal context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_resignalContext proc_resignal() throws RecognitionException {
		Proc_resignalContext _localctx = new Proc_resignalContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_proc_resignal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1416);
			match(RESIGNAL);
			setState(1418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1417);
				signal_value();
				}
				break;
			}
			setState(1421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1420);
				set_signal_info();
				}
			}

			setState(1423);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Signal_valueContext.
	 */
	public static class Signal_valueContext extends ParserRuleContext {
		
		/**
		 * Signal name.
		 *
		 * @return the signal name context
		 */
		public Signal_nameContext signal_name() {
			return getRuleContext(Signal_nameContext.class,0);
		}
		
		/**
		 * Sql error code.
		 *
		 * @return the sql error code context
		 */
		public Sql_error_codeContext sql_error_code() {
			return getRuleContext(Sql_error_codeContext.class,0);
		}
		
		/**
		 * Instantiates a new signal value context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Signal_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_signal_value; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSignal_value(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSignal_value(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSignal_value(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Signal value.
	 *
	 * @return the signal value context
	 * @throws RecognitionException the recognition exception
	 */
	public final Signal_valueContext signal_value() throws RecognitionException {
		Signal_valueContext _localctx = new Signal_valueContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_signal_value);
		try {
			setState(1427);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1425);
				signal_name();
				}
				break;
			case SQL_ERROR_CODE:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1426);
				sql_error_code();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Signal_nameContext.
	 */
	public static class Signal_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new signal name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Signal_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_signal_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSignal_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSignal_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSignal_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Signal name.
	 *
	 * @return the signal name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Signal_nameContext signal_name() throws RecognitionException {
		Signal_nameContext _localctx = new Signal_nameContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_signal_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1429);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Set_signal_infoContext.
	 */
	public static class Set_signal_infoContext extends ParserRuleContext {
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Message text.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MESSAGE_TEXT() { return getToken(HanaParser.MESSAGE_TEXT, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Message string.
		 *
		 * @return the message string context
		 */
		public Message_stringContext message_string() {
			return getRuleContext(Message_stringContext.class,0);
		}
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new sets the signal info context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Set_signal_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_set_signal_info; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_signal_info(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_signal_info(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_signal_info(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sets the signal info.
	 *
	 * @return the sets the signal info context
	 * @throws RecognitionException the recognition exception
	 */
	public final Set_signal_infoContext set_signal_info() throws RecognitionException {
		Set_signal_infoContext _localctx = new Set_signal_infoContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_set_signal_info);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1431);
			match(SET);
			setState(1432);
			match(MESSAGE_TEXT);
			setState(1433);
			match(EQUALS_OP);
			setState(1439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
				{
				setState(1434);
				match(T__1);
				setState(1435);
				message_string();
				setState(1436);
				match(T__1);
				}
				break;
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1438);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Message_stringContext.
	 */
	public static class Message_stringContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new message string context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Message_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_message_string; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMessage_string(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMessage_string(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMessage_string(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Message string.
	 *
	 * @return the message string context
	 * @throws RecognitionException the recognition exception
	 */
	public final Message_stringContext message_string() throws RecognitionException {
		Message_stringContext _localctx = new Message_stringContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_message_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1441);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_ifContext.
	 */
	public static class Proc_ifContext extends ParserRuleContext {
		
		/**
		 * If.
		 *
		 * @return the list
		 */
		public List<TerminalNode> IF() { return getTokens(HanaParser.IF); }
		
		/**
		 * If.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode IF(int i) {
			return getToken(HanaParser.IF, i);
		}
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Sequential.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SEQUENTIAL() { return getTokens(HanaParser.SEQUENTIAL); }
		
		/**
		 * Sequential.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SEQUENTIAL(int i) {
			return getToken(HanaParser.SEQUENTIAL, i);
		}
		
		/**
		 * Execution.
		 *
		 * @return the list
		 */
		public List<TerminalNode> EXECUTION() { return getTokens(HanaParser.EXECUTION); }
		
		/**
		 * Execution.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode EXECUTION(int i) {
			return getToken(HanaParser.EXECUTION, i);
		}
		
		/**
		 * Proc decl list.
		 *
		 * @return the proc decl list context
		 */
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		
		/**
		 * Proc handler list.
		 *
		 * @return the proc handler list context
		 */
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		
		/**
		 * Proc stmt list.
		 *
		 * @return the proc stmt list context
		 */
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		
		/**
		 * Proc break.
		 *
		 * @return the proc break context
		 */
		public Proc_breakContext proc_break() {
			return getRuleContext(Proc_breakContext.class,0);
		}
		
		/**
		 * Proc elseif list.
		 *
		 * @return the proc elseif list context
		 */
		public Proc_elseif_listContext proc_elseif_list() {
			return getRuleContext(Proc_elseif_listContext.class,0);
		}
		
		/**
		 * Proc else.
		 *
		 * @return the proc else context
		 */
		public Proc_elseContext proc_else() {
			return getRuleContext(Proc_elseContext.class,0);
		}
		
		/**
		 * Instantiates a new proc if context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_ifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_if; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_if(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_if(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_if(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc if.
	 *
	 * @return the proc if context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_ifContext proc_if() throws RecognitionException {
		Proc_ifContext _localctx = new Proc_ifContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_proc_if);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1443);
			match(IF);
			setState(1444);
			condition();
			setState(1445);
			match(THEN);
			setState(1450);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1446);
					match(SEQUENTIAL);
					setState(1447);
					match(EXECUTION);
					}
					} 
				}
				setState(1452);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			}
			setState(1454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1453);
				proc_decl_list();
				}
				break;
			}
			setState(1457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1456);
				proc_handler_list();
				}
			}

			setState(1460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1459);
				proc_stmt_list();
				}
				break;
			}
			setState(1463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BREAK) {
				{
				setState(1462);
				proc_break();
				}
			}

			setState(1466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSEIF) {
				{
				setState(1465);
				proc_elseif_list();
				}
			}

			setState(1469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1468);
				proc_else();
				}
			}

			setState(1471);
			match(END);
			setState(1472);
			match(IF);
			setState(1473);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_elseif_listContext.
	 */
	public static class Proc_elseif_listContext extends ParserRuleContext {
		
		/**
		 * Elseif.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELSEIF() { return getToken(HanaParser.ELSEIF, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Sequential.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SEQUENTIAL() { return getTokens(HanaParser.SEQUENTIAL); }
		
		/**
		 * Sequential.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SEQUENTIAL(int i) {
			return getToken(HanaParser.SEQUENTIAL, i);
		}
		
		/**
		 * Execution.
		 *
		 * @return the list
		 */
		public List<TerminalNode> EXECUTION() { return getTokens(HanaParser.EXECUTION); }
		
		/**
		 * Execution.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode EXECUTION(int i) {
			return getToken(HanaParser.EXECUTION, i);
		}
		
		/**
		 * Proc decl list.
		 *
		 * @return the proc decl list context
		 */
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		
		/**
		 * Proc handler list.
		 *
		 * @return the proc handler list context
		 */
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		
		/**
		 * Proc stmt list.
		 *
		 * @return the proc stmt list context
		 */
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		
		/**
		 * Proc elseif list.
		 *
		 * @return the proc elseif list context
		 */
		public Proc_elseif_listContext proc_elseif_list() {
			return getRuleContext(Proc_elseif_listContext.class,0);
		}
		
		/**
		 * Instantiates a new proc elseif list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_elseif_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_elseif_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_elseif_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_elseif_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_elseif_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc elseif list.
	 *
	 * @return the proc elseif list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_elseif_listContext proc_elseif_list() throws RecognitionException {
		Proc_elseif_listContext _localctx = new Proc_elseif_listContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_proc_elseif_list);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1475);
			match(ELSEIF);
			setState(1476);
			condition();
			setState(1477);
			match(THEN);
			setState(1482);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1478);
					match(SEQUENTIAL);
					setState(1479);
					match(EXECUTION);
					}
					} 
				}
				setState(1484);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			}
			setState(1486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1485);
				proc_decl_list();
				}
				break;
			}
			setState(1489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1488);
				proc_handler_list();
				}
			}

			setState(1492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1491);
				proc_stmt_list();
				}
			}

			setState(1495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSEIF) {
				{
				setState(1494);
				proc_elseif_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_elseContext.
	 */
	public static class Proc_elseContext extends ParserRuleContext {
		
		/**
		 * Else.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		
		/**
		 * Sequential.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SEQUENTIAL() { return getTokens(HanaParser.SEQUENTIAL); }
		
		/**
		 * Sequential.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SEQUENTIAL(int i) {
			return getToken(HanaParser.SEQUENTIAL, i);
		}
		
		/**
		 * Execution.
		 *
		 * @return the list
		 */
		public List<TerminalNode> EXECUTION() { return getTokens(HanaParser.EXECUTION); }
		
		/**
		 * Execution.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode EXECUTION(int i) {
			return getToken(HanaParser.EXECUTION, i);
		}
		
		/**
		 * Proc decl list.
		 *
		 * @return the proc decl list context
		 */
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		
		/**
		 * Proc handler list.
		 *
		 * @return the proc handler list context
		 */
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		
		/**
		 * Proc stmt list.
		 *
		 * @return the proc stmt list context
		 */
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		
		/**
		 * Instantiates a new proc else context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_else; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_else(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_else(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_else(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc else.
	 *
	 * @return the proc else context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_elseContext proc_else() throws RecognitionException {
		Proc_elseContext _localctx = new Proc_elseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_proc_else);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			match(ELSE);
			setState(1502);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1498);
					match(SEQUENTIAL);
					setState(1499);
					match(EXECUTION);
					}
					} 
				}
				setState(1504);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
			}
			setState(1506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1505);
				proc_decl_list();
				}
				break;
			}
			setState(1509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1508);
				proc_handler_list();
				}
			}

			setState(1512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1511);
				proc_stmt_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_blockContext.
	 */
	public static class Proc_blockContext extends ParserRuleContext {
		
		/**
		 * Begin.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BEGIN() { return getToken(HanaParser.BEGIN, 0); }
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Proc block option.
		 *
		 * @return the proc block option context
		 */
		public Proc_block_optionContext proc_block_option() {
			return getRuleContext(Proc_block_optionContext.class,0);
		}
		
		/**
		 * Proc decl list.
		 *
		 * @return the proc decl list context
		 */
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		
		/**
		 * Proc rollback.
		 *
		 * @return the proc rollback context
		 */
		public Proc_rollbackContext proc_rollback() {
			return getRuleContext(Proc_rollbackContext.class,0);
		}
		
		/**
		 * Proc handler list.
		 *
		 * @return the proc handler list context
		 */
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		
		/**
		 * Proc stmt list.
		 *
		 * @return the proc stmt list context
		 */
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		
		/**
		 * Instantiates a new proc block context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_block; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_block(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_block(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_block(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc block.
	 *
	 * @return the proc block context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_blockContext proc_block() throws RecognitionException {
		Proc_blockContext _localctx = new Proc_blockContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_proc_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1514);
			match(BEGIN);
			setState(1516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1515);
				proc_block_option();
				}
				break;
			}
			setState(1519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				setState(1518);
				proc_decl_list();
				}
				break;
			}
			setState(1522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				setState(1521);
				proc_rollback();
				}
				break;
			}
			setState(1525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1524);
				proc_handler_list();
				}
			}

			setState(1528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1527);
				proc_stmt_list();
				}
			}

			setState(1530);
			match(END);
			setState(1531);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_block_optionContext.
	 */
	public static class Proc_block_optionContext extends ParserRuleContext {
		
		/**
		 * Sequential.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		
		/**
		 * Execution.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXECUTION() { return getToken(HanaParser.EXECUTION, 0); }
		
		/**
		 * Autonomous.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTONOMOUS() { return getToken(HanaParser.AUTONOMOUS, 0); }
		
		/**
		 * Transaction.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRANSACTION() { return getToken(HanaParser.TRANSACTION, 0); }
		
		/**
		 * Instantiates a new proc block option context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_block_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_block_option; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_block_option(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_block_option(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_block_option(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc block option.
	 *
	 * @return the proc block option context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_block_optionContext proc_block_option() throws RecognitionException {
		Proc_block_optionContext _localctx = new Proc_block_optionContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_proc_block_option);
		int _la;
		try {
			setState(1547);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEQUENTIAL:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1533);
				match(SEQUENTIAL);
				setState(1534);
				match(EXECUTION);
				}
				setState(1538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTONOMOUS) {
					{
					setState(1536);
					match(AUTONOMOUS);
					setState(1537);
					match(TRANSACTION);
					}
				}

				}
				break;
			case AUTONOMOUS:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1540);
				match(AUTONOMOUS);
				setState(1541);
				match(TRANSACTION);
				}
				setState(1545);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1543);
					match(SEQUENTIAL);
					setState(1544);
					match(EXECUTION);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_assignContext.
	 */
	public static class Proc_assignContext extends ParserRuleContext {
		
		/**
		 * Variable name.
		 *
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		
		/**
		 * Assign op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASSIGN_OP() { return getToken(HanaParser.ASSIGN_OP, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Left bracket.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_BRACKET() { return getToken(HanaParser.LEFT_BRACKET, 0); }
		
		/**
		 * Right bracket.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_BRACKET() { return getToken(HanaParser.RIGHT_BRACKET, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Instantiates a new proc assign context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_assign; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_assign(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_assign(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc assign.
	 *
	 * @return the proc assign context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_assignContext proc_assign() throws RecognitionException {
		Proc_assignContext _localctx = new Proc_assignContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_proc_assign);
		try {
			setState(1567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1549);
				variable_name();
				setState(1550);
				match(ASSIGN_OP);
				{
				setState(1551);
				expression();
				}
				setState(1552);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1554);
				variable_name();
				setState(1555);
				match(LEFT_BRACKET);
				setState(1556);
				expression();
				setState(1557);
				match(RIGHT_BRACKET);
				setState(1558);
				match(EQUALS_OP);
				setState(1559);
				expression();
				setState(1560);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1562);
				variable_name();
				setState(1563);
				match(EQUALS_OP);
				setState(1564);
				expression();
				setState(1565);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_single_assignContext.
	 */
	public static class Proc_single_assignContext extends ParserRuleContext {
		
		/**
		 * Variable name.
		 *
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Function call.
		 *
		 * @return the function call context
		 */
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		
		/**
		 * Unnest function.
		 *
		 * @return the unnest function context
		 */
		public Unnest_functionContext unnest_function() {
			return getRuleContext(Unnest_functionContext.class,0);
		}
		
		/**
		 * Bindvar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BINDVAR() { return getToken(HanaParser.BINDVAR, 0); }
		
		/**
		 * Char string.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		
		/**
		 * Instantiates a new proc single assign context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_single_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_single_assign; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_single_assign(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_single_assign(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_single_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc single assign.
	 *
	 * @return the proc single assign context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_single_assignContext proc_single_assign() throws RecognitionException {
		Proc_single_assignContext _localctx = new Proc_single_assignContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_proc_single_assign);
		try {
			setState(1594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1569);
				variable_name();
				setState(1570);
				match(EQUALS_OP);
				setState(1571);
				select_statement();
				setState(1572);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1574);
				variable_name();
				setState(1575);
				match(EQUALS_OP);
				setState(1576);
				function_call();
				setState(1577);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1579);
				variable_name();
				setState(1580);
				match(EQUALS_OP);
				setState(1581);
				unnest_function();
				setState(1582);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1584);
				variable_name();
				setState(1585);
				match(EQUALS_OP);
				setState(1586);
				match(BINDVAR);
				setState(1587);
				match(SEMICOLON);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1589);
				variable_name();
				setState(1590);
				match(EQUALS_OP);
				setState(1591);
				match(CHAR_STRING);
				setState(1592);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Unnest_functionContext.
	 */
	public static class Unnest_functionContext extends ParserRuleContext {
		
		/**
		 * Unnest.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNNEST() { return getToken(HanaParser.UNNEST, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Variable name list.
		 *
		 * @return the variable name list context
		 */
		public Variable_name_listContext variable_name_list() {
			return getRuleContext(Variable_name_listContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Ordinality.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDINALITY() { return getToken(HanaParser.ORDINALITY, 0); }
		
		/**
		 * As col names.
		 *
		 * @return the as col names context
		 */
		public As_col_namesContext as_col_names() {
			return getRuleContext(As_col_namesContext.class,0);
		}
		
		/**
		 * Instantiates a new unnest function context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Unnest_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_unnest_function; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnnest_function(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnnest_function(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnnest_function(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Unnest function.
	 *
	 * @return the unnest function context
	 * @throws RecognitionException the recognition exception
	 */
	public final Unnest_functionContext unnest_function() throws RecognitionException {
		Unnest_functionContext _localctx = new Unnest_functionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_unnest_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1596);
			match(UNNEST);
			setState(1597);
			match(LEFT_PAREN);
			setState(1598);
			variable_name_list();
			setState(1599);
			match(RIGHT_PAREN);
			setState(1602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1600);
				match(WITH);
				setState(1601);
				match(ORDINALITY);
				}
			}

			setState(1605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1604);
				as_col_names();
				}
			}

			setState(1607);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_nameContext.
	 */
	public static class Table_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Schema name.
		 *
		 * @return the schema name context
		 */
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Instantiates a new table name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table name.
	 *
	 * @return the table name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1609);
				schema_name();
				setState(1610);
				match(PERIOD);
				}
				break;
			}
			setState(1614);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class As_col_namesContext.
	 */
	public static class As_col_namesContext extends ParserRuleContext {
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Table name.
		 *
		 * @return the table name context
		 */
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Column name list.
		 *
		 * @return the column name list context
		 */
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Instantiates a new as col names context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public As_col_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_as_col_names; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAs_col_names(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAs_col_names(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAs_col_names(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * As col names.
	 *
	 * @return the as col names context
	 * @throws RecognitionException the recognition exception
	 */
	public final As_col_namesContext as_col_names() throws RecognitionException {
		As_col_namesContext _localctx = new As_col_namesContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_as_col_names);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1616);
			match(AS);
			setState(1617);
			table_name();
			setState(1618);
			match(LEFT_PAREN);
			setState(1619);
			column_name_list();
			setState(1620);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Column_name_listContext.
	 */
	public static class Column_name_listContext extends ParserRuleContext {
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new column name list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_name_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_name_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Column name list.
	 *
	 * @return the column name list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1622);
			column_name();
			setState(1627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1623);
				match(COMMA);
				setState(1624);
				column_name();
				}
				}
				setState(1629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_callContext.
	 */
	public static class Proc_callContext extends ParserRuleContext {
		
		/**
		 * Call.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CALL() { return getToken(HanaParser.CALL, 0); }
		
		/**
		 * Proc name.
		 *
		 * @return the proc name context
		 */
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Param list.
		 *
		 * @return the param list context
		 */
		public Param_listContext param_list() {
			return getRuleContext(Param_listContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * With.
		 *
		 * @return the list
		 */
		public List<TerminalNode> WITH() { return getTokens(HanaParser.WITH); }
		
		/**
		 * With.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode WITH(int i) {
			return getToken(HanaParser.WITH, i);
		}
		
		/**
		 * Overview.
		 *
		 * @return the list
		 */
		public List<TerminalNode> OVERVIEW() { return getTokens(HanaParser.OVERVIEW); }
		
		/**
		 * Overview.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode OVERVIEW(int i) {
			return getToken(HanaParser.OVERVIEW, i);
		}
		
		/**
		 * Instantiates a new proc call context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_call; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_call(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_call(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_call(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc call.
	 *
	 * @return the proc call context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_callContext proc_call() throws RecognitionException {
		Proc_callContext _localctx = new Proc_callContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_proc_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1630);
			match(CALL);
			setState(1631);
			proc_name();
			setState(1632);
			match(LEFT_PAREN);
			setState(1633);
			param_list();
			setState(1634);
			match(RIGHT_PAREN);
			setState(1639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH) {
				{
				{
				setState(1635);
				match(WITH);
				setState(1636);
				match(OVERVIEW);
				}
				}
				setState(1641);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1642);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Param_listContext.
	 */
	public static class Param_listContext extends ParserRuleContext {
		
		/**
		 * Proc param.
		 *
		 * @return the list
		 */
		public List<Proc_paramContext> proc_param() {
			return getRuleContexts(Proc_paramContext.class);
		}
		
		/**
		 * Proc param.
		 *
		 * @param i the i
		 * @return the proc param context
		 */
		public Proc_paramContext proc_param(int i) {
			return getRuleContext(Proc_paramContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new param list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Param_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_param_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParam_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParam_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParam_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Param list.
	 *
	 * @return the param list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Param_listContext param_list() throws RecognitionException {
		Param_listContext _localctx = new Param_listContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_param_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1644);
			proc_param();
			setState(1649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1645);
				match(COMMA);
				setState(1646);
				proc_param();
				}
				}
				setState(1651);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_paramContext.
	 */
	public static class Proc_paramContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Named param.
		 *
		 * @return the named param context
		 */
		public Named_paramContext named_param() {
			return getRuleContext(Named_paramContext.class,0);
		}
		
		/**
		 * Instantiates a new proc param context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_param; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_param(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_param(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_param(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc param.
	 *
	 * @return the proc param context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_paramContext proc_param() throws RecognitionException {
		Proc_paramContext _localctx = new Proc_paramContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_proc_param);
		try {
			setState(1655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1652);
				id_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1653);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1654);
				named_param();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Named_paramContext.
	 */
	public static class Named_paramContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Statement.
		 *
		 * @return the statement context
		 */
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		
		/**
		 * Char string.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new named param context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Named_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_named_param; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNamed_param(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNamed_param(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNamed_param(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Named param.
	 *
	 * @return the named param context
	 * @throws RecognitionException the recognition exception
	 */
	public final Named_paramContext named_param() throws RecognitionException {
		Named_paramContext _localctx = new Named_paramContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_named_param);
		try {
			setState(1681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1657);
				id_expression();
				setState(1658);
				match(T__2);
				setState(1659);
				id_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1661);
				id_expression();
				setState(1662);
				match(T__2);
				setState(1663);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1665);
				id_expression();
				setState(1666);
				match(T__2);
				setState(1667);
				statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1669);
				id_expression();
				setState(1670);
				match(T__2);
				setState(1671);
				match(CHAR_STRING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1673);
				id_expression();
				setState(1674);
				match(T__2);
				setState(1675);
				match(NULL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1677);
				id_expression();
				setState(1678);
				match(T__2);
				setState(1679);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Procedure_bodyContext.
	 */
	public static class Procedure_bodyContext extends ParserRuleContext {
		
		/**
		 * Proc stmt list.
		 *
		 * @return the proc stmt list context
		 */
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		
		/**
		 * Proc decl list.
		 *
		 * @return the proc decl list context
		 */
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		
		/**
		 * Proc handler list.
		 *
		 * @return the proc handler list context
		 */
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		
		/**
		 * Instantiates a new procedure body context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_procedure_body; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProcedure_body(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProcedure_body(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProcedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Procedure body.
	 *
	 * @return the procedure body context
	 * @throws RecognitionException the recognition exception
	 */
	public final Procedure_bodyContext procedure_body() throws RecognitionException {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(1683);
				proc_decl_list();
				}
				break;
			}
			setState(1687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1686);
				proc_handler_list();
				}
			}

			setState(1689);
			proc_stmt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Procedure_body_Context.
	 */
	public static class Procedure_body_Context extends ParserRuleContext {
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * Instantiates a new procedure body context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Procedure_body_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_procedure_body_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProcedure_body_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProcedure_body_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProcedure_body_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Procedure body.
	 *
	 * @return the procedure body context
	 * @throws RecognitionException the recognition exception
	 */
	public final Procedure_body_Context procedure_body_() throws RecognitionException {
		Procedure_body_Context _localctx = new Procedure_body_Context(_ctx, getState());
		enterRule(_localctx, 162, RULE_procedure_body_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1691);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Func_bodyContext.
	 */
	public static class Func_bodyContext extends ParserRuleContext {
		
		/**
		 * Func stmt list.
		 *
		 * @return the func stmt list context
		 */
		public Func_stmt_listContext func_stmt_list() {
			return getRuleContext(Func_stmt_listContext.class,0);
		}
		
		/**
		 * Instantiates a new func body context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Func_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_func_body; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunc_body(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunc_body(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunc_body(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Func body.
	 *
	 * @return the func body context
	 * @throws RecognitionException the recognition exception
	 */
	public final Func_bodyContext func_body() throws RecognitionException {
		Func_bodyContext _localctx = new Func_bodyContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_func_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1693);
			func_stmt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Parameter_nameContext.
	 */
	public static class Parameter_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new parameter name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParameter_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParameter_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Parameter name.
	 *
	 * @return the parameter name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1695);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class For_each_rowContext.
	 */
	public static class For_each_rowContext extends ParserRuleContext {
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Each.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EACH() { return getToken(HanaParser.EACH, 0); }
		
		/**
		 * Row.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROW() { return getToken(HanaParser.ROW, 0); }
		
		/**
		 * Instantiates a new for each row context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_each_row(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_each_row(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * For each row.
	 *
	 * @return the for each row context
	 * @throws RecognitionException the recognition exception
	 */
	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1697);
			match(FOR);
			setState(1698);
			match(EACH);
			setState(1699);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Alter_attribute_definitionContext.
	 */
	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		
		/**
		 * Attribute.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ATTRIBUTE() { return getToken(HanaParser.ATTRIBUTE, 0); }
		
		/**
		 * Adds the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ADD() { return getToken(HanaParser.ADD, 0); }
		
		/**
		 * Modify.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MODIFY() { return getToken(HanaParser.MODIFY, 0); }
		
		/**
		 * Drop.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DROP() { return getToken(HanaParser.DROP, 0); }
		
		/**
		 * Attribute definition.
		 *
		 * @return the list
		 */
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		
		/**
		 * Attribute definition.
		 *
		 * @param i the i
		 * @return the attribute definition context
		 */
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new alter attribute definition context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAlter_attribute_definition(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAlter_attribute_definition(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Alter attribute definition.
	 *
	 * @return the alter attribute definition context
	 * @throws RecognitionException the recognition exception
	 */
	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1701);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1702);
			match(ATTRIBUTE);
			setState(1715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1703);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1704);
				match(LEFT_PAREN);
				setState(1705);
				attribute_definition();
				setState(1710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1706);
					match(COMMA);
					setState(1707);
					attribute_definition();
					}
					}
					setState(1712);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1713);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Attribute_definitionContext.
	 */
	public static class Attribute_definitionContext extends ParserRuleContext {
		
		/**
		 * Attribute name.
		 *
		 * @return the attribute name context
		 */
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Instantiates a new attribute definition context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAttribute_definition(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAttribute_definition(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Attribute definition.
	 *
	 * @return the attribute definition context
	 * @throws RecognitionException the recognition exception
	 */
	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1717);
			attribute_name();
			setState(1719);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIGINT) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SECONDDATE - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1718);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Alter_collection_clausesContext.
	 */
	public static class Alter_collection_clausesContext extends ParserRuleContext {
		
		/**
		 * Modify.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MODIFY() { return getToken(HanaParser.MODIFY, 0); }
		
		/**
		 * Limit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIMIT() { return getToken(HanaParser.LIMIT, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Element.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELEMENT() { return getToken(HanaParser.ELEMENT, 0); }
		
		/**
		 * Type.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TYPE() { return getToken(HanaParser.TYPE, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Instantiates a new alter collection clauses context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAlter_collection_clauses(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAlter_collection_clauses(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Alter collection clauses.
	 *
	 * @return the alter collection clauses context
	 * @throws RecognitionException the recognition exception
	 */
	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1721);
			match(MODIFY);
			setState(1727);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1722);
				match(LIMIT);
				setState(1723);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1724);
				match(ELEMENT);
				setState(1725);
				match(TYPE);
				setState(1726);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Dependent_handling_clauseContext.
	 */
	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		
		/**
		 * Invalidate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INVALIDATE() { return getToken(HanaParser.INVALIDATE, 0); }
		
		/**
		 * Cascade.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CASCADE() { return getToken(HanaParser.CASCADE, 0); }
		
		/**
		 * Convert.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONVERT() { return getToken(HanaParser.CONVERT, 0); }
		
		/**
		 * To.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		
		/**
		 * Substitutable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUBSTITUTABLE() { return getToken(HanaParser.SUBSTITUTABLE, 0); }
		
		/**
		 * Including.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INCLUDING() { return getToken(HanaParser.INCLUDING, 0); }
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * Data.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DATA() { return getToken(HanaParser.DATA, 0); }
		
		/**
		 * Dependent exceptions part.
		 *
		 * @return the dependent exceptions part context
		 */
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Instantiates a new dependent handling clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDependent_handling_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDependent_handling_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Dependent handling clause.
	 *
	 * @return the dependent handling clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1745);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1729);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1730);
				match(CASCADE);
				setState(1740);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1731);
					match(CONVERT);
					setState(1732);
					match(TO);
					setState(1733);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1735);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1734);
						match(NOT);
						}
					}

					setState(1737);
					match(INCLUDING);
					setState(1738);
					match(TABLE);
					setState(1739);
					match(DATA);
					}
					break;
				case EOF:
				case EXCEPTIONS:
				case FORCE:
					break;
				default:
					break;
				}
				setState(1743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1742);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Dependent_exceptions_partContext.
	 */
	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		
		/**
		 * Exceptions.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCEPTIONS() { return getToken(HanaParser.EXCEPTIONS, 0); }
		
		/**
		 * Into.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Force.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FORCE() { return getToken(HanaParser.FORCE, 0); }
		
		/**
		 * Instantiates a new dependent exceptions part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDependent_exceptions_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDependent_exceptions_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Dependent exceptions part.
	 *
	 * @return the dependent exceptions part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1747);
				match(FORCE);
				}
			}

			setState(1750);
			match(EXCEPTIONS);
			setState(1751);
			match(INTO);
			setState(1752);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Type_definitionContext.
	 */
	public static class Type_definitionContext extends ParserRuleContext {
		
		/**
		 * Type name.
		 *
		 * @return the type name context
		 */
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		
		/**
		 * Oid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OID() { return getToken(HanaParser.OID, 0); }
		
		/**
		 * Char string.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		
		/**
		 * Object type def.
		 *
		 * @return the object type def context
		 */
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		
		/**
		 * Instantiates a new type definition context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_type_definition; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_definition(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_definition(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Type definition.
	 *
	 * @return the type definition context
	 * @throws RecognitionException the recognition exception
	 */
	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			type_name();
			setState(1757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1755);
				match(OID);
				setState(1756);
				match(CHAR_STRING);
				}
			}

			setState(1760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1759);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Object_type_defContext.
	 */
	public static class Object_type_defContext extends ParserRuleContext {
		
		/**
		 * Object as part.
		 *
		 * @return the object as part context
		 */
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		
		/**
		 * Object under part.
		 *
		 * @return the object under part context
		 */
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		
		/**
		 * Invoker rights clause.
		 *
		 * @return the invoker rights clause context
		 */
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		
		/**
		 * Sqlj object type.
		 *
		 * @return the sqlj object type context
		 */
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Object member spec.
		 *
		 * @return the list
		 */
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		
		/**
		 * Object member spec.
		 *
		 * @param i the i
		 * @return the object member spec context
		 */
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Modifier clause.
		 *
		 * @return the list
		 */
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		
		/**
		 * Modifier clause.
		 *
		 * @param i the i
		 * @return the modifier clause context
		 */
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new object type def context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterObject_type_def(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitObject_type_def(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Object type def.
	 *
	 * @return the object type def context
	 * @throws RecognitionException the recognition exception
	 */
	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1762);
				invoker_rights_clause();
				}
			}

			setState(1767);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1765);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1766);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1769);
				sqlj_object_type();
				}
			}

			setState(1783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1772);
				match(LEFT_PAREN);
				setState(1773);
				object_member_spec();
				setState(1778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1774);
					match(COMMA);
					setState(1775);
					object_member_spec();
					}
					}
					setState(1780);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1781);
				match(RIGHT_PAREN);
				}
			}

			setState(1788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1785);
				modifier_clause();
				}
				}
				setState(1790);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Object_as_partContext.
	 */
	public static class Object_as_partContext extends ParserRuleContext {
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Object.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OBJECT() { return getToken(HanaParser.OBJECT, 0); }
		
		/**
		 * Varray type def.
		 *
		 * @return the varray type def context
		 */
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		
		/**
		 * Nested table type def.
		 *
		 * @return the nested table type def context
		 */
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		
		/**
		 * Instantiates a new object as part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterObject_as_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitObject_as_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Object as part.
	 *
	 * @return the object as part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1791);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1792);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1793);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1794);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Object_under_partContext.
	 */
	public static class Object_under_partContext extends ParserRuleContext {
		
		/**
		 * Under.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNDER() { return getToken(HanaParser.UNDER, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Instantiates a new object under part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterObject_under_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitObject_under_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Object under part.
	 *
	 * @return the object under part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1797);
			match(UNDER);
			setState(1798);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Nested_table_type_defContext.
	 */
	public static class Nested_table_type_defContext extends ParserRuleContext {
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * Of.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Instantiates a new nested table type def context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNested_table_type_def(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNested_table_type_def(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Nested table type def.
	 *
	 * @return the nested table type def context
	 * @throws RecognitionException the recognition exception
	 */
	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1800);
			match(TABLE);
			setState(1801);
			match(OF);
			setState(1802);
			type_spec();
			setState(1805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1803);
				match(NOT);
				setState(1804);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sqlj_object_typeContext.
	 */
	public static class Sqlj_object_typeContext extends ParserRuleContext {
		
		/**
		 * External.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXTERNAL() { return getToken(HanaParser.EXTERNAL, 0); }
		
		/**
		 * Name.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Language.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		
		/**
		 * Java.
		 *
		 * @return the terminal node
		 */
		public TerminalNode JAVA() { return getToken(HanaParser.JAVA, 0); }
		
		/**
		 * Using.
		 *
		 * @return the terminal node
		 */
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		
		/**
		 * Sqldata.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQLDATA() { return getToken(HanaParser.SQLDATA, 0); }
		
		/**
		 * Customdatum.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CUSTOMDATUM() { return getToken(HanaParser.CUSTOMDATUM, 0); }
		
		/**
		 * Oradata.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORADATA() { return getToken(HanaParser.ORADATA, 0); }
		
		/**
		 * Instantiates a new sqlj object type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSqlj_object_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSqlj_object_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sqlj object type.
	 *
	 * @return the sqlj object type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1807);
			match(EXTERNAL);
			setState(1808);
			match(NAME);
			setState(1809);
			expression();
			setState(1810);
			match(LANGUAGE);
			setState(1811);
			match(JAVA);
			setState(1812);
			match(USING);
			setState(1813);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Type_bodyContext.
	 */
	public static class Type_bodyContext extends ParserRuleContext {
		
		/**
		 * Body.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BODY() { return getToken(HanaParser.BODY, 0); }
		
		/**
		 * Type name.
		 *
		 * @return the type name context
		 */
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		
		/**
		 * Type body elements.
		 *
		 * @return the list
		 */
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		
		/**
		 * Type body elements.
		 *
		 * @param i the i
		 * @return the type body elements context
		 */
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new type body context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_type_body; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_body(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_body(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Type body.
	 *
	 * @return the type body context
	 * @throws RecognitionException the recognition exception
	 */
	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1815);
			match(BODY);
			setState(1816);
			type_name();
			setState(1817);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1818);
			type_body_elements();
			setState(1823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1819);
				match(COMMA);
				setState(1820);
				type_body_elements();
				}
				}
				setState(1825);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1826);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Type_body_elementsContext.
	 */
	public static class Type_body_elementsContext extends ParserRuleContext {
		
		/**
		 * Map order func declaration.
		 *
		 * @return the map order func declaration context
		 */
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		
		/**
		 * Subprog decl in type.
		 *
		 * @return the subprog decl in type context
		 */
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		
		/**
		 * Instantiates a new type body elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_body_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_body_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Type body elements.
	 *
	 * @return the type body elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_type_body_elements);
		try {
			setState(1830);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1828);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1829);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Map_order_func_declarationContext.
	 */
	public static class Map_order_func_declarationContext extends ParserRuleContext {
		
		/**
		 * Member.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		
		/**
		 * Func decl in type.
		 *
		 * @return the func decl in type context
		 */
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		
		/**
		 * Map.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAP() { return getToken(HanaParser.MAP, 0); }
		
		/**
		 * Order.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		
		/**
		 * Instantiates a new map order func declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMap_order_func_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMap_order_func_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Map order func declaration.
	 *
	 * @return the map order func declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1832);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1833);
			match(MEMBER);
			setState(1834);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Subprog_decl_in_typeContext.
	 */
	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		
		/**
		 * Member.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		
		/**
		 * Static.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STATIC() { return getToken(HanaParser.STATIC, 0); }
		
		/**
		 * Proc decl in type.
		 *
		 * @return the proc decl in type context
		 */
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		
		/**
		 * Func decl in type.
		 *
		 * @return the func decl in type context
		 */
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		
		/**
		 * Constructor declaration.
		 *
		 * @return the constructor declaration context
		 */
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		
		/**
		 * Instantiates a new subprog decl in type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubprog_decl_in_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubprog_decl_in_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Subprog decl in type.
	 *
	 * @return the subprog decl in type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1836);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1840);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1837);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1838);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1839);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_decl_in_typeContext.
	 */
	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		
		/**
		 * Procedure.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PROCEDURE() { return getToken(HanaParser.PROCEDURE, 0); }
		
		/**
		 * Proc name.
		 *
		 * @return the proc name context
		 */
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Type elements parameter.
		 *
		 * @return the list
		 */
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		
		/**
		 * Type elements parameter.
		 *
		 * @param i the i
		 * @return the type elements parameter context
		 */
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Call spec.
		 *
		 * @return the call spec context
		 */
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		
		/**
		 * Body.
		 *
		 * @return the body context
		 */
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Declare spec.
		 *
		 * @return the list
		 */
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		
		/**
		 * Declare spec.
		 *
		 * @param i the i
		 * @return the declare spec context
		 */
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		
		/**
		 * Instantiates a new proc decl in type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_decl_in_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_decl_in_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc decl in type.
	 *
	 * @return the proc decl in type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1842);
			match(PROCEDURE);
			setState(1843);
			proc_name();
			setState(1844);
			match(LEFT_PAREN);
			setState(1845);
			type_elements_parameter();
			setState(1850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1846);
				match(COMMA);
				setState(1847);
				type_elements_parameter();
				}
				}
				setState(1852);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1853);
			match(RIGHT_PAREN);
			setState(1854);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				setState(1855);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1856);
					match(DECLARE);
					}
				}

				setState(1862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					{
					setState(1859);
					declare_spec();
					}
					}
					setState(1864);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1865);
				body();
				setState(1866);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Func_decl_in_typeContext.
	 */
	public static class Func_decl_in_typeContext extends ParserRuleContext {
		
		/**
		 * Function.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		
		/**
		 * Function name.
		 *
		 * @return the function name context
		 */
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Call spec.
		 *
		 * @return the call spec context
		 */
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		
		/**
		 * Body.
		 *
		 * @return the body context
		 */
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Type elements parameter.
		 *
		 * @return the list
		 */
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		
		/**
		 * Type elements parameter.
		 *
		 * @param i the i
		 * @return the type elements parameter context
		 */
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Declare spec.
		 *
		 * @return the list
		 */
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		
		/**
		 * Declare spec.
		 *
		 * @param i the i
		 * @return the declare spec context
		 */
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new func decl in type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunc_decl_in_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunc_decl_in_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Func decl in type.
	 *
	 * @return the func decl in type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			match(FUNCTION);
			setState(1871);
			function_name();
			setState(1883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1872);
				match(LEFT_PAREN);
				setState(1873);
				type_elements_parameter();
				setState(1878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1874);
					match(COMMA);
					setState(1875);
					type_elements_parameter();
					}
					}
					setState(1880);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1881);
				match(RIGHT_PAREN);
				}
			}

			setState(1885);
			match(RETURN);
			setState(1886);
			type_spec();
			setState(1887);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				{
				setState(1888);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1889);
					match(DECLARE);
					}
				}

				setState(1895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					{
					setState(1892);
					declare_spec();
					}
					}
					setState(1897);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1898);
				body();
				setState(1899);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Constructor_declarationContext.
	 */
	public static class Constructor_declarationContext extends ParserRuleContext {
		
		/**
		 * Constructor.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTRUCTOR() { return getToken(HanaParser.CONSTRUCTOR, 0); }
		
		/**
		 * Function.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the list
		 */
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		
		/**
		 * Type spec.
		 *
		 * @param i the i
		 * @return the type spec context
		 */
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Self.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SELF() { return getTokens(HanaParser.SELF); }
		
		/**
		 * Self.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SELF(int i) {
			return getToken(HanaParser.SELF, i);
		}
		
		/**
		 * As.
		 *
		 * @return the list
		 */
		public List<TerminalNode> AS() { return getTokens(HanaParser.AS); }
		
		/**
		 * As.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode AS(int i) {
			return getToken(HanaParser.AS, i);
		}
		
		/**
		 * Result.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * Call spec.
		 *
		 * @return the call spec context
		 */
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		
		/**
		 * Body.
		 *
		 * @return the body context
		 */
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Final.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FINAL() { return getToken(HanaParser.FINAL, 0); }
		
		/**
		 * Instantiable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INSTANTIABLE() { return getToken(HanaParser.INSTANTIABLE, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Type elements parameter.
		 *
		 * @return the list
		 */
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		
		/**
		 * Type elements parameter.
		 *
		 * @param i the i
		 * @return the type elements parameter context
		 */
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Out.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Declare spec.
		 *
		 * @return the list
		 */
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		
		/**
		 * Declare spec.
		 *
		 * @param i the i
		 * @return the declare spec context
		 */
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		
		/**
		 * Instantiates a new constructor declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConstructor_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConstructor_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Constructor declaration.
	 *
	 * @return the constructor declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1903);
				match(FINAL);
				}
			}

			setState(1907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1906);
				match(INSTANTIABLE);
				}
			}

			setState(1909);
			match(CONSTRUCTOR);
			setState(1910);
			match(FUNCTION);
			setState(1911);
			type_spec();
			setState(1929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1912);
				match(LEFT_PAREN);
				{
				setState(1913);
				match(SELF);
				setState(1914);
				match(IN);
				setState(1915);
				match(OUT);
				setState(1916);
				type_spec();
				setState(1917);
				match(COMMA);
				}
				setState(1919);
				type_elements_parameter();
				setState(1924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1920);
					match(COMMA);
					setState(1921);
					type_elements_parameter();
					}
					}
					setState(1926);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1927);
				match(RIGHT_PAREN);
				}
			}

			setState(1931);
			match(RETURN);
			setState(1932);
			match(SELF);
			setState(1933);
			match(AS);
			setState(1934);
			match(RESULT);
			setState(1935);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(1936);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1937);
					match(DECLARE);
					}
				}

				setState(1943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					{
					setState(1940);
					declare_spec();
					}
					}
					setState(1945);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1946);
				body();
				setState(1947);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Modifier_clauseContext.
	 */
	public static class Modifier_clauseContext extends ParserRuleContext {
		
		/**
		 * Instantiable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INSTANTIABLE() { return getToken(HanaParser.INSTANTIABLE, 0); }
		
		/**
		 * Final.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FINAL() { return getToken(HanaParser.FINAL, 0); }
		
		/**
		 * Overriding.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OVERRIDING() { return getToken(HanaParser.OVERRIDING, 0); }
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Instantiates a new modifier clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModifier_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModifier_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Modifier clause.
	 *
	 * @return the modifier clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1952);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1951);
				match(NOT);
				}
			}

			setState(1954);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Object_member_specContext.
	 */
	public static class Object_member_specContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Sqlj object type attr.
		 *
		 * @return the sqlj object type attr context
		 */
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		
		/**
		 * Element spec.
		 *
		 * @return the element spec context
		 */
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		
		/**
		 * Instantiates a new object member spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterObject_member_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitObject_member_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Object member spec.
	 *
	 * @return the object member spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_object_member_spec);
		int _la;
		try {
			setState(1962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1956);
				id();
				setState(1957);
				type_spec();
				setState(1959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1958);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1961);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sqlj_object_type_attrContext.
	 */
	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		
		/**
		 * External.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXTERNAL() { return getToken(HanaParser.EXTERNAL, 0); }
		
		/**
		 * Name.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new sqlj object type attr context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSqlj_object_type_attr(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSqlj_object_type_attr(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sqlj object type attr.
	 *
	 * @return the sqlj object type attr context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1964);
			match(EXTERNAL);
			setState(1965);
			match(NAME);
			setState(1966);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Element_specContext.
	 */
	public static class Element_specContext extends ParserRuleContext {
		
		/**
		 * Modifier clause.
		 *
		 * @return the modifier clause context
		 */
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		
		/**
		 * Element spec options.
		 *
		 * @return the list
		 */
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		
		/**
		 * Element spec options.
		 *
		 * @param i the i
		 * @return the element spec options context
		 */
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * Pragma clause.
		 *
		 * @return the pragma clause context
		 */
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new element spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_element_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterElement_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitElement_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Element spec.
	 *
	 * @return the element spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1968);
				modifier_clause();
				}
				break;
			}
			setState(1972); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1971);
				element_spec_options();
				}
				}
				setState(1974); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (MAP - 226)) | (1L << (MEMBER - 226)) | (1L << (ORDER - 226)))) != 0) || _la==STATIC );
			setState(1978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1976);
				match(COMMA);
				setState(1977);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Element_spec_optionsContext.
	 */
	public static class Element_spec_optionsContext extends ParserRuleContext {
		
		/**
		 * Subprogram spec.
		 *
		 * @return the subprogram spec context
		 */
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		
		/**
		 * Constructor spec.
		 *
		 * @return the constructor spec context
		 */
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		
		/**
		 * Map order function spec.
		 *
		 * @return the map order function spec context
		 */
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		
		/**
		 * Instantiates a new element spec options context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterElement_spec_options(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitElement_spec_options(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Element spec options.
	 *
	 * @return the element spec options context
	 * @throws RecognitionException the recognition exception
	 */
	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_element_spec_options);
		try {
			setState(1983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1980);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1981);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1982);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Subprogram_specContext.
	 */
	public static class Subprogram_specContext extends ParserRuleContext {
		
		/**
		 * Member.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		
		/**
		 * Static.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STATIC() { return getToken(HanaParser.STATIC, 0); }
		
		/**
		 * Type procedure spec.
		 *
		 * @return the type procedure spec context
		 */
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		
		/**
		 * Type function spec.
		 *
		 * @return the type function spec context
		 */
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		
		/**
		 * Instantiates a new subprogram spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubprogram_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubprogram_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Subprogram spec.
	 *
	 * @return the subprogram spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1985);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1986);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1987);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Type_procedure_specContext.
	 */
	public static class Type_procedure_specContext extends ParserRuleContext {
		
		/**
		 * Procedure.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PROCEDURE() { return getToken(HanaParser.PROCEDURE, 0); }
		
		/**
		 * Proc name.
		 *
		 * @return the proc name context
		 */
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Type elements parameter.
		 *
		 * @return the list
		 */
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		
		/**
		 * Type elements parameter.
		 *
		 * @param i the i
		 * @return the type elements parameter context
		 */
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Call spec.
		 *
		 * @return the call spec context
		 */
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Instantiates a new type procedure spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_procedure_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_procedure_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Type procedure spec.
	 *
	 * @return the type procedure spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1990);
			match(PROCEDURE);
			setState(1991);
			proc_name();
			setState(1992);
			match(LEFT_PAREN);
			setState(1993);
			type_elements_parameter();
			setState(1998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1994);
				match(COMMA);
				setState(1995);
				type_elements_parameter();
				}
				}
				setState(2000);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2001);
			match(RIGHT_PAREN);
			setState(2004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2002);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2003);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Type_function_specContext.
	 */
	public static class Type_function_specContext extends ParserRuleContext {
		
		/**
		 * Function.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		
		/**
		 * Function name.
		 *
		 * @return the function name context
		 */
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Self.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SELF() { return getToken(HanaParser.SELF, 0); }
		
		/**
		 * As.
		 *
		 * @return the list
		 */
		public List<TerminalNode> AS() { return getTokens(HanaParser.AS); }
		
		/**
		 * As.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode AS(int i) {
			return getToken(HanaParser.AS, i);
		}
		
		/**
		 * Result.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Type elements parameter.
		 *
		 * @return the list
		 */
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		
		/**
		 * Type elements parameter.
		 *
		 * @param i the i
		 * @return the type elements parameter context
		 */
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Call spec.
		 *
		 * @return the call spec context
		 */
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		
		/**
		 * External.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXTERNAL() { return getToken(HanaParser.EXTERNAL, 0); }
		
		/**
		 * Name.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Variable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARIABLE() { return getToken(HanaParser.VARIABLE, 0); }
		
		/**
		 * Instantiates a new type function spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_function_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_function_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Type function spec.
	 *
	 * @return the type function spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2006);
			match(FUNCTION);
			setState(2007);
			function_name();
			setState(2019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2008);
				match(LEFT_PAREN);
				setState(2009);
				type_elements_parameter();
				setState(2014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2010);
					match(COMMA);
					setState(2011);
					type_elements_parameter();
					}
					}
					setState(2016);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2017);
				match(RIGHT_PAREN);
				}
			}

			setState(2021);
			match(RETURN);
			setState(2026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2022);
				type_spec();
				}
				break;
			case 2:
				{
				setState(2023);
				match(SELF);
				setState(2024);
				match(AS);
				setState(2025);
				match(RESULT);
				}
				break;
			}
			setState(2036);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2028);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2029);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(2030);
				match(EXTERNAL);
				setState(2032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(2031);
					match(VARIABLE);
					}
				}

				setState(2034);
				match(NAME);
				setState(2035);
				expression();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Constructor_specContext.
	 */
	public static class Constructor_specContext extends ParserRuleContext {
		
		/**
		 * Constructor.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTRUCTOR() { return getToken(HanaParser.CONSTRUCTOR, 0); }
		
		/**
		 * Function.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the list
		 */
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		
		/**
		 * Type spec.
		 *
		 * @param i the i
		 * @return the type spec context
		 */
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Self.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SELF() { return getTokens(HanaParser.SELF); }
		
		/**
		 * Self.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SELF(int i) {
			return getToken(HanaParser.SELF, i);
		}
		
		/**
		 * As.
		 *
		 * @return the list
		 */
		public List<TerminalNode> AS() { return getTokens(HanaParser.AS); }
		
		/**
		 * As.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode AS(int i) {
			return getToken(HanaParser.AS, i);
		}
		
		/**
		 * Result.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		
		/**
		 * Final.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FINAL() { return getToken(HanaParser.FINAL, 0); }
		
		/**
		 * Instantiable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INSTANTIABLE() { return getToken(HanaParser.INSTANTIABLE, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Type elements parameter.
		 *
		 * @return the list
		 */
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		
		/**
		 * Type elements parameter.
		 *
		 * @param i the i
		 * @return the type elements parameter context
		 */
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Call spec.
		 *
		 * @return the call spec context
		 */
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Out.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new constructor spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConstructor_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConstructor_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Constructor spec.
	 *
	 * @return the constructor spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2038);
				match(FINAL);
				}
			}

			setState(2042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2041);
				match(INSTANTIABLE);
				}
			}

			setState(2044);
			match(CONSTRUCTOR);
			setState(2045);
			match(FUNCTION);
			setState(2046);
			type_spec();
			setState(2064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2047);
				match(LEFT_PAREN);
				{
				setState(2048);
				match(SELF);
				setState(2049);
				match(IN);
				setState(2050);
				match(OUT);
				setState(2051);
				type_spec();
				setState(2052);
				match(COMMA);
				}
				setState(2054);
				type_elements_parameter();
				setState(2059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2055);
					match(COMMA);
					setState(2056);
					type_elements_parameter();
					}
					}
					setState(2061);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2062);
				match(RIGHT_PAREN);
				}
			}

			setState(2066);
			match(RETURN);
			setState(2067);
			match(SELF);
			setState(2068);
			match(AS);
			setState(2069);
			match(RESULT);
			setState(2072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2070);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2071);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Map_order_function_specContext.
	 */
	public static class Map_order_function_specContext extends ParserRuleContext {
		
		/**
		 * Member.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		
		/**
		 * Type function spec.
		 *
		 * @return the type function spec context
		 */
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		
		/**
		 * Map.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAP() { return getToken(HanaParser.MAP, 0); }
		
		/**
		 * Order.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		
		/**
		 * Instantiates a new map order function spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMap_order_function_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMap_order_function_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Map order function spec.
	 *
	 * @return the map order function spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2074);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2075);
			match(MEMBER);
			setState(2076);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pragma_clauseContext.
	 */
	public static class Pragma_clauseContext extends ParserRuleContext {
		
		/**
		 * Pragma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRAGMA() { return getToken(HanaParser.PRAGMA, 0); }
		
		/**
		 * Restrict references.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESTRICT_REFERENCES() { return getToken(HanaParser.RESTRICT_REFERENCES, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Pragma elements.
		 *
		 * @return the list
		 */
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		
		/**
		 * Pragma elements.
		 *
		 * @param i the i
		 * @return the pragma elements context
		 */
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new pragma clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPragma_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPragma_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pragma clause.
	 *
	 * @return the pragma clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078);
			match(PRAGMA);
			setState(2079);
			match(RESTRICT_REFERENCES);
			setState(2080);
			match(LEFT_PAREN);
			setState(2081);
			pragma_elements();
			setState(2086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2082);
				match(COMMA);
				setState(2083);
				pragma_elements();
				}
				}
				setState(2088);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2089);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pragma_elementsContext.
	 */
	public static class Pragma_elementsContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Instantiates a new pragma elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPragma_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPragma_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pragma elements.
	 *
	 * @return the pragma elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_pragma_elements);
		try {
			setState(2093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2091);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2092);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Type_elements_parameterContext.
	 */
	public static class Type_elements_parameterContext extends ParserRuleContext {
		
		/**
		 * Parameter name.
		 *
		 * @return the parameter name context
		 */
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Instantiates a new type elements parameter context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_elements_parameter(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_elements_parameter(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_elements_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Type elements parameter.
	 *
	 * @return the type elements parameter context
	 * @throws RecognitionException the recognition exception
	 */
	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2095);
			parameter_name();
			setState(2096);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Create_sequenceContext.
	 */
	public static class Create_sequenceContext extends ParserRuleContext {
		
		/**
		 * Creates the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CREATE() { return getToken(HanaParser.CREATE, 0); }
		
		/**
		 * Sequence.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEQUENCE() { return getToken(HanaParser.SEQUENCE, 0); }
		
		/**
		 * Sequence name.
		 *
		 * @return the sequence name context
		 */
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Sequence start clause.
		 *
		 * @return the list
		 */
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		
		/**
		 * Sequence start clause.
		 *
		 * @param i the i
		 * @return the sequence start clause context
		 */
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		
		/**
		 * Sequence spec.
		 *
		 * @return the list
		 */
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		
		/**
		 * Sequence spec.
		 *
		 * @param i the i
		 * @return the sequence spec context
		 */
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		
		/**
		 * Instantiates a new creates the sequence context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCreate_sequence(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCreate_sequence(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Creates the sequence.
	 *
	 * @return the creates the sequence context
	 * @throws RecognitionException the recognition exception
	 */
	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2098);
			match(CREATE);
			setState(2099);
			match(SEQUENCE);
			setState(2100);
			sequence_name();
			setState(2105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (INCREMENT - 178)) | (1L << (MAXVALUE - 178)) | (1L << (MINVALUE - 178)))) != 0) || ((((_la - 253)) & ~0x3f) == 0 && ((1L << (_la - 253)) & ((1L << (NOCACHE - 253)) | (1L << (NOCYCLE - 253)) | (1L << (NOMAXVALUE - 253)) | (1L << (NOMINVALUE - 253)) | (1L << (NOORDER - 253)) | (1L << (ORDER - 253)))) != 0) || _la==START) {
				{
				setState(2103);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(2101);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(2102);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2107);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2108);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sequence_specContext.
	 */
	public static class Sequence_specContext extends ParserRuleContext {
		
		/**
		 * Increment.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INCREMENT() { return getToken(HanaParser.INCREMENT, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Unsigned integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNSIGNED_INTEGER() { return getToken(HanaParser.UNSIGNED_INTEGER, 0); }
		
		/**
		 * Maxvalue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAXVALUE() { return getToken(HanaParser.MAXVALUE, 0); }
		
		/**
		 * Nomaxvalue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOMAXVALUE() { return getToken(HanaParser.NOMAXVALUE, 0); }
		
		/**
		 * Minvalue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINVALUE() { return getToken(HanaParser.MINVALUE, 0); }
		
		/**
		 * Nominvalue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOMINVALUE() { return getToken(HanaParser.NOMINVALUE, 0); }
		
		/**
		 * Cycle.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CYCLE() { return getToken(HanaParser.CYCLE, 0); }
		
		/**
		 * Nocycle.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOCYCLE() { return getToken(HanaParser.NOCYCLE, 0); }
		
		/**
		 * Cache.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CACHE() { return getToken(HanaParser.CACHE, 0); }
		
		/**
		 * Nocache.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOCACHE() { return getToken(HanaParser.NOCACHE, 0); }
		
		/**
		 * Order.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		
		/**
		 * Noorder.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOORDER() { return getToken(HanaParser.NOORDER, 0); }
		
		/**
		 * Instantiates a new sequence spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSequence_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSequence_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sequence spec.
	 *
	 * @return the sequence spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_sequence_spec);
		try {
			setState(2126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2110);
				match(INCREMENT);
				setState(2111);
				match(BY);
				setState(2112);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2113);
				match(MAXVALUE);
				setState(2114);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2115);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2116);
				match(MINVALUE);
				setState(2117);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2118);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2119);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2120);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2121);
				match(CACHE);
				setState(2122);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2123);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2124);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2125);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sequence_start_clauseContext.
	 */
	public static class Sequence_start_clauseContext extends ParserRuleContext {
		
		/**
		 * Start.
		 *
		 * @return the terminal node
		 */
		public TerminalNode START() { return getToken(HanaParser.START, 0); }
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Unsigned integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNSIGNED_INTEGER() { return getToken(HanaParser.UNSIGNED_INTEGER, 0); }
		
		/**
		 * Instantiates a new sequence start clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSequence_start_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSequence_start_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sequence start clause.
	 *
	 * @return the sequence start clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2128);
			match(START);
			setState(2129);
			match(WITH);
			setState(2130);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Invoker_rights_clauseContext.
	 */
	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		
		/**
		 * Authid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTHID() { return getToken(HanaParser.AUTHID, 0); }
		
		/**
		 * Current user.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURRENT_USER() { return getToken(HanaParser.CURRENT_USER, 0); }
		
		/**
		 * Definer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFINER() { return getToken(HanaParser.DEFINER, 0); }
		
		/**
		 * Instantiates a new invoker rights clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInvoker_rights_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInvoker_rights_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Invoker rights clause.
	 *
	 * @return the invoker rights clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2132);
			match(AUTHID);
			setState(2133);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Compiler_parameters_clauseContext.
	 */
	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new compiler parameters clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCompiler_parameters_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCompiler_parameters_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Compiler parameters clause.
	 *
	 * @return the compiler parameters clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135);
			id();
			setState(2136);
			match(EQUALS_OP);
			setState(2137);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Call_specContext.
	 */
	public static class Call_specContext extends ParserRuleContext {
		
		/**
		 * Language.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		
		/**
		 * Java spec.
		 *
		 * @return the java spec context
		 */
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		
		/**
		 * C spec.
		 *
		 * @return the c spec context
		 */
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		
		/**
		 * Instantiates a new call spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_call_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCall_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCall_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Call spec.
	 *
	 * @return the call spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2139);
			match(LANGUAGE);
			setState(2142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(2140);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(2141);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Java_specContext.
	 */
	public static class Java_specContext extends ParserRuleContext {
		
		/**
		 * Java.
		 *
		 * @return the terminal node
		 */
		public TerminalNode JAVA() { return getToken(HanaParser.JAVA, 0); }
		
		/**
		 * Name.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		
		/**
		 * Char string.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		
		/**
		 * Instantiates a new java spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_java_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterJava_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitJava_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Java spec.
	 *
	 * @return the java spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2144);
			match(JAVA);
			setState(2145);
			match(NAME);
			setState(2146);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class C_specContext.
	 */
	public static class C_specContext extends ParserRuleContext {
		
		/**
		 * C letter.
		 *
		 * @return the terminal node
		 */
		public TerminalNode C_LETTER() { return getToken(HanaParser.C_LETTER, 0); }
		
		/**
		 * Library.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIBRARY() { return getToken(HanaParser.LIBRARY, 0); }
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Name.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		
		/**
		 * Char string.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		
		/**
		 * C agent in clause.
		 *
		 * @return the c agent in clause context
		 */
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Context.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONTEXT() { return getToken(HanaParser.CONTEXT, 0); }
		
		/**
		 * C parameters clause.
		 *
		 * @return the c parameters clause context
		 */
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new c spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_c_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterC_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitC_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * C spec.
	 *
	 * @return the c spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2148);
			match(C_LETTER);
			setState(2151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2149);
				match(NAME);
				setState(2150);
				match(CHAR_STRING);
				}
			}

			setState(2153);
			match(LIBRARY);
			setState(2154);
			id();
			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(2155);
				c_agent_in_clause();
				}
			}

			setState(2160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2158);
				match(WITH);
				setState(2159);
				match(CONTEXT);
				}
			}

			setState(2163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(2162);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class C_agent_in_clauseContext.
	 */
	public static class C_agent_in_clauseContext extends ParserRuleContext {
		
		/**
		 * Agent.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AGENT() { return getToken(HanaParser.AGENT, 0); }
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new c agent in clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterC_agent_in_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitC_agent_in_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * C agent in clause.
	 *
	 * @return the c agent in clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2165);
			match(AGENT);
			setState(2166);
			match(IN);
			setState(2167);
			match(LEFT_PAREN);
			setState(2168);
			expression();
			setState(2173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2169);
				match(COMMA);
				setState(2170);
				expression();
				}
				}
				setState(2175);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2176);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class C_parameters_clauseContext.
	 */
	public static class C_parameters_clauseContext extends ParserRuleContext {
		
		/**
		 * Parameters.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PARAMETERS() { return getToken(HanaParser.PARAMETERS, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new c parameters clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterC_parameters_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitC_parameters_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * C parameters clause.
	 *
	 * @return the c parameters clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2178);
			match(PARAMETERS);
			setState(2179);
			match(LEFT_PAREN);
			setState(2191);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2180);
				expression();
				setState(2185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2181);
					match(COMMA);
					setState(2182);
					expression();
					}
					}
					setState(2187);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(2188);
				match(PERIOD);
				setState(2189);
				match(PERIOD);
				setState(2190);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2193);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Default_value_partContext.
	 */
	public static class Default_value_partContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Assign op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASSIGN_OP() { return getToken(HanaParser.ASSIGN_OP, 0); }
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Instantiates a new default value part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDefault_value_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDefault_value_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Default value part.
	 *
	 * @return the default value part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2195);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2196);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Declare_specContext.
	 */
	public static class Declare_specContext extends ParserRuleContext {
		
		/**
		 * Variable declaration.
		 *
		 * @return the variable declaration context
		 */
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		
		/**
		 * Subtype declaration.
		 *
		 * @return the subtype declaration context
		 */
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		
		/**
		 * Cursor declaration.
		 *
		 * @return the cursor declaration context
		 */
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		
		/**
		 * Exception declaration.
		 *
		 * @return the exception declaration context
		 */
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		
		/**
		 * Pragma declaration.
		 *
		 * @return the pragma declaration context
		 */
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		
		/**
		 * Record declaration.
		 *
		 * @return the record declaration context
		 */
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		
		/**
		 * Table declaration.
		 *
		 * @return the table declaration context
		 */
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		
		/**
		 * Creates the procedure body.
		 *
		 * @return the creates the procedure body context
		 */
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		
		/**
		 * Instantiates a new declare spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDeclare_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDeclare_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Declare spec.
	 *
	 * @return the declare spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_declare_spec);
		try {
			setState(2206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2198);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2199);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2200);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2201);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2202);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2203);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2204);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2205);
				create_procedure_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Variable_declarationContext.
	 */
	public static class Variable_declarationContext extends ParserRuleContext {
		
		/**
		 * Variable name.
		 *
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Constant.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTANT() { return getToken(HanaParser.CONSTANT, 0); }
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Default value part.
		 *
		 * @return the default value part context
		 */
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		
		/**
		 * Instantiates a new variable declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVariable_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVariable_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Variable declaration.
	 *
	 * @return the variable declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2208);
			variable_name();
			setState(2210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				setState(2209);
				match(CONSTANT);
				}
				break;
			}
			setState(2212);
			type_spec();
			setState(2215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2213);
				match(NOT);
				setState(2214);
				match(NULL);
				}
			}

			setState(2218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2217);
				default_value_part();
				}
			}

			setState(2220);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Subtype_declarationContext.
	 */
	public static class Subtype_declarationContext extends ParserRuleContext {
		
		/**
		 * Subtype.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUBTYPE() { return getToken(HanaParser.SUBTYPE, 0); }
		
		/**
		 * Type name.
		 *
		 * @return the type name context
		 */
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Range.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RANGE() { return getToken(HanaParser.RANGE, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Instantiates a new subtype declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubtype_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubtype_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Subtype declaration.
	 *
	 * @return the subtype declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2222);
			match(SUBTYPE);
			setState(2223);
			type_name();
			setState(2224);
			match(IS);
			setState(2225);
			type_spec();
			setState(2231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2226);
				match(RANGE);
				setState(2227);
				expression();
				setState(2228);
				match(T__0);
				setState(2229);
				expression();
				}
			}

			setState(2235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2233);
				match(NOT);
				setState(2234);
				match(NULL);
				}
			}

			setState(2237);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cursor_declarationContext.
	 */
	public static class Cursor_declarationContext extends ParserRuleContext {
		
		/**
		 * Cursor.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		
		/**
		 * Cursor name.
		 *
		 * @return the cursor name context
		 */
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Parameter spec.
		 *
		 * @return the list
		 */
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		
		/**
		 * Parameter spec.
		 *
		 * @param i the i
		 * @return the parameter spec context
		 */
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new cursor declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cursor declaration.
	 *
	 * @return the cursor declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239);
			match(CURSOR);
			setState(2240);
			cursor_name();
			setState(2252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2241);
				match(LEFT_PAREN);
				setState(2242);
				parameter_spec();
				setState(2247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2243);
					match(COMMA);
					setState(2244);
					parameter_spec();
					}
					}
					setState(2249);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2250);
				match(RIGHT_PAREN);
				}
			}

			setState(2256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2254);
				match(RETURN);
				setState(2255);
				type_spec();
				}
			}

			setState(2260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2258);
				match(IS);
				setState(2259);
				select_statement();
				}
			}

			setState(2262);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Parameter_specContext.
	 */
	public static class Parameter_specContext extends ParserRuleContext {
		
		/**
		 * Parameter name.
		 *
		 * @return the parameter name context
		 */
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Default value part.
		 *
		 * @return the default value part context
		 */
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Instantiates a new parameter spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParameter_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParameter_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Parameter spec.
	 *
	 * @return the parameter spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2264);
			parameter_name();
			setState(2269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIGINT) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SECONDDATE - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2265);
					match(IN);
					}
				}

				setState(2268);
				type_spec();
				}
			}

			setState(2272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2271);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Exception_declarationContext.
	 */
	public static class Exception_declarationContext extends ParserRuleContext {
		
		/**
		 * Exception name.
		 *
		 * @return the exception name context
		 */
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		
		/**
		 * Exception.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCEPTION() { return getToken(HanaParser.EXCEPTION, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new exception declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Exception declaration.
	 *
	 * @return the exception declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2274);
			exception_name();
			setState(2275);
			match(EXCEPTION);
			setState(2276);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pragma_declarationContext.
	 */
	public static class Pragma_declarationContext extends ParserRuleContext {
		
		/** The id 1. */
		public IdContext id1;
		
		/**
		 * Pragma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRAGMA() { return getToken(HanaParser.PRAGMA, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Serially reusable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SERIALLY_REUSABLE() { return getToken(HanaParser.SERIALLY_REUSABLE, 0); }
		
		/**
		 * Autonomous transaction.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(HanaParser.AUTONOMOUS_TRANSACTION, 0); }
		
		/**
		 * Exception init.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCEPTION_INIT() { return getToken(HanaParser.EXCEPTION_INIT, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Exception name.
		 *
		 * @return the exception name context
		 */
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Numeric negative.
		 *
		 * @return the numeric negative context
		 */
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Inline.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INLINE() { return getToken(HanaParser.INLINE, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Restrict references.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESTRICT_REFERENCES() { return getToken(HanaParser.RESTRICT_REFERENCES, 0); }
		
		/**
		 * Id.
		 *
		 * @return the list
		 */
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		
		/**
		 * Id.
		 *
		 * @param i the i
		 * @return the id context
		 */
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Instantiates a new pragma declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPragma_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPragma_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pragma declaration.
	 *
	 * @return the pragma declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2278);
			match(PRAGMA);
			setState(2309);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2279);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2280);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2281);
				match(EXCEPTION_INIT);
				setState(2282);
				match(LEFT_PAREN);
				setState(2283);
				exception_name();
				setState(2284);
				match(COMMA);
				setState(2285);
				numeric_negative();
				setState(2286);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2288);
				match(INLINE);
				setState(2289);
				match(LEFT_PAREN);
				setState(2290);
				((Pragma_declarationContext)_localctx).id1 = id();
				setState(2291);
				match(COMMA);
				setState(2292);
				expression();
				setState(2293);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2295);
				match(RESTRICT_REFERENCES);
				setState(2296);
				match(LEFT_PAREN);
				setState(2299);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREAK:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE_REGEXPR:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TINYINT:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2297);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(2298);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2303); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2301);
					match(COMMA);
					setState(2302);
					id();
					}
					}
					setState(2305); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2307);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2311);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Record_declarationContext.
	 */
	public static class Record_declarationContext extends ParserRuleContext {
		
		/**
		 * Record type dec.
		 *
		 * @return the record type dec context
		 */
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		
		/**
		 * Record var dec.
		 *
		 * @return the record var dec context
		 */
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		
		/**
		 * Instantiates a new record declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRecord_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRecord_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRecord_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Record declaration.
	 *
	 * @return the record declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_record_declaration);
		try {
			setState(2315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2313);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2314);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Record_type_decContext.
	 */
	public static class Record_type_decContext extends ParserRuleContext {
		
		/**
		 * Type.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TYPE() { return getToken(HanaParser.TYPE, 0); }
		
		/**
		 * Type name.
		 *
		 * @return the type name context
		 */
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Record.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RECORD() { return getToken(HanaParser.RECORD, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Field spec.
		 *
		 * @return the list
		 */
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		
		/**
		 * Field spec.
		 *
		 * @param i the i
		 * @return the field spec context
		 */
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Ref.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REF() { return getToken(HanaParser.REF, 0); }
		
		/**
		 * Cursor.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Instantiates a new record type dec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRecord_type_dec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRecord_type_dec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRecord_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Record type dec.
	 *
	 * @return the record type dec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2317);
			match(TYPE);
			setState(2318);
			type_name();
			setState(2319);
			match(IS);
			setState(2338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2320);
				match(RECORD);
				setState(2321);
				match(LEFT_PAREN);
				setState(2322);
				field_spec();
				setState(2327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2323);
					match(COMMA);
					setState(2324);
					field_spec();
					}
					}
					setState(2329);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2330);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2332);
				match(REF);
				setState(2333);
				match(CURSOR);
				setState(2336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2334);
					match(RETURN);
					setState(2335);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2340);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Field_specContext.
	 */
	public static class Field_specContext extends ParserRuleContext {
		
		/**
		 * Column name.
		 *
		 * @return the column name context
		 */
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Default value part.
		 *
		 * @return the default value part context
		 */
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		
		/**
		 * Instantiates a new field spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_field_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterField_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitField_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Field spec.
	 *
	 * @return the field spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			column_name();
			setState(2344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIGINT) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SECONDDATE - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2343);
				type_spec();
				}
			}

			setState(2348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2346);
				match(NOT);
				setState(2347);
				match(NULL);
				}
			}

			setState(2351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2350);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Record_var_decContext.
	 */
	public static class Record_var_decContext extends ParserRuleContext {
		
		/**
		 * Record name.
		 *
		 * @return the record name context
		 */
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		
		/**
		 * Type name.
		 *
		 * @return the type name context
		 */
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Percent rowtype.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENT_ROWTYPE() { return getToken(HanaParser.PERCENT_ROWTYPE, 0); }
		
		/**
		 * Percent type.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENT_TYPE() { return getToken(HanaParser.PERCENT_TYPE, 0); }
		
		/**
		 * Instantiates a new record var dec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRecord_var_dec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRecord_var_dec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRecord_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Record var dec.
	 *
	 * @return the record var dec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2353);
			record_name();
			setState(2354);
			type_name();
			setState(2355);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2356);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_declarationContext.
	 */
	public static class Table_declarationContext extends ParserRuleContext {
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Table type dec.
		 *
		 * @return the table type dec context
		 */
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		
		/**
		 * Table var dec.
		 *
		 * @return the table var dec context
		 */
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		
		/**
		 * Instantiates a new table declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table declaration.
	 *
	 * @return the table declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2358);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(2359);
				table_var_dec();
				}
				break;
			}
			setState(2362);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_type_decContext.
	 */
	public static class Table_type_decContext extends ParserRuleContext {
		
		/**
		 * Type.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TYPE() { return getToken(HanaParser.TYPE, 0); }
		
		/**
		 * Type name.
		 *
		 * @return the type name context
		 */
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * Of.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Varray type def.
		 *
		 * @return the varray type def context
		 */
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		
		/**
		 * Table indexed by part.
		 *
		 * @return the table indexed by part context
		 */
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Instantiates a new table type dec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_type_dec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_type_dec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table type dec.
	 *
	 * @return the table type dec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364);
			match(TYPE);
			setState(2365);
			type_name();
			setState(2366);
			match(IS);
			setState(2378);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2367);
				match(TABLE);
				setState(2368);
				match(OF);
				setState(2369);
				type_spec();
				setState(2371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2370);
					table_indexed_by_part();
					}
				}

				setState(2375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2373);
					match(NOT);
					setState(2374);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2377);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_indexed_by_partContext.
	 */
	public static class Table_indexed_by_partContext extends ParserRuleContext {
		
		/** The idx 1. */
		public Token idx1;
		
		/** The idx 2. */
		public Token idx2;
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Indexed.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDEXED() { return getToken(HanaParser.INDEXED, 0); }
		
		/**
		 * Index.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDEX() { return getToken(HanaParser.INDEX, 0); }
		
		/**
		 * Instantiates a new table indexed by part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_indexed_by_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_indexed_by_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table indexed by part.
	 *
	 * @return the table indexed by part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2380);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2381);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2384);
			match(BY);
			setState(2385);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Varray_type_defContext.
	 */
	public static class Varray_type_defContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Of.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Varray.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARRAY() { return getToken(HanaParser.VARRAY, 0); }
		
		/**
		 * Varying.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARYING() { return getToken(HanaParser.VARYING, 0); }
		
		/**
		 * Array.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ARRAY() { return getToken(HanaParser.ARRAY, 0); }
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Instantiates a new varray type def context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVarray_type_def(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVarray_type_def(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Varray type def.
	 *
	 * @return the varray type def context
	 * @throws RecognitionException the recognition exception
	 */
	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2387);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2388);
				match(VARYING);
				setState(2389);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2392);
			match(LEFT_PAREN);
			setState(2393);
			expression();
			setState(2394);
			match(RIGHT_PAREN);
			setState(2395);
			match(OF);
			setState(2396);
			type_spec();
			setState(2399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2397);
				match(NOT);
				setState(2398);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_var_decContext.
	 */
	public static class Table_var_decContext extends ParserRuleContext {
		
		/**
		 * Table var name.
		 *
		 * @return the table var name context
		 */
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Instantiates a new table var dec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_var_dec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_var_dec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table var dec.
	 *
	 * @return the table var dec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2401);
			table_var_name();
			setState(2402);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Seq_of_statementsContext.
	 */
	public static class Seq_of_statementsContext extends ParserRuleContext {
		
		/**
		 * Statement.
		 *
		 * @return the list
		 */
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		
		/**
		 * Statement.
		 *
		 * @param i the i
		 * @return the statement context
		 */
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		
		/**
		 * Label declaration.
		 *
		 * @return the list
		 */
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		
		/**
		 * Label declaration.
		 *
		 * @param i the i
		 * @return the label declaration context
		 */
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SEMICOLON() { return getTokens(HanaParser.SEMICOLON); }
		
		/**
		 * Semicolon.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON(int i) {
			return getToken(HanaParser.SEMICOLON, i);
		}
		
		/**
		 * Eof.
		 *
		 * @return the list
		 */
		public List<TerminalNode> EOF() { return getTokens(HanaParser.EOF); }
		
		/**
		 * Eof.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode EOF(int i) {
			return getToken(HanaParser.EOF, i);
		}
		
		/**
		 * Instantiates a new seq of statements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSeq_of_statements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSeq_of_statements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Seq of statements.
	 *
	 * @return the seq of statements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_seq_of_statements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2408); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2408);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__5:
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREAK:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE_REGEXPR:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TINYINT:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case SQL_ERROR_CODE:
				case SQL_ERROR_MESSAGE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2404);
					statement();
					setState(2405);
					_la = _input.LA(1);
					if ( !(_la==EOF || _la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LESS_THAN_OP:
					{
					setState(2407);
					label_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2410); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITH - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (LESS_THAN_OP - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Label_declarationContext.
	 */
	public static class Label_declarationContext extends ParserRuleContext {
		
		/** The ltp 1. */
		public Token ltp1;
		
		/**
		 * Less than op.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LESS_THAN_OP() { return getTokens(HanaParser.LESS_THAN_OP); }
		
		/**
		 * Less than op.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OP(int i) {
			return getToken(HanaParser.LESS_THAN_OP, i);
		}
		
		/**
		 * Label name.
		 *
		 * @return the label name context
		 */
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		
		/**
		 * Greater than op.
		 *
		 * @return the list
		 */
		public List<TerminalNode> GREATER_THAN_OP() { return getTokens(HanaParser.GREATER_THAN_OP); }
		
		/**
		 * Greater than op.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OP(int i) {
			return getToken(HanaParser.GREATER_THAN_OP, i);
		}
		
		/**
		 * Instantiates a new label declaration context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLabel_declaration(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLabel_declaration(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Label declaration.
	 *
	 * @return the label declaration context
	 * @throws RecognitionException the recognition exception
	 */
	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2412);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2413);
			match(LESS_THAN_OP);
			setState(2414);
			label_name();
			setState(2415);
			match(GREATER_THAN_OP);
			setState(2416);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class StatementContext.
	 */
	public static class StatementContext extends ParserRuleContext {
		
		/**
		 * Creates the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CREATE() { return getToken(HanaParser.CREATE, 0); }
		
		/**
		 * Swallow to semi.
		 *
		 * @return the swallow to semi context
		 */
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		
		/**
		 * Alter.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALTER() { return getToken(HanaParser.ALTER, 0); }
		
		/**
		 * Grant.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GRANT() { return getToken(HanaParser.GRANT, 0); }
		
		/**
		 * Truncate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRUNCATE() { return getToken(HanaParser.TRUNCATE, 0); }
		
		/**
		 * Body.
		 *
		 * @return the body context
		 */
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		
		/**
		 * Block.
		 *
		 * @return the block context
		 */
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		
		/**
		 * Assignment statement.
		 *
		 * @return the assignment statement context
		 */
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		
		/**
		 * Continue statement.
		 *
		 * @return the continue statement context
		 */
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		
		/**
		 * Exit statement.
		 *
		 * @return the exit statement context
		 */
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		
		/**
		 * Goto statement.
		 *
		 * @return the goto statement context
		 */
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		
		/**
		 * If statement.
		 *
		 * @return the if statement context
		 */
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		
		/**
		 * Loop statement.
		 *
		 * @return the loop statement context
		 */
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		
		/**
		 * Forall statement.
		 *
		 * @return the forall statement context
		 */
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		
		/**
		 * Null statement.
		 *
		 * @return the null statement context
		 */
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		
		/**
		 * Raise statement.
		 *
		 * @return the raise statement context
		 */
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		
		/**
		 * Return statement.
		 *
		 * @return the return statement context
		 */
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		
		/**
		 * Case statement.
		 *
		 * @return the case statement context
		 */
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		
		/**
		 * Sql statement.
		 *
		 * @return the sql statement context
		 */
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		
		/**
		 * Function call.
		 *
		 * @return the function call context
		 */
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		
		/**
		 * Instantiates a new statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStatement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStatement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Statement.
	 *
	 * @return the statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_statement);
		try {
			setState(2441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2418);
				match(CREATE);
				setState(2419);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2420);
				match(ALTER);
				setState(2421);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2422);
				match(GRANT);
				setState(2423);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2424);
				match(TRUNCATE);
				setState(2425);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2426);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2427);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2428);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2429);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2430);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2431);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2432);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2433);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2434);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2435);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2436);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2437);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2438);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2439);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2440);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Assignment_statementContext.
	 */
	public static class Assignment_statementContext extends ParserRuleContext {
		
		/**
		 * Assign op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASSIGN_OP() { return getToken(HanaParser.ASSIGN_OP, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * General element.
		 *
		 * @return the general element context
		 */
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Instantiates a new assignment statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAssignment_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAssignment_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Assignment statement.
	 *
	 * @return the assignment statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2443);
				general_element();
				}
				break;
			case T__5:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case BINDVAR:
			case COLON:
				{
				setState(2444);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2447);
			match(ASSIGN_OP);
			setState(2448);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Continue_statementContext.
	 */
	public static class Continue_statementContext extends ParserRuleContext {
		
		/**
		 * Continue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONTINUE() { return getToken(HanaParser.CONTINUE, 0); }
		
		/**
		 * Label name.
		 *
		 * @return the label name context
		 */
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		
		/**
		 * When.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Instantiates a new continue statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterContinue_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitContinue_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Continue statement.
	 *
	 * @return the continue statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2450);
			match(CONTINUE);
			setState(2452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				setState(2451);
				label_name();
				}
				break;
			}
			setState(2456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				setState(2454);
				match(WHEN);
				setState(2455);
				condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Exit_statementContext.
	 */
	public static class Exit_statementContext extends ParserRuleContext {
		
		/**
		 * Exit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		
		/**
		 * Label name.
		 *
		 * @return the label name context
		 */
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		
		/**
		 * When.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Instantiates a new exit statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExit_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExit_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Exit statement.
	 *
	 * @return the exit statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_exit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2458);
			match(EXIT);
			setState(2460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				setState(2459);
				label_name();
				}
				break;
			}
			setState(2464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(2462);
				match(WHEN);
				setState(2463);
				condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Goto_statementContext.
	 */
	public static class Goto_statementContext extends ParserRuleContext {
		
		/**
		 * Goto.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GOTO() { return getToken(HanaParser.GOTO, 0); }
		
		/**
		 * Label name.
		 *
		 * @return the label name context
		 */
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new goto statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGoto_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGoto_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Goto statement.
	 *
	 * @return the goto statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2466);
			match(GOTO);
			setState(2467);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class If_statementContext.
	 */
	public static class If_statementContext extends ParserRuleContext {
		
		/**
		 * If.
		 *
		 * @return the list
		 */
		public List<TerminalNode> IF() { return getTokens(HanaParser.IF); }
		
		/**
		 * If.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode IF(int i) {
			return getToken(HanaParser.IF, i);
		}
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Elsif part.
		 *
		 * @return the list
		 */
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		
		/**
		 * Elsif part.
		 *
		 * @param i the i
		 * @return the elsif part context
		 */
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		
		/**
		 * Else part.
		 *
		 * @return the else part context
		 */
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		
		/**
		 * Instantiates a new if statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_if_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterIf_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitIf_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * If statement.
	 *
	 * @return the if statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2469);
			match(IF);
			setState(2470);
			condition();
			setState(2471);
			match(THEN);
			setState(2472);
			seq_of_statements();
			setState(2476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2473);
				elsif_part();
				}
				}
				setState(2478);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2479);
				else_part();
				}
			}

			setState(2482);
			match(END);
			setState(2483);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Elsif_partContext.
	 */
	public static class Elsif_partContext extends ParserRuleContext {
		
		/**
		 * Elsif.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELSIF() { return getToken(HanaParser.ELSIF, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * Instantiates a new elsif part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterElsif_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitElsif_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Elsif part.
	 *
	 * @return the elsif part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2485);
			match(ELSIF);
			setState(2486);
			condition();
			setState(2487);
			match(THEN);
			setState(2488);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Else_partContext.
	 */
	public static class Else_partContext extends ParserRuleContext {
		
		/**
		 * Else.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * Instantiates a new else part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_else_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterElse_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitElse_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Else part.
	 *
	 * @return the else part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2490);
			match(ELSE);
			setState(2491);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Loop_statementContext.
	 */
	public static class Loop_statementContext extends ParserRuleContext {
		
		/**
		 * Loop.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LOOP() { return getTokens(HanaParser.LOOP); }
		
		/**
		 * Loop.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LOOP(int i) {
			return getToken(HanaParser.LOOP, i);
		}
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Label name.
		 *
		 * @return the list
		 */
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		
		/**
		 * Label name.
		 *
		 * @param i the i
		 * @return the label name context
		 */
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		
		/**
		 * While.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHILE() { return getToken(HanaParser.WHILE, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Cursor loop param.
		 *
		 * @return the cursor loop param context
		 */
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		
		/**
		 * Instantiates a new loop statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLoop_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLoop_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Loop statement.
	 *
	 * @return the loop statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_loop_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(2493);
				label_name();
				}
				break;
			}
			setState(2500);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2496);
				match(WHILE);
				setState(2497);
				condition();
				}
				break;
			case FOR:
				{
				setState(2498);
				match(FOR);
				setState(2499);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(2502);
			match(LOOP);
			setState(2503);
			seq_of_statements();
			setState(2504);
			match(END);
			setState(2505);
			match(LOOP);
			setState(2507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2506);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cursor_loop_paramContext.
	 */
	public static class Cursor_loop_paramContext extends ParserRuleContext {
		
		/**
		 * Index name.
		 *
		 * @return the index name context
		 */
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Lower bound.
		 *
		 * @return the lower bound context
		 */
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		
		/**
		 * Upper bound.
		 *
		 * @return the upper bound context
		 */
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		
		/**
		 * Reverse.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REVERSE() { return getToken(HanaParser.REVERSE, 0); }
		
		/**
		 * Record name.
		 *
		 * @return the record name context
		 */
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		
		/**
		 * Cursor name.
		 *
		 * @return the cursor name context
		 */
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Instantiates a new cursor loop param context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_loop_param(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_loop_param(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cursor loop param.
	 *
	 * @return the cursor loop param context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2509);
				index_name();
				setState(2510);
				match(IN);
				setState(2512);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(2511);
					match(REVERSE);
					}
					break;
				}
				setState(2514);
				lower_bound();
				setState(2515);
				match(T__0);
				setState(2516);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2518);
				record_name();
				setState(2519);
				match(IN);
				setState(2528);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREAK:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE_REGEXPR:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TINYINT:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(2520);
					cursor_name();
					setState(2522);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2521);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2524);
					match(LEFT_PAREN);
					setState(2525);
					select_statement();
					setState(2526);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Forall_statementContext.
	 */
	public static class Forall_statementContext extends ParserRuleContext {
		
		/**
		 * Forall.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FORALL() { return getToken(HanaParser.FORALL, 0); }
		
		/**
		 * Index name.
		 *
		 * @return the index name context
		 */
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Bounds clause.
		 *
		 * @return the bounds clause context
		 */
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		
		/**
		 * Sql statement.
		 *
		 * @return the sql statement context
		 */
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		
		/**
		 * Save.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SAVE() { return getToken(HanaParser.SAVE, 0); }
		
		/**
		 * Exceptions.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCEPTIONS() { return getToken(HanaParser.EXCEPTIONS, 0); }
		
		/**
		 * Instantiates a new forall statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterForall_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitForall_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Forall statement.
	 *
	 * @return the forall statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_forall_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2532);
			match(FORALL);
			setState(2533);
			index_name();
			setState(2534);
			match(IN);
			setState(2535);
			bounds_clause();
			setState(2536);
			sql_statement();
			setState(2539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2537);
				match(SAVE);
				setState(2538);
				match(EXCEPTIONS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Bounds_clauseContext.
	 */
	public static class Bounds_clauseContext extends ParserRuleContext {
		
		/**
		 * Lower bound.
		 *
		 * @return the lower bound context
		 */
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		
		/**
		 * Upper bound.
		 *
		 * @return the upper bound context
		 */
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		
		/**
		 * Indices.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDICES() { return getToken(HanaParser.INDICES, 0); }
		
		/**
		 * Of.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		
		/**
		 * Collection name.
		 *
		 * @return the collection name context
		 */
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		
		/**
		 * Between bound.
		 *
		 * @return the between bound context
		 */
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		
		/**
		 * Values.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUES() { return getToken(HanaParser.VALUES, 0); }
		
		/**
		 * Index name.
		 *
		 * @return the index name context
		 */
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new bounds clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBounds_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBounds_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Bounds clause.
	 *
	 * @return the bounds clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_bounds_clause);
		int _la;
		try {
			setState(2554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2541);
				lower_bound();
				setState(2542);
				match(T__0);
				setState(2543);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2545);
				match(INDICES);
				setState(2546);
				match(OF);
				setState(2547);
				collection_name();
				setState(2549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2548);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2551);
				match(VALUES);
				setState(2552);
				match(OF);
				setState(2553);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Between_boundContext.
	 */
	public static class Between_boundContext extends ParserRuleContext {
		
		/**
		 * Between.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		
		/**
		 * Lower bound.
		 *
		 * @return the lower bound context
		 */
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		
		/**
		 * And.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		
		/**
		 * Upper bound.
		 *
		 * @return the upper bound context
		 */
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		
		/**
		 * Instantiates a new between bound context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_between_bound; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBetween_bound(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBetween_bound(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Between bound.
	 *
	 * @return the between bound context
	 * @throws RecognitionException the recognition exception
	 */
	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2556);
			match(BETWEEN);
			setState(2557);
			lower_bound();
			setState(2558);
			match(AND);
			setState(2559);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Lower_boundContext.
	 */
	public static class Lower_boundContext extends ParserRuleContext {
		
		/**
		 * Concatenation.
		 *
		 * @return the concatenation context
		 */
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		
		/**
		 * Instantiates a new lower bound context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLower_bound(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLower_bound(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Lower bound.
	 *
	 * @return the lower bound context
	 * @throws RecognitionException the recognition exception
	 */
	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2561);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Upper_boundContext.
	 */
	public static class Upper_boundContext extends ParserRuleContext {
		
		/**
		 * Concatenation.
		 *
		 * @return the concatenation context
		 */
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		
		/**
		 * Instantiates a new upper bound context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUpper_bound(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUpper_bound(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Upper bound.
	 *
	 * @return the upper bound context
	 * @throws RecognitionException the recognition exception
	 */
	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2563);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Null_statementContext.
	 */
	public static class Null_statementContext extends ParserRuleContext {
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Instantiates a new null statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_null_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNull_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNull_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Null statement.
	 *
	 * @return the null statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2565);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Raise_statementContext.
	 */
	public static class Raise_statementContext extends ParserRuleContext {
		
		/**
		 * Raise.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RAISE() { return getToken(HanaParser.RAISE, 0); }
		
		/**
		 * Exception name.
		 *
		 * @return the exception name context
		 */
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new raise statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRaise_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRaise_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Raise statement.
	 *
	 * @return the raise statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_raise_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2567);
			match(RAISE);
			setState(2569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				setState(2568);
				exception_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Return_statementContext.
	 */
	public static class Return_statementContext extends ParserRuleContext {
		
		/** The cn 1. */
		public ConditionContext cn1;
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Instantiates a new return statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_return_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReturn_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReturn_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Return statement.
	 *
	 * @return the return statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_return_statement);
		try {
			setState(2577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2571);
				match(RETURN);
				setState(2573);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					setState(2572);
					((Return_statementContext)_localctx).cn1 = condition();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2575);
				match(RETURN);
				setState(2576);
				select_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Function_callContext.
	 */
	public static class Function_callContext extends ParserRuleContext {
		
		/**
		 * Routine name.
		 *
		 * @return the routine name context
		 */
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		
		/**
		 * Call.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CALL() { return getToken(HanaParser.CALL, 0); }
		
		/**
		 * Function argument.
		 *
		 * @return the function argument context
		 */
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		
		/**
		 * Instantiates a new function call context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_function_call; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_call(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_call(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Function call.
	 *
	 * @return the function call context
	 * @throws RecognitionException the recognition exception
	 */
	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_function_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				setState(2579);
				match(CALL);
				}
				break;
			}
			setState(2582);
			routine_name();
			setState(2584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				setState(2583);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class BodyContext.
	 */
	public static class BodyContext extends ParserRuleContext {
		
		/**
		 * Begin.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BEGIN() { return getToken(HanaParser.BEGIN, 0); }
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Exception clause.
		 *
		 * @return the exception clause context
		 */
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		
		/**
		 * Label name.
		 *
		 * @return the label name context
		 */
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new body context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_body; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBody(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBody(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Body.
	 *
	 * @return the body context
	 * @throws RecognitionException the recognition exception
	 */
	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586);
			match(BEGIN);
			setState(2587);
			seq_of_statements();
			setState(2589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2588);
				exception_clause();
				}
			}

			setState(2591);
			match(END);
			setState(2593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				setState(2592);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Exception_clauseContext.
	 */
	public static class Exception_clauseContext extends ParserRuleContext {
		
		/**
		 * Exception.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCEPTION() { return getToken(HanaParser.EXCEPTION, 0); }
		
		/**
		 * Exception handler.
		 *
		 * @return the list
		 */
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		
		/**
		 * Exception handler.
		 *
		 * @param i the i
		 * @return the exception handler context
		 */
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		
		/**
		 * Instantiates a new exception clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Exception clause.
	 *
	 * @return the exception clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2595);
			match(EXCEPTION);
			setState(2597); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2596);
				exception_handler();
				}
				}
				setState(2599); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Exception_handlerContext.
	 */
	public static class Exception_handlerContext extends ParserRuleContext {
		
		/**
		 * When.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		
		/**
		 * Exception name.
		 *
		 * @return the list
		 */
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		
		/**
		 * Exception name.
		 *
		 * @param i the i
		 * @return the exception name context
		 */
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * Or.
		 *
		 * @return the list
		 */
		public List<TerminalNode> OR() { return getTokens(HanaParser.OR); }
		
		/**
		 * Or.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode OR(int i) {
			return getToken(HanaParser.OR, i);
		}
		
		/**
		 * Instantiates a new exception handler context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_handler(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_handler(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Exception handler.
	 *
	 * @return the exception handler context
	 * @throws RecognitionException the recognition exception
	 */
	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2601);
			match(WHEN);
			setState(2602);
			exception_name();
			setState(2607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2603);
				match(OR);
				setState(2604);
				exception_name();
				}
				}
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2610);
			match(THEN);
			setState(2611);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Trigger_blockContext.
	 */
	public static class Trigger_blockContext extends ParserRuleContext {
		
		/**
		 * Body.
		 *
		 * @return the body context
		 */
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Declare spec.
		 *
		 * @return the list
		 */
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		
		/**
		 * Declare spec.
		 *
		 * @param i the i
		 * @return the declare spec context
		 */
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		
		/**
		 * Instantiates a new trigger block context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTrigger_block(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTrigger_block(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Trigger block.
	 *
	 * @return the trigger block context
	 * @throws RecognitionException the recognition exception
	 */
	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2613);
					match(DECLARE);
					}
				}

				setState(2617); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2616);
					declare_spec();
					}
					}
					setState(2619); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
				}
			}

			setState(2623);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class BlockContext.
	 */
	public static class BlockContext extends ParserRuleContext {
		
		/**
		 * Body.
		 *
		 * @return the body context
		 */
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Declare spec.
		 *
		 * @return the list
		 */
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		
		/**
		 * Declare spec.
		 *
		 * @param i the i
		 * @return the declare spec context
		 */
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		
		/**
		 * Instantiates a new block context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_block; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBlock(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBlock(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Block.
	 *
	 * @return the block context
	 * @throws RecognitionException the recognition exception
	 */
	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2625);
				match(DECLARE);
				}
			}

			setState(2629); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2628);
				declare_spec();
				}
				}
				setState(2631); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
			setState(2633);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sql_statementContext.
	 */
	public static class Sql_statementContext extends ParserRuleContext {
		
		/**
		 * Execute immediate.
		 *
		 * @return the execute immediate context
		 */
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		
		/**
		 * Data manipulation language statements.
		 *
		 * @return the data manipulation language statements context
		 */
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		
		/**
		 * Cursor manipulation statements.
		 *
		 * @return the cursor manipulation statements context
		 */
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		
		/**
		 * Transaction control statements.
		 *
		 * @return the transaction control statements context
		 */
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		
		/**
		 * Instantiates a new sql statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sql statement.
	 *
	 * @return the sql statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_sql_statement);
		try {
			setState(2639);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2635);
				execute_immediate();
				}
				break;
			case DECLARE:
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2636);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2637);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2638);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Execute_immediateContext.
	 */
	public static class Execute_immediateContext extends ParserRuleContext {
		
		/**
		 * Execute.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXECUTE() { return getToken(HanaParser.EXECUTE, 0); }
		
		/**
		 * Immediate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IMMEDIATE() { return getToken(HanaParser.IMMEDIATE, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Into clause.
		 *
		 * @return the into clause context
		 */
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		
		/**
		 * Using clause.
		 *
		 * @return the using clause context
		 */
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		
		/**
		 * Dynamic returning clause.
		 *
		 * @return the dynamic returning clause context
		 */
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new execute immediate context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExecute_immediate(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExecute_immediate(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Execute immediate.
	 *
	 * @return the execute immediate context
	 * @throws RecognitionException the recognition exception
	 */
	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_execute_immediate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2641);
			match(EXECUTE);
			setState(2642);
			match(IMMEDIATE);
			setState(2643);
			expression();
			setState(2653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				setState(2644);
				into_clause();
				setState(2646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(2645);
					using_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2648);
				using_clause();
				setState(2650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(2649);
					dynamic_returning_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(2652);
				dynamic_returning_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Dynamic_returning_clauseContext.
	 */
	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		
		/**
		 * Into clause.
		 *
		 * @return the into clause context
		 */
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		
		/**
		 * Returning.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURNING() { return getToken(HanaParser.RETURNING, 0); }
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Instantiates a new dynamic returning clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDynamic_returning_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDynamic_returning_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Dynamic returning clause.
	 *
	 * @return the dynamic returning clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2655);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2656);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Data_manipulation_language_statementsContext.
	 */
	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		
		/**
		 * Merge statement.
		 *
		 * @return the merge statement context
		 */
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		
		/**
		 * Lock table statement.
		 *
		 * @return the lock table statement context
		 */
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		
		/**
		 * Declare statement.
		 *
		 * @return the declare statement context
		 */
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		
		/**
		 * Exception statement.
		 *
		 * @return the exception statement context
		 */
		public Exception_statementContext exception_statement() {
			return getRuleContext(Exception_statementContext.class,0);
		}
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Update statement.
		 *
		 * @return the update statement context
		 */
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		
		/**
		 * Delete statement.
		 *
		 * @return the delete statement context
		 */
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		
		/**
		 * Insert statement.
		 *
		 * @return the insert statement context
		 */
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		
		/**
		 * Explain statement.
		 *
		 * @return the explain statement context
		 */
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		
		/**
		 * Instantiates a new data manipulation language statements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterData_manipulation_language_statements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitData_manipulation_language_statements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Data manipulation language statements.
	 *
	 * @return the data manipulation language statements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_data_manipulation_language_statements);
		try {
			setState(2667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2658);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2659);
				lock_table_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2660);
				declare_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2661);
				exception_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2662);
				select_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2663);
				update_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2664);
				delete_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2665);
				insert_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2666);
				explain_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cursor_manipulation_statementsContext.
	 */
	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		
		/**
		 * Close statement.
		 *
		 * @return the close statement context
		 */
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		
		/**
		 * Open statement.
		 *
		 * @return the open statement context
		 */
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		
		/**
		 * Fetch statement.
		 *
		 * @return the fetch statement context
		 */
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		
		/**
		 * Open for statement.
		 *
		 * @return the open for statement context
		 */
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		
		/**
		 * Instantiates a new cursor manipulation statements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_manipulation_statements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_manipulation_statements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cursor manipulation statements.
	 *
	 * @return the cursor manipulation statements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_cursor_manipulation_statements);
		try {
			setState(2673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2669);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2670);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2671);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2672);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Close_statementContext.
	 */
	public static class Close_statementContext extends ParserRuleContext {
		
		/**
		 * Close.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CLOSE() { return getToken(HanaParser.CLOSE, 0); }
		
		/**
		 * Cursor name.
		 *
		 * @return the cursor name context
		 */
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new close statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_close_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterClose_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitClose_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Close statement.
	 *
	 * @return the close statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2675);
			match(CLOSE);
			setState(2676);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Open_statementContext.
	 */
	public static class Open_statementContext extends ParserRuleContext {
		
		/**
		 * Open.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OPEN() { return getToken(HanaParser.OPEN, 0); }
		
		/**
		 * Cursor name.
		 *
		 * @return the cursor name context
		 */
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Instantiates a new open statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_open_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOpen_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOpen_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Open statement.
	 *
	 * @return the open statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_open_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2678);
			match(OPEN);
			setState(2679);
			cursor_name();
			setState(2681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2680);
				expression_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Fetch_statementContext.
	 */
	public static class Fetch_statementContext extends ParserRuleContext {
		
		/** The it 1. */
		public Token it1;
		
		/**
		 * Fetch.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FETCH() { return getToken(HanaParser.FETCH, 0); }
		
		/**
		 * Cursor name.
		 *
		 * @return the cursor name context
		 */
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		
		/**
		 * Variable name.
		 *
		 * @return the list
		 */
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		
		/**
		 * Variable name.
		 *
		 * @param i the i
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		
		/**
		 * Bulk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BULK() { return getToken(HanaParser.BULK, 0); }
		
		/**
		 * Collect.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COLLECT() { return getToken(HanaParser.COLLECT, 0); }
		
		/**
		 * Into.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new fetch statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFetch_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFetch_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Fetch statement.
	 *
	 * @return the fetch statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_fetch_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			match(FETCH);
			setState(2684);
			cursor_name();
			setState(2705);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2685);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2686);
				variable_name();
				setState(2691);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2687);
						match(COMMA);
						setState(2688);
						variable_name();
						}
						} 
					}
					setState(2693);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
				}
				}
				break;
			case BULK:
				{
				setState(2694);
				match(BULK);
				setState(2695);
				match(COLLECT);
				setState(2696);
				match(INTO);
				setState(2697);
				variable_name();
				setState(2702);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2698);
						match(COMMA);
						setState(2699);
						variable_name();
						}
						} 
					}
					setState(2704);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Open_for_statementContext.
	 */
	public static class Open_for_statementContext extends ParserRuleContext {
		
		/**
		 * Open.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OPEN() { return getToken(HanaParser.OPEN, 0); }
		
		/**
		 * Variable name.
		 *
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Using clause.
		 *
		 * @return the using clause context
		 */
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new open for statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOpen_for_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOpen_for_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Open for statement.
	 *
	 * @return the open for statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_open_for_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2707);
			match(OPEN);
			setState(2708);
			variable_name();
			setState(2709);
			match(FOR);
			setState(2712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(2710);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2711);
				expression();
				}
				break;
			}
			setState(2715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				setState(2714);
				using_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Transaction_control_statementsContext.
	 */
	public static class Transaction_control_statementsContext extends ParserRuleContext {
		
		/**
		 * Sets the transaction command.
		 *
		 * @return the sets the transaction command context
		 */
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		
		/**
		 * Sets the constraint command.
		 *
		 * @return the sets the constraint command context
		 */
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		
		/**
		 * Commit statement.
		 *
		 * @return the commit statement context
		 */
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		
		/**
		 * Rollback statement.
		 *
		 * @return the rollback statement context
		 */
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		
		/**
		 * Savepoint statement.
		 *
		 * @return the savepoint statement context
		 */
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		
		/**
		 * Instantiates a new transaction control statements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTransaction_control_statements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTransaction_control_statements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Transaction control statements.
	 *
	 * @return the transaction control statements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_transaction_control_statements);
		try {
			setState(2722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2717);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2718);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2719);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2720);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2721);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Set_transaction_commandContext.
	 */
	public static class Set_transaction_commandContext extends ParserRuleContext {
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Transaction.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRANSACTION() { return getToken(HanaParser.TRANSACTION, 0); }
		
		/**
		 * Read.
		 *
		 * @return the terminal node
		 */
		public TerminalNode READ() { return getToken(HanaParser.READ, 0); }
		
		/**
		 * Isolation.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ISOLATION() { return getToken(HanaParser.ISOLATION, 0); }
		
		/**
		 * Level.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEVEL() { return getToken(HanaParser.LEVEL, 0); }
		
		/**
		 * Use.
		 *
		 * @return the terminal node
		 */
		public TerminalNode USE() { return getToken(HanaParser.USE, 0); }
		
		/**
		 * Rollback.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		
		/**
		 * Segment.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEGMENT() { return getToken(HanaParser.SEGMENT, 0); }
		
		/**
		 * Rollback segment name.
		 *
		 * @return the rollback segment name context
		 */
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		
		/**
		 * Name.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		
		/**
		 * Quoted string.
		 *
		 * @return the quoted string context
		 */
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		
		/**
		 * Only.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		
		/**
		 * Write.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WRITE() { return getToken(HanaParser.WRITE, 0); }
		
		/**
		 * Serializable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SERIALIZABLE() { return getToken(HanaParser.SERIALIZABLE, 0); }
		
		/**
		 * Committed.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMITTED() { return getToken(HanaParser.COMMITTED, 0); }
		
		/**
		 * Instantiates a new sets the transaction command context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_transaction_command(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_transaction_command(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sets the transaction command.
	 *
	 * @return the sets the transaction command context
	 * @throws RecognitionException the recognition exception
	 */
	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2724);
			match(SET);
			setState(2725);
			match(TRANSACTION);
			setState(2739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				setState(2726);
				match(READ);
				setState(2727);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				setState(2728);
				match(ISOLATION);
				setState(2729);
				match(LEVEL);
				setState(2733);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2730);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2731);
					match(READ);
					setState(2732);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(2735);
				match(USE);
				setState(2736);
				match(ROLLBACK);
				setState(2737);
				match(SEGMENT);
				setState(2738);
				rollback_segment_name();
				}
				break;
			}
			setState(2743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(2741);
				match(NAME);
				setState(2742);
				quoted_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Set_constraint_commandContext.
	 */
	public static class Set_constraint_commandContext extends ParserRuleContext {
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Constraint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTRAINT() { return getToken(HanaParser.CONSTRAINT, 0); }
		
		/**
		 * Constraints.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTRAINTS() { return getToken(HanaParser.CONSTRAINTS, 0); }
		
		/**
		 * Immediate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IMMEDIATE() { return getToken(HanaParser.IMMEDIATE, 0); }
		
		/**
		 * Deferred.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFERRED() { return getToken(HanaParser.DEFERRED, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Constraint name.
		 *
		 * @return the list
		 */
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		
		/**
		 * Constraint name.
		 *
		 * @param i the i
		 * @return the constraint name context
		 */
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new sets the constraint command context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_constraint_command(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_constraint_command(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sets the constraint command.
	 *
	 * @return the sets the constraint command context
	 * @throws RecognitionException the recognition exception
	 */
	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2745);
			match(SET);
			setState(2746);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2747);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2748);
				constraint_name();
				setState(2753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2749);
					match(COMMA);
					setState(2750);
					constraint_name();
					}
					}
					setState(2755);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2758);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Commit_statementContext.
	 */
	public static class Commit_statementContext extends ParserRuleContext {
		
		/**
		 * Commit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMIT() { return getToken(HanaParser.COMMIT, 0); }
		
		/**
		 * Work.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WORK() { return getToken(HanaParser.WORK, 0); }
		
		/**
		 * Comment.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMENT() { return getToken(HanaParser.COMMENT, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Force.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FORCE() { return getToken(HanaParser.FORCE, 0); }
		
		/**
		 * Write clause.
		 *
		 * @return the write clause context
		 */
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		
		/**
		 * Corrupt xid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CORRUPT_XID() { return getToken(HanaParser.CORRUPT_XID, 0); }
		
		/**
		 * Corrupt xid all.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CORRUPT_XID_ALL() { return getToken(HanaParser.CORRUPT_XID_ALL, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * Instantiates a new commit statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCommit_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCommit_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Commit statement.
	 *
	 * @return the commit statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_commit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2760);
			match(COMMIT);
			setState(2762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(2761);
				match(WORK);
				}
				break;
			}
			setState(2777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2764);
				match(COMMENT);
				setState(2765);
				expression();
				}
				break;
			case 2:
				{
				setState(2766);
				match(FORCE);
				setState(2775);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(2767);
					match(CORRUPT_XID);
					setState(2768);
					expression();
					}
					break;
				case 2:
					{
					setState(2769);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2770);
					expression();
					setState(2773);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
					case 1:
						{
						setState(2771);
						match(COMMA);
						setState(2772);
						expression();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			setState(2780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2779);
				write_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Write_clauseContext.
	 */
	public static class Write_clauseContext extends ParserRuleContext {
		
		/**
		 * Write.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WRITE() { return getToken(HanaParser.WRITE, 0); }
		
		/**
		 * Wait.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WAIT() { return getToken(HanaParser.WAIT, 0); }
		
		/**
		 * Nowait.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOWAIT() { return getToken(HanaParser.NOWAIT, 0); }
		
		/**
		 * Immediate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IMMEDIATE() { return getToken(HanaParser.IMMEDIATE, 0); }
		
		/**
		 * Batch.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BATCH() { return getToken(HanaParser.BATCH, 0); }
		
		/**
		 * Instantiates a new write clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_write_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWrite_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWrite_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWrite_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Write clause.
	 *
	 * @return the write clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2782);
			match(WRITE);
			setState(2784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(2783);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2786);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Rollback_statementContext.
	 */
	public static class Rollback_statementContext extends ParserRuleContext {
		
		/**
		 * Rollback.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		
		/**
		 * Work.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WORK() { return getToken(HanaParser.WORK, 0); }
		
		/**
		 * To.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		
		/**
		 * Savepoint name.
		 *
		 * @return the savepoint name context
		 */
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		
		/**
		 * Force.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FORCE() { return getToken(HanaParser.FORCE, 0); }
		
		/**
		 * Quoted string.
		 *
		 * @return the quoted string context
		 */
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		
		/**
		 * Savepoint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SAVEPOINT() { return getToken(HanaParser.SAVEPOINT, 0); }
		
		/**
		 * Instantiates a new rollback statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRollback_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRollback_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Rollback statement.
	 *
	 * @return the rollback statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_rollback_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			match(ROLLBACK);
			setState(2791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(2790);
				match(WORK);
				}
				break;
			}
			setState(2800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2793);
				match(TO);
				setState(2795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(2794);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2797);
				savepoint_name();
				}
				break;
			case 2:
				{
				setState(2798);
				match(FORCE);
				setState(2799);
				quoted_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Savepoint_statementContext.
	 */
	public static class Savepoint_statementContext extends ParserRuleContext {
		
		/**
		 * Savepoint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SAVEPOINT() { return getToken(HanaParser.SAVEPOINT, 0); }
		
		/**
		 * Savepoint name.
		 *
		 * @return the savepoint name context
		 */
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new savepoint statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSavepoint_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSavepoint_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Savepoint statement.
	 *
	 * @return the savepoint statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2802);
			match(SAVEPOINT);
			setState(2803);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Explain_statementContext.
	 */
	public static class Explain_statementContext extends ParserRuleContext {
		
		/**
		 * Explain.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXPLAIN() { return getToken(HanaParser.EXPLAIN, 0); }
		
		/**
		 * Plan.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PLAN() { return getToken(HanaParser.PLAN, 0); }
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Update statement.
		 *
		 * @return the update statement context
		 */
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		
		/**
		 * Delete statement.
		 *
		 * @return the delete statement context
		 */
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		
		/**
		 * Insert statement.
		 *
		 * @return the insert statement context
		 */
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		
		/**
		 * Merge statement.
		 *
		 * @return the merge statement context
		 */
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Statement id.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STATEMENT_ID() { return getToken(HanaParser.STATEMENT_ID, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Quoted string.
		 *
		 * @return the quoted string context
		 */
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		
		/**
		 * Into.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new explain statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExplain_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExplain_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Explain statement.
	 *
	 * @return the explain statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2805);
			match(EXPLAIN);
			setState(2806);
			match(PLAN);
			setState(2811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2807);
				match(SET);
				setState(2808);
				match(STATEMENT_ID);
				setState(2809);
				match(EQUALS_OP);
				setState(2810);
				quoted_string();
				}
			}

			setState(2815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2813);
				match(INTO);
				setState(2814);
				tableview_name();
				}
			}

			setState(2817);
			match(FOR);
			setState(2823);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(2818);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(2819);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(2820);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(2821);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(2822);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Select_statementContext.
	 */
	public static class Select_statementContext extends ParserRuleContext {
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Subquery factoring clause.
		 *
		 * @return the subquery factoring clause context
		 */
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		
		/**
		 * For update clause.
		 *
		 * @return the list
		 */
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		
		/**
		 * For update clause.
		 *
		 * @param i the i
		 * @return the for update clause context
		 */
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		
		/**
		 * Order by clause.
		 *
		 * @return the list
		 */
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		
		/**
		 * Order by clause.
		 *
		 * @param i the i
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		
		/**
		 * Instantiates a new select statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_select_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSelect_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSelect_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Select statement.
	 *
	 * @return the select statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_select_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2825);
				subquery_factoring_clause();
				}
			}

			setState(2828);
			subquery();
			setState(2833);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2831);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FOR:
						{
						setState(2829);
						for_update_clause();
						}
						break;
					case ORDER:
						{
						setState(2830);
						order_by_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2835);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Subquery_factoring_clauseContext.
	 */
	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Factoring element.
		 *
		 * @return the list
		 */
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		
		/**
		 * Factoring element.
		 *
		 * @param i the i
		 * @return the factoring element context
		 */
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new subquery factoring clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery_factoring_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery_factoring_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Subquery factoring clause.
	 *
	 * @return the subquery factoring clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2836);
			match(WITH);
			setState(2837);
			factoring_element();
			setState(2842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2838);
				match(COMMA);
				setState(2839);
				factoring_element();
				}
				}
				setState(2844);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Factoring_elementContext.
	 */
	public static class Factoring_elementContext extends ParserRuleContext {
		
		/**
		 * Query name.
		 *
		 * @return the query name context
		 */
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Order by clause.
		 *
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		
		/**
		 * Search clause.
		 *
		 * @return the search clause context
		 */
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		
		/**
		 * Cycle clause.
		 *
		 * @return the cycle clause context
		 */
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new factoring element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFactoring_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFactoring_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Factoring element.
	 *
	 * @return the factoring element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2845);
			query_name();
			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2846);
				match(LEFT_PAREN);
				setState(2847);
				column_name();
				setState(2852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2848);
					match(COMMA);
					setState(2849);
					column_name();
					}
					}
					setState(2854);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2855);
				match(RIGHT_PAREN);
				}
			}

			setState(2859);
			match(AS);
			setState(2860);
			match(LEFT_PAREN);
			setState(2861);
			subquery();
			setState(2863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2862);
				order_by_clause();
				}
			}

			setState(2865);
			match(RIGHT_PAREN);
			setState(2867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(2866);
				search_clause();
				}
			}

			setState(2870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(2869);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Search_clauseContext.
	 */
	public static class Search_clauseContext extends ParserRuleContext {
		
		/**
		 * Search.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEARCH() { return getToken(HanaParser.SEARCH, 0); }
		
		/**
		 * First.
		 *
		 * @return the list
		 */
		public List<TerminalNode> FIRST() { return getTokens(HanaParser.FIRST); }
		
		/**
		 * First.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode FIRST(int i) {
			return getToken(HanaParser.FIRST, i);
		}
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Depth.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEPTH() { return getToken(HanaParser.DEPTH, 0); }
		
		/**
		 * Breadth.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BREADTH() { return getToken(HanaParser.BREADTH, 0); }
		
		/**
		 * Asc.
		 *
		 * @return the list
		 */
		public List<TerminalNode> ASC() { return getTokens(HanaParser.ASC); }
		
		/**
		 * Asc.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode ASC(int i) {
			return getToken(HanaParser.ASC, i);
		}
		
		/**
		 * Desc.
		 *
		 * @return the list
		 */
		public List<TerminalNode> DESC() { return getTokens(HanaParser.DESC); }
		
		/**
		 * Desc.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode DESC(int i) {
			return getToken(HanaParser.DESC, i);
		}
		
		/**
		 * Nulls.
		 *
		 * @return the list
		 */
		public List<TerminalNode> NULLS() { return getTokens(HanaParser.NULLS); }
		
		/**
		 * Nulls.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode NULLS(int i) {
			return getToken(HanaParser.NULLS, i);
		}
		
		/**
		 * Last.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LAST() { return getTokens(HanaParser.LAST); }
		
		/**
		 * Last.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LAST(int i) {
			return getToken(HanaParser.LAST, i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new search clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_search_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSearch_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSearch_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Search clause.
	 *
	 * @return the search clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2872);
			match(SEARCH);
			setState(2873);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2874);
			match(FIRST);
			setState(2875);
			match(BY);
			setState(2876);
			column_name();
			setState(2878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(2877);
				match(ASC);
				}
			}

			setState(2881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(2880);
				match(DESC);
				}
			}

			setState(2885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				setState(2883);
				match(NULLS);
				setState(2884);
				match(FIRST);
				}
				break;
			}
			setState(2889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2887);
				match(NULLS);
				setState(2888);
				match(LAST);
				}
			}

			setState(2909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2891);
				match(COMMA);
				setState(2892);
				column_name();
				setState(2894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(2893);
					match(ASC);
					}
				}

				setState(2897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(2896);
					match(DESC);
					}
				}

				setState(2901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(2899);
					match(NULLS);
					setState(2900);
					match(FIRST);
					}
					break;
				}
				setState(2905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(2903);
					match(NULLS);
					setState(2904);
					match(LAST);
					}
				}

				}
				}
				setState(2911);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2912);
			match(SET);
			setState(2913);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cycle_clauseContext.
	 */
	public static class Cycle_clauseContext extends ParserRuleContext {
		
		/**
		 * Cycle.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CYCLE() { return getToken(HanaParser.CYCLE, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * To.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new cycle clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCycle_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCycle_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cycle clause.
	 *
	 * @return the cycle clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2915);
			match(CYCLE);
			setState(2916);
			column_name();
			setState(2921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2917);
				match(COMMA);
				setState(2918);
				column_name();
				}
				}
				setState(2923);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2924);
			match(SET);
			setState(2925);
			column_name();
			setState(2926);
			match(TO);
			setState(2927);
			expression();
			setState(2928);
			match(DEFAULT);
			setState(2929);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class SubqueryContext.
	 */
	public static class SubqueryContext extends ParserRuleContext {
		
		/**
		 * Subquery basic elements.
		 *
		 * @return the subquery basic elements context
		 */
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		
		/**
		 * Subquery operation part.
		 *
		 * @return the list
		 */
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		
		/**
		 * Subquery operation part.
		 *
		 * @param i the i
		 * @return the subquery operation part context
		 */
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		
		/**
		 * Instantiates a new subquery context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_subquery; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Subquery.
	 *
	 * @return the subquery context
	 * @throws RecognitionException the recognition exception
	 */
	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_subquery);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2931);
			subquery_basic_elements();
			setState(2935);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2932);
					subquery_operation_part();
					}
					} 
				}
				setState(2937);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Subquery_operation_partContext.
	 */
	public static class Subquery_operation_partContext extends ParserRuleContext {
		
		/**
		 * Subquery basic elements.
		 *
		 * @return the subquery basic elements context
		 */
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		
		/**
		 * Union.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNION() { return getToken(HanaParser.UNION, 0); }
		
		/**
		 * Intersect.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTERSECT() { return getToken(HanaParser.INTERSECT, 0); }
		
		/**
		 * Minus.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINUS() { return getToken(HanaParser.MINUS, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Instantiates a new subquery operation part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery_operation_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery_operation_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Subquery operation part.
	 *
	 * @return the subquery operation part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2944);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(2938);
				match(UNION);
				setState(2940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2939);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(2942);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(2943);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2946);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Subquery_basic_elementsContext.
	 */
	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		
		/**
		 * Query block.
		 *
		 * @return the query block context
		 */
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Instantiates a new subquery basic elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery_basic_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery_basic_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Subquery basic elements.
	 *
	 * @return the subquery basic elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_subquery_basic_elements);
		try {
			setState(2953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2948);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2949);
				match(LEFT_PAREN);
				setState(2950);
				subquery();
				setState(2951);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Query_blockContext.
	 */
	public static class Query_blockContext extends ParserRuleContext {
		
		/**
		 * Select.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SELECT() { return getToken(HanaParser.SELECT, 0); }
		
		/**
		 * From clause.
		 *
		 * @return the from clause context
		 */
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		
		/**
		 * Asterisk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		
		/**
		 * Selected element.
		 *
		 * @return the list
		 */
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		
		/**
		 * Selected element.
		 *
		 * @param i the i
		 * @return the selected element context
		 */
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		
		/**
		 * Top.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TOP() { return getToken(HanaParser.TOP, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the list
		 */
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		
		/**
		 * Numeric.
		 *
		 * @param i the i
		 * @return the numeric context
		 */
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		
		/**
		 * Into clause.
		 *
		 * @return the into clause context
		 */
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		
		/**
		 * Join clause.
		 *
		 * @return the join clause context
		 */
		public Join_clauseContext join_clause() {
			return getRuleContext(Join_clauseContext.class,0);
		}
		
		/**
		 * Where clause.
		 *
		 * @return the where clause context
		 */
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		
		/**
		 * For update clause.
		 *
		 * @return the for update clause context
		 */
		public For_update_clauseContext for_update_clause() {
			return getRuleContext(For_update_clauseContext.class,0);
		}
		
		/**
		 * Order by clause.
		 *
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		
		/**
		 * Hierarchical query clause.
		 *
		 * @return the hierarchical query clause context
		 */
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		
		/**
		 * Group by clause.
		 *
		 * @return the group by clause context
		 */
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		
		/**
		 * Model clause.
		 *
		 * @return the model clause context
		 */
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		
		/**
		 * Limit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIMIT() { return getToken(HanaParser.LIMIT, 0); }
		
		/**
		 * Distinct.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DISTINCT() { return getToken(HanaParser.DISTINCT, 0); }
		
		/**
		 * Unique.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNIQUE() { return getToken(HanaParser.UNIQUE, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new query block context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_query_block; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuery_block(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuery_block(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Query block.
	 *
	 * @return the query block context
	 * @throws RecognitionException the recognition exception
	 */
	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2955);
			match(SELECT);
			setState(2957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2956);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(2959);
				match(TOP);
				setState(2960);
				numeric();
				}
			}

			setState(2972);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(2963);
				match(ASTERISK);
				}
				break;
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case STRING_AGG:
			case CORR_SPEARMAN:
			case VAR:
			case STDDEV_POP:
			case VAR_POP:
			case STDDEV_SAMP:
			case VAR_SAMP:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2964);
				selected_element();
				setState(2969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2965);
					match(COMMA);
					setState(2966);
					selected_element();
					}
					}
					setState(2971);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(2974);
				into_clause();
				}
			}

			setState(2977);
			from_clause();
			setState(2979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2978);
				join_clause();
				}
				break;
			}
			setState(2982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(2981);
				where_clause();
				}
				break;
			}
			setState(2985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(2984);
				for_update_clause();
				}
				break;
			}
			setState(2988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(2987);
				order_by_clause();
				}
				break;
			}
			setState(2991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				setState(2990);
				hierarchical_query_clause();
				}
				break;
			}
			setState(2994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2993);
				group_by_clause();
				}
				break;
			}
			setState(2997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(2996);
				model_clause();
				}
				break;
			}
			setState(3004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(2999);
				match(LIMIT);
				setState(3002);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(3000);
					numeric();
					}
					break;
				case 2:
					{
					setState(3001);
					expression();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Selected_elementContext.
	 */
	public static class Selected_elementContext extends ParserRuleContext {
		
		/**
		 * Select list elements.
		 *
		 * @return the select list elements context
		 */
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		
		/**
		 * Column alias.
		 *
		 * @return the column alias context
		 */
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		
		/**
		 * Instantiates a new selected element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_selected_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSelected_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSelected_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSelected_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Selected element.
	 *
	 * @return the selected element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3006);
			select_list_elements();
			setState(3008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
			case 1:
				{
				setState(3007);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class From_clauseContext.
	 */
	public static class From_clauseContext extends ParserRuleContext {
		
		/**
		 * From.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FROM() { return getToken(HanaParser.FROM, 0); }
		
		/**
		 * Table ref list.
		 *
		 * @return the table ref list context
		 */
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		
		/**
		 * Function call.
		 *
		 * @return the function call context
		 */
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		
		/**
		 * Instantiates a new from clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_from_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFrom_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFrom_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * From clause.
	 *
	 * @return the from clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3010);
			match(FROM);
			setState(3013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(3011);
				table_ref_list();
				}
				break;
			case 2:
				{
				setState(3012);
				function_call();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Select_list_elementsContext.
	 */
	public static class Select_list_elementsContext extends ParserRuleContext {
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Asterisk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		
		/**
		 * Statement.
		 *
		 * @return the statement context
		 */
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Instantiates a new select list elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSelect_list_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSelect_list_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSelect_list_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Select list elements.
	 *
	 * @return the select list elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_select_list_elements);
		try {
			setState(3023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3015);
				tableview_name();
				setState(3016);
				match(PERIOD);
				setState(3017);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3019);
				expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3020);
				expression_(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3021);
				statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3022);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_ref_listContext.
	 */
	public static class Table_ref_listContext extends ParserRuleContext {
		
		/**
		 * Table ref.
		 *
		 * @return the list
		 */
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		
		/**
		 * Table ref.
		 *
		 * @param i the i
		 * @return the table ref context
		 */
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new table ref list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_ref_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_ref_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_ref_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table ref list.
	 *
	 * @return the table ref list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3025);
			table_ref();
			setState(3030);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3026);
					match(COMMA);
					setState(3027);
					table_ref();
					}
					} 
				}
				setState(3032);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_refContext.
	 */
	public static class Table_refContext extends ParserRuleContext {
		
		/**
		 * Table ref aux.
		 *
		 * @return the table ref aux context
		 */
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		
		/**
		 * Join clause.
		 *
		 * @return the list
		 */
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		
		/**
		 * Join clause.
		 *
		 * @param i the i
		 * @return the join clause context
		 */
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		
		/**
		 * Pivot clause.
		 *
		 * @return the pivot clause context
		 */
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		
		/**
		 * Unpivot clause.
		 *
		 * @return the unpivot clause context
		 */
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new table ref context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_ref; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_ref(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_ref(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table ref.
	 *
	 * @return the table ref context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			table_ref_aux();
			setState(3037);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3034);
					join_clause();
					}
					} 
				}
				setState(3039);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
			}
			setState(3042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				setState(3040);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(3041);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_ref_auxContext.
	 */
	public static class Table_ref_auxContext extends ParserRuleContext {
		
		/**
		 * Dml table expression clause.
		 *
		 * @return the dml table expression clause context
		 */
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Table ref.
		 *
		 * @return the table ref context
		 */
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Only.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		
		/**
		 * Flashback query clause.
		 *
		 * @return the list
		 */
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		
		/**
		 * Flashback query clause.
		 *
		 * @param i the i
		 * @return the flashback query clause context
		 */
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		
		/**
		 * Table alias.
		 *
		 * @return the table alias context
		 */
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		
		/**
		 * Pivot clause.
		 *
		 * @return the pivot clause context
		 */
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		
		/**
		 * Unpivot clause.
		 *
		 * @return the unpivot clause context
		 */
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		
		/**
		 * Subquery operation part.
		 *
		 * @return the list
		 */
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		
		/**
		 * Subquery operation part.
		 *
		 * @param i the i
		 * @return the subquery operation part context
		 */
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Bindvar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BINDVAR() { return getToken(HanaParser.BINDVAR, 0); }
		
		/**
		 * Instantiates a new table ref aux context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_ref_aux(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_ref_aux(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table ref aux.
	 *
	 * @return the table ref aux context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			setState(3093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case TEMPORARY:
			case THE:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					setState(3044);
					dml_table_expression_clause();
					setState(3047);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
					case 1:
						{
						setState(3045);
						pivot_clause();
						}
						break;
					case 2:
						{
						setState(3046);
						unpivot_clause();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(3049);
					match(LEFT_PAREN);
					setState(3050);
					table_ref();
					setState(3054);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==INTERSECT || _la==MINUS || _la==UNION) {
						{
						{
						setState(3051);
						subquery_operation_part();
						}
						}
						setState(3056);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3057);
					match(RIGHT_PAREN);
					setState(3060);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
					case 1:
						{
						setState(3058);
						pivot_clause();
						}
						break;
					case 2:
						{
						setState(3059);
						unpivot_clause();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(3062);
					match(ONLY);
					setState(3063);
					match(LEFT_PAREN);
					setState(3064);
					dml_table_expression_clause();
					setState(3065);
					match(RIGHT_PAREN);
					}
					break;
				case 4:
					{
					setState(3067);
					dml_table_expression_clause();
					setState(3070);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
					case 1:
						{
						setState(3068);
						pivot_clause();
						}
						break;
					case 2:
						{
						setState(3069);
						unpivot_clause();
						}
						break;
					}
					}
					break;
				}
				setState(3077);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3074);
						flashback_query_clause();
						}
						} 
					}
					setState(3079);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
				}
				setState(3084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(3081);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3080);
						match(AS);
						}
					}

					setState(3083);
					table_alias();
					}
					break;
				}
				}
				break;
			case BINDVAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3086);
				match(BINDVAR);
				setState(3091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(3088);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3087);
						match(AS);
						}
					}

					setState(3090);
					table_alias();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Join_clauseContext.
	 */
	public static class Join_clauseContext extends ParserRuleContext {
		
		/**
		 * Join.
		 *
		 * @return the terminal node
		 */
		public TerminalNode JOIN() { return getToken(HanaParser.JOIN, 0); }
		
		/**
		 * Table ref aux.
		 *
		 * @return the table ref aux context
		 */
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		
		/**
		 * Query partition clause.
		 *
		 * @return the list
		 */
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		
		/**
		 * Query partition clause.
		 *
		 * @param i the i
		 * @return the query partition clause context
		 */
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		
		/**
		 * Inner.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INNER() { return getToken(HanaParser.INNER, 0); }
		
		/**
		 * Outer join type.
		 *
		 * @return the outer join type context
		 */
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		
		/**
		 * Join on part.
		 *
		 * @return the list
		 */
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		
		/**
		 * Join on part.
		 *
		 * @param i the i
		 * @return the join on part context
		 */
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		
		/**
		 * Join using part.
		 *
		 * @return the list
		 */
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		
		/**
		 * Join using part.
		 *
		 * @param i the i
		 * @return the join using part context
		 */
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		
		/**
		 * Cross.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CROSS() { return getToken(HanaParser.CROSS, 0); }
		
		/**
		 * Natural.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NATURAL() { return getToken(HanaParser.NATURAL, 0); }
		
		/**
		 * Instantiates a new join clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_join_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterJoin_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitJoin_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Join clause.
	 *
	 * @return the join clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3095);
				query_partition_clause();
				}
			}

			setState(3099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(3098);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3103);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(3101);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(3102);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(3105);
			match(JOIN);
			setState(3106);
			table_ref_aux();
			setState(3108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(3107);
				query_partition_clause();
				}
				break;
			}
			setState(3114);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3112);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(3110);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(3111);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3116);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Join_on_partContext.
	 */
	public static class Join_on_partContext extends ParserRuleContext {
		
		/**
		 * On.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Instantiates a new join on part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterJoin_on_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitJoin_on_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Join on part.
	 *
	 * @return the join on part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3117);
			match(ON);
			setState(3118);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Join_using_partContext.
	 */
	public static class Join_using_partContext extends ParserRuleContext {
		
		/**
		 * Using.
		 *
		 * @return the terminal node
		 */
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new join using part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterJoin_using_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitJoin_using_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Join using part.
	 *
	 * @return the join using part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3120);
			match(USING);
			setState(3121);
			match(LEFT_PAREN);
			setState(3122);
			column_name();
			setState(3127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3123);
				match(COMMA);
				setState(3124);
				column_name();
				}
				}
				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3130);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Outer_join_typeContext.
	 */
	public static class Outer_join_typeContext extends ParserRuleContext {
		
		/**
		 * Full.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FULL() { return getToken(HanaParser.FULL, 0); }
		
		/**
		 * Left.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT() { return getToken(HanaParser.LEFT, 0); }
		
		/**
		 * Right.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT() { return getToken(HanaParser.RIGHT, 0); }
		
		/**
		 * Outer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OUTER() { return getToken(HanaParser.OUTER, 0); }
		
		/**
		 * Instantiates a new outer join type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOuter_join_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOuter_join_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Outer join type.
	 *
	 * @return the outer join type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3132);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3133);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Query_partition_clauseContext.
	 */
	public static class Query_partition_clauseContext extends ParserRuleContext {
		
		/**
		 * Partition.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PARTITION() { return getToken(HanaParser.PARTITION, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new query partition clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuery_partition_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuery_partition_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Query partition clause.
	 *
	 * @return the query partition clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3136);
			match(PARTITION);
			setState(3137);
			match(BY);
			setState(3151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(3138);
				match(LEFT_PAREN);
				setState(3139);
				subquery();
				setState(3140);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3142);
				expression_list();
				}
				break;
			case 3:
				{
				setState(3143);
				expression();
				setState(3148);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3144);
						match(COMMA);
						setState(3145);
						expression();
						}
						} 
					}
					setState(3150);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Flashback_query_clauseContext.
	 */
	public static class Flashback_query_clauseContext extends ParserRuleContext {
		
		/**
		 * Versions.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VERSIONS() { return getToken(HanaParser.VERSIONS, 0); }
		
		/**
		 * Between.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Scn.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SCN() { return getToken(HanaParser.SCN, 0); }
		
		/**
		 * Timestamp.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Of.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		
		/**
		 * Snapshot.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SNAPSHOT() { return getToken(HanaParser.SNAPSHOT, 0); }
		
		/**
		 * Instantiates a new flashback query clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFlashback_query_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFlashback_query_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Flashback query clause.
	 *
	 * @return the flashback query clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_flashback_query_clause);
		int _la;
		try {
			setState(3161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3153);
				match(VERSIONS);
				setState(3154);
				match(BETWEEN);
				setState(3155);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3156);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3157);
				match(AS);
				setState(3158);
				match(OF);
				setState(3159);
				_la = _input.LA(1);
				if ( !(((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (SCN - 344)) | (1L << (SNAPSHOT - 344)) | (1L << (TIMESTAMP - 344)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3160);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pivot_clauseContext.
	 */
	public static class Pivot_clauseContext extends ParserRuleContext {
		
		/**
		 * Pivot.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PIVOT() { return getToken(HanaParser.PIVOT, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Pivot element.
		 *
		 * @return the list
		 */
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		
		/**
		 * Pivot element.
		 *
		 * @param i the i
		 * @return the pivot element context
		 */
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		
		/**
		 * Pivot for clause.
		 *
		 * @return the pivot for clause context
		 */
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		
		/**
		 * Pivot in clause.
		 *
		 * @return the pivot in clause context
		 */
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Xml.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XML() { return getToken(HanaParser.XML, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new pivot clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pivot clause.
	 *
	 * @return the pivot clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3163);
			match(PIVOT);
			setState(3165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(3164);
				match(XML);
				}
			}

			setState(3167);
			match(LEFT_PAREN);
			setState(3168);
			pivot_element();
			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3169);
				match(COMMA);
				setState(3170);
				pivot_element();
				}
				}
				setState(3175);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3176);
			pivot_for_clause();
			setState(3177);
			pivot_in_clause();
			setState(3178);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pivot_elementContext.
	 */
	public static class Pivot_elementContext extends ParserRuleContext {
		
		/**
		 * Aggregate function name.
		 *
		 * @return the aggregate function name context
		 */
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Column alias.
		 *
		 * @return the column alias context
		 */
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		
		/**
		 * Instantiates a new pivot element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pivot element.
	 *
	 * @return the pivot element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180);
			aggregate_function_name();
			setState(3181);
			match(LEFT_PAREN);
			setState(3182);
			expression();
			setState(3183);
			match(RIGHT_PAREN);
			setState(3185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3184);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pivot_for_clauseContext.
	 */
	public static class Pivot_for_clauseContext extends ParserRuleContext {
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new pivot for clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_for_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_for_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pivot for clause.
	 *
	 * @return the pivot for clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3187);
			match(FOR);
			setState(3200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(3188);
				column_name();
				}
				break;
			case 2:
				{
				setState(3189);
				match(LEFT_PAREN);
				setState(3190);
				column_name();
				setState(3195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3191);
					match(COMMA);
					setState(3192);
					column_name();
					}
					}
					setState(3197);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3198);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pivot_in_clauseContext.
	 */
	public static class Pivot_in_clauseContext extends ParserRuleContext {
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Any.
		 *
		 * @return the list
		 */
		public List<TerminalNode> ANY() { return getTokens(HanaParser.ANY); }
		
		/**
		 * Any.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode ANY(int i) {
			return getToken(HanaParser.ANY, i);
		}
		
		/**
		 * Pivot in clause element.
		 *
		 * @return the list
		 */
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		
		/**
		 * Pivot in clause element.
		 *
		 * @param i the i
		 * @return the pivot in clause element context
		 */
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new pivot in clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_in_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_in_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pivot in clause.
	 *
	 * @return the pivot in clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3202);
			match(IN);
			setState(3203);
			match(LEFT_PAREN);
			setState(3221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				setState(3204);
				subquery();
				}
				break;
			case 2:
				{
				setState(3205);
				match(ANY);
				setState(3210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3206);
					match(COMMA);
					setState(3207);
					match(ANY);
					}
					}
					setState(3212);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3213);
				pivot_in_clause_element();
				setState(3218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3214);
					match(COMMA);
					setState(3215);
					pivot_in_clause_element();
					}
					}
					setState(3220);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3223);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pivot_in_clause_elementContext.
	 */
	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		
		/**
		 * Pivot in clause elements.
		 *
		 * @return the pivot in clause elements context
		 */
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		
		/**
		 * Column alias.
		 *
		 * @return the column alias context
		 */
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		
		/**
		 * Instantiates a new pivot in clause element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_in_clause_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_in_clause_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pivot in clause element.
	 *
	 * @return the pivot in clause element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3225);
			pivot_in_clause_elements();
			setState(3227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3226);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Pivot_in_clause_elementsContext.
	 */
	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Instantiates a new pivot in clause elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_in_clause_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_in_clause_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Pivot in clause elements.
	 *
	 * @return the pivot in clause elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_pivot_in_clause_elements);
		try {
			setState(3231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3229);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3230);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Unpivot_clauseContext.
	 */
	public static class Unpivot_clauseContext extends ParserRuleContext {
		
		/**
		 * Unpivot.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNPIVOT() { return getToken(HanaParser.UNPIVOT, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Pivot for clause.
		 *
		 * @return the pivot for clause context
		 */
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		
		/**
		 * Unpivot in clause.
		 *
		 * @return the unpivot in clause context
		 */
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Nulls.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		
		/**
		 * Include.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INCLUDE() { return getToken(HanaParser.INCLUDE, 0); }
		
		/**
		 * Exclude.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCLUDE() { return getToken(HanaParser.EXCLUDE, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new unpivot clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnpivot_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnpivot_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Unpivot clause.
	 *
	 * @return the unpivot clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3233);
			match(UNPIVOT);
			setState(3236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3234);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3235);
				match(NULLS);
				}
			}

			setState(3238);
			match(LEFT_PAREN);
			setState(3251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(3239);
				column_name();
				}
				break;
			case 2:
				{
				setState(3240);
				match(LEFT_PAREN);
				setState(3241);
				column_name();
				setState(3246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3242);
					match(COMMA);
					setState(3243);
					column_name();
					}
					}
					setState(3248);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3249);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3253);
			pivot_for_clause();
			setState(3254);
			unpivot_in_clause();
			setState(3255);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Unpivot_in_clauseContext.
	 */
	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Unpivot in elements.
		 *
		 * @return the list
		 */
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		
		/**
		 * Unpivot in elements.
		 *
		 * @param i the i
		 * @return the unpivot in elements context
		 */
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new unpivot in clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnpivot_in_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnpivot_in_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Unpivot in clause.
	 *
	 * @return the unpivot in clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3257);
			match(IN);
			setState(3258);
			match(LEFT_PAREN);
			setState(3259);
			unpivot_in_elements();
			setState(3264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3260);
				match(COMMA);
				setState(3261);
				unpivot_in_elements();
				}
				}
				setState(3266);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3267);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Unpivot_in_elementsContext.
	 */
	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Constant.
		 *
		 * @return the list
		 */
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		
		/**
		 * Constant.
		 *
		 * @param i the i
		 * @return the constant context
		 */
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		
		/**
		 * Instantiates a new unpivot in elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnpivot_in_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnpivot_in_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Unpivot in elements.
	 *
	 * @return the unpivot in elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				setState(3269);
				column_name();
				}
				break;
			case 2:
				{
				setState(3270);
				match(LEFT_PAREN);
				setState(3271);
				column_name();
				setState(3276);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3272);
					match(COMMA);
					setState(3273);
					column_name();
					}
					}
					setState(3278);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3279);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3283);
				match(AS);
				setState(3296);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3284);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3285);
					match(LEFT_PAREN);
					setState(3286);
					constant();
					setState(3291);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3287);
						match(COMMA);
						setState(3288);
						constant();
						}
						}
						setState(3293);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3294);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Hierarchical_query_clauseContext.
	 */
	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		
		/**
		 * Connect.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONNECT() { return getToken(HanaParser.CONNECT, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Nocycle.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOCYCLE() { return getToken(HanaParser.NOCYCLE, 0); }
		
		/**
		 * Start part.
		 *
		 * @return the start part context
		 */
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		
		/**
		 * Instantiates a new hierarchical query clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterHierarchical_query_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitHierarchical_query_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Hierarchical query clause.
	 *
	 * @return the hierarchical query clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_hierarchical_query_clause);
		try {
			setState(3317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3300);
				match(CONNECT);
				setState(3301);
				match(BY);
				setState(3303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					setState(3302);
					match(NOCYCLE);
					}
					break;
				}
				setState(3305);
				condition();
				setState(3307);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(3306);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3309);
				start_part();
				setState(3310);
				match(CONNECT);
				setState(3311);
				match(BY);
				setState(3313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(3312);
					match(NOCYCLE);
					}
					break;
				}
				setState(3315);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Start_partContext.
	 */
	public static class Start_partContext extends ParserRuleContext {
		
		/**
		 * Start.
		 *
		 * @return the terminal node
		 */
		public TerminalNode START() { return getToken(HanaParser.START, 0); }
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Instantiates a new start part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_start_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStart_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStart_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Start part.
	 *
	 * @return the start part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3319);
			match(START);
			setState(3320);
			match(WITH);
			setState(3321);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Group_by_clauseContext.
	 */
	public static class Group_by_clauseContext extends ParserRuleContext {
		
		/**
		 * Group.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GROUP() { return getToken(HanaParser.GROUP, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Group by elements.
		 *
		 * @return the list
		 */
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		
		/**
		 * Group by elements.
		 *
		 * @param i the i
		 * @return the group by elements context
		 */
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Having clause.
		 *
		 * @return the having clause context
		 */
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new group by clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGroup_by_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGroup_by_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Group by clause.
	 *
	 * @return the group by clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_group_by_clause);
		try {
			int _alt;
			setState(3349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3323);
				match(GROUP);
				setState(3324);
				match(BY);
				setState(3325);
				group_by_elements();
				setState(3330);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3326);
						match(COMMA);
						setState(3327);
						group_by_elements();
						}
						} 
					}
					setState(3332);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
				}
				setState(3334);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3333);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3336);
				having_clause();
				setState(3347);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3337);
					match(GROUP);
					setState(3338);
					match(BY);
					setState(3339);
					group_by_elements();
					setState(3344);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3340);
							match(COMMA);
							setState(3341);
							group_by_elements();
							}
							} 
						}
						setState(3346);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Group_by_elementsContext.
	 */
	public static class Group_by_elementsContext extends ParserRuleContext {
		
		/**
		 * Grouping sets clause.
		 *
		 * @return the grouping sets clause context
		 */
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		
		/**
		 * Rollup cube clause.
		 *
		 * @return the rollup cube clause context
		 */
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new group by elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGroup_by_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGroup_by_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Group by elements.
	 *
	 * @return the group by elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_group_by_elements);
		try {
			setState(3354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3351);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3352);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3353);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Rollup_cube_clauseContext.
	 */
	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Grouping sets elements.
		 *
		 * @return the list
		 */
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		
		/**
		 * Grouping sets elements.
		 *
		 * @param i the i
		 * @return the grouping sets elements context
		 */
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Rollup.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROLLUP() { return getToken(HanaParser.ROLLUP, 0); }
		
		/**
		 * Cube.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CUBE() { return getToken(HanaParser.CUBE, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new rollup cube clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRollup_cube_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRollup_cube_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Rollup cube clause.
	 *
	 * @return the rollup cube clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3356);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3357);
			match(LEFT_PAREN);
			setState(3358);
			grouping_sets_elements();
			setState(3363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3359);
				match(COMMA);
				setState(3360);
				grouping_sets_elements();
				}
				}
				setState(3365);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3366);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Grouping_sets_clauseContext.
	 */
	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		
		/**
		 * Grouping.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GROUPING() { return getToken(HanaParser.GROUPING, 0); }
		
		/**
		 * Sets.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SETS() { return getToken(HanaParser.SETS, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Grouping sets elements.
		 *
		 * @return the list
		 */
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		
		/**
		 * Grouping sets elements.
		 *
		 * @param i the i
		 * @return the grouping sets elements context
		 */
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new grouping sets clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGrouping_sets_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGrouping_sets_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Grouping sets clause.
	 *
	 * @return the grouping sets clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3368);
			match(GROUPING);
			setState(3369);
			match(SETS);
			setState(3370);
			match(LEFT_PAREN);
			setState(3371);
			grouping_sets_elements();
			setState(3376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3372);
				match(COMMA);
				setState(3373);
				grouping_sets_elements();
				}
				}
				setState(3378);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3379);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Grouping_sets_elementsContext.
	 */
	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		
		/**
		 * Rollup cube clause.
		 *
		 * @return the rollup cube clause context
		 */
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new grouping sets elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGrouping_sets_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGrouping_sets_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Grouping sets elements.
	 *
	 * @return the grouping sets elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_grouping_sets_elements);
		try {
			setState(3384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3381);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3382);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3383);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Having_clauseContext.
	 */
	public static class Having_clauseContext extends ParserRuleContext {
		
		/**
		 * Having.
		 *
		 * @return the terminal node
		 */
		public TerminalNode HAVING() { return getToken(HanaParser.HAVING, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Instantiates a new having clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_having_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterHaving_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitHaving_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Having clause.
	 *
	 * @return the having clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3386);
			match(HAVING);
			setState(3387);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_clauseContext.
	 */
	public static class Model_clauseContext extends ParserRuleContext {
		
		/**
		 * Model.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MODEL() { return getToken(HanaParser.MODEL, 0); }
		
		/**
		 * Main model.
		 *
		 * @return the main model context
		 */
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		
		/**
		 * Cell reference options.
		 *
		 * @return the list
		 */
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		
		/**
		 * Cell reference options.
		 *
		 * @param i the i
		 * @return the cell reference options context
		 */
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		
		/**
		 * Return rows clause.
		 *
		 * @return the return rows clause context
		 */
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		
		/**
		 * Reference model.
		 *
		 * @return the list
		 */
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		
		/**
		 * Reference model.
		 *
		 * @param i the i
		 * @return the reference model context
		 */
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		
		/**
		 * Instantiates a new model clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model clause.
	 *
	 * @return the model clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3389);
			match(MODEL);
			setState(3393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3390);
				cell_reference_options();
				}
				}
				setState(3395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3396);
				return_rows_clause();
				}
			}

			setState(3402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3399);
				reference_model();
				}
				}
				setState(3404);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3405);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cell_reference_optionsContext.
	 */
	public static class Cell_reference_optionsContext extends ParserRuleContext {
		
		/**
		 * Nav.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAV() { return getToken(HanaParser.NAV, 0); }
		
		/**
		 * Ignore.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IGNORE() { return getToken(HanaParser.IGNORE, 0); }
		
		/**
		 * Keep.
		 *
		 * @return the terminal node
		 */
		public TerminalNode KEEP() { return getToken(HanaParser.KEEP, 0); }
		
		/**
		 * Unique.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNIQUE() { return getToken(HanaParser.UNIQUE, 0); }
		
		/**
		 * Dimension.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DIMENSION() { return getToken(HanaParser.DIMENSION, 0); }
		
		/**
		 * Single.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SINGLE() { return getToken(HanaParser.SINGLE, 0); }
		
		/**
		 * Reference.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REFERENCE() { return getToken(HanaParser.REFERENCE, 0); }
		
		/**
		 * Instantiates a new cell reference options context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCell_reference_options(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCell_reference_options(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cell reference options.
	 *
	 * @return the cell reference options context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_cell_reference_options);
		int _la;
		try {
			setState(3415);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3407);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3408);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3409);
				match(UNIQUE);
				setState(3413);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3410);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3411);
					match(SINGLE);
					setState(3412);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Return_rows_clauseContext.
	 */
	public static class Return_rows_clauseContext extends ParserRuleContext {
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Rows.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROWS() { return getToken(HanaParser.ROWS, 0); }
		
		/**
		 * Updated.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATED() { return getToken(HanaParser.UPDATED, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Instantiates a new return rows clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReturn_rows_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReturn_rows_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Return rows clause.
	 *
	 * @return the return rows clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3417);
			match(RETURN);
			setState(3418);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3419);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Reference_modelContext.
	 */
	public static class Reference_modelContext extends ParserRuleContext {
		
		/**
		 * Reference.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REFERENCE() { return getToken(HanaParser.REFERENCE, 0); }
		
		/**
		 * Reference model name.
		 *
		 * @return the reference model name context
		 */
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		
		/**
		 * On.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Model column clauses.
		 *
		 * @return the model column clauses context
		 */
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		
		/**
		 * Cell reference options.
		 *
		 * @return the list
		 */
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		
		/**
		 * Cell reference options.
		 *
		 * @param i the i
		 * @return the cell reference options context
		 */
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		
		/**
		 * Instantiates a new reference model context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_reference_model; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReference_model(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReference_model(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Reference model.
	 *
	 * @return the reference model context
	 * @throws RecognitionException the recognition exception
	 */
	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			match(REFERENCE);
			setState(3422);
			reference_model_name();
			setState(3423);
			match(ON);
			setState(3424);
			match(LEFT_PAREN);
			setState(3425);
			subquery();
			setState(3426);
			match(RIGHT_PAREN);
			setState(3427);
			model_column_clauses();
			setState(3431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3428);
				cell_reference_options();
				}
				}
				setState(3433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Main_modelContext.
	 */
	public static class Main_modelContext extends ParserRuleContext {
		
		/**
		 * Model column clauses.
		 *
		 * @return the model column clauses context
		 */
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		
		/**
		 * Model rules clause.
		 *
		 * @return the model rules clause context
		 */
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		
		/**
		 * Main.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAIN() { return getToken(HanaParser.MAIN, 0); }
		
		/**
		 * Main model name.
		 *
		 * @return the main model name context
		 */
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		
		/**
		 * Cell reference options.
		 *
		 * @return the list
		 */
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		
		/**
		 * Cell reference options.
		 *
		 * @param i the i
		 * @return the cell reference options context
		 */
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		
		/**
		 * Instantiates a new main model context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_main_model; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMain_model(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMain_model(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Main model.
	 *
	 * @return the main model context
	 * @throws RecognitionException the recognition exception
	 */
	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3434);
				match(MAIN);
				setState(3435);
				main_model_name();
				}
			}

			setState(3438);
			model_column_clauses();
			setState(3442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3439);
				cell_reference_options();
				}
				}
				setState(3444);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3445);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_column_clausesContext.
	 */
	public static class Model_column_clausesContext extends ParserRuleContext {
		
		/**
		 * Dimension.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DIMENSION() { return getToken(HanaParser.DIMENSION, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Model column list.
		 *
		 * @return the list
		 */
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		
		/**
		 * Model column list.
		 *
		 * @param i the i
		 * @return the model column list context
		 */
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		
		/**
		 * Measures.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEASURES() { return getToken(HanaParser.MEASURES, 0); }
		
		/**
		 * Model column partition part.
		 *
		 * @return the model column partition part context
		 */
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		
		/**
		 * Instantiates a new model column clauses context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_column_clauses(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_column_clauses(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model column clauses.
	 *
	 * @return the model column clauses context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3447);
				model_column_partition_part();
				}
			}

			setState(3450);
			match(DIMENSION);
			setState(3451);
			match(BY);
			setState(3452);
			model_column_list();
			setState(3453);
			match(MEASURES);
			setState(3454);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_column_partition_partContext.
	 */
	public static class Model_column_partition_partContext extends ParserRuleContext {
		
		/**
		 * Partition.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PARTITION() { return getToken(HanaParser.PARTITION, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Model column list.
		 *
		 * @return the model column list context
		 */
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		
		/**
		 * Instantiates a new model column partition part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_column_partition_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_column_partition_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model column partition part.
	 *
	 * @return the model column partition part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3456);
			match(PARTITION);
			setState(3457);
			match(BY);
			setState(3458);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_column_listContext.
	 */
	public static class Model_column_listContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Model column.
		 *
		 * @return the list
		 */
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		
		/**
		 * Model column.
		 *
		 * @param i the i
		 * @return the model column context
		 */
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new model column list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_column_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_column_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model column list.
	 *
	 * @return the model column list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3460);
			match(LEFT_PAREN);
			setState(3461);
			model_column();
			setState(3466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3462);
				match(COMMA);
				setState(3463);
				model_column();
				}
				}
				setState(3468);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3469);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_columnContext.
	 */
	public static class Model_columnContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Table alias.
		 *
		 * @return the table alias context
		 */
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		
		/**
		 * Instantiates a new model column context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_column; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_column(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_column(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model column.
	 *
	 * @return the model column context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3471);
			expression();
			setState(3473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3472);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_rules_clauseContext.
	 */
	public static class Model_rules_clauseContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Model rules element.
		 *
		 * @return the list
		 */
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		
		/**
		 * Model rules element.
		 *
		 * @param i the i
		 * @return the model rules element context
		 */
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Model rules part.
		 *
		 * @return the model rules part context
		 */
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new model rules clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_rules_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_rules_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model rules clause.
	 *
	 * @return the model rules clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3475);
				model_rules_part();
				}
			}

			setState(3478);
			match(LEFT_PAREN);
			setState(3479);
			model_rules_element();
			setState(3484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3480);
				match(COMMA);
				setState(3481);
				model_rules_element();
				}
				}
				setState(3486);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3487);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_rules_partContext.
	 */
	public static class Model_rules_partContext extends ParserRuleContext {
		
		/**
		 * Rules.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RULES() { return getToken(HanaParser.RULES, 0); }
		
		/**
		 * Update.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		
		/**
		 * Upsert.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPSERT() { return getToken(HanaParser.UPSERT, 0); }
		
		/**
		 * Order.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		
		/**
		 * Model iterate clause.
		 *
		 * @return the model iterate clause context
		 */
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		
		/**
		 * Automatic.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTOMATIC() { return getToken(HanaParser.AUTOMATIC, 0); }
		
		/**
		 * Sequential.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Instantiates a new model rules part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_rules_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_rules_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model rules part.
	 *
	 * @return the model rules part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3489);
			match(RULES);
			setState(3495);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3490);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3491);
				match(UPSERT);
				setState(3493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3492);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(3499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3497);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3498);
				match(ORDER);
				}
			}

			setState(3502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3501);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_rules_elementContext.
	 */
	public static class Model_rules_elementContext extends ParserRuleContext {
		
		/**
		 * Cell assignment.
		 *
		 * @return the cell assignment context
		 */
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Update.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		
		/**
		 * Upsert.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPSERT() { return getToken(HanaParser.UPSERT, 0); }
		
		/**
		 * Order by clause.
		 *
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Instantiates a new model rules element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_rules_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_rules_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model rules element.
	 *
	 * @return the model rules element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3504);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3505);
				match(UPSERT);
				setState(3507);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(3506);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3511);
			cell_assignment();
			setState(3513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3512);
				order_by_clause();
				}
			}

			setState(3515);
			match(EQUALS_OP);
			setState(3516);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cell_assignmentContext.
	 */
	public static class Cell_assignmentContext extends ParserRuleContext {
		
		/**
		 * Model expression.
		 *
		 * @return the model expression context
		 */
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new cell assignment context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCell_assignment(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCell_assignment(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cell assignment.
	 *
	 * @return the cell assignment context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3518);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_iterate_clauseContext.
	 */
	public static class Model_iterate_clauseContext extends ParserRuleContext {
		
		/**
		 * Iterate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ITERATE() { return getToken(HanaParser.ITERATE, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Until part.
		 *
		 * @return the until part context
		 */
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		
		/**
		 * Instantiates a new model iterate clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_iterate_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_iterate_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model iterate clause.
	 *
	 * @return the model iterate clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3520);
			match(ITERATE);
			setState(3521);
			match(LEFT_PAREN);
			setState(3522);
			expression();
			setState(3523);
			match(RIGHT_PAREN);
			setState(3525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3524);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Until_partContext.
	 */
	public static class Until_partContext extends ParserRuleContext {
		
		/**
		 * Until.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNTIL() { return getToken(HanaParser.UNTIL, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Instantiates a new until part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_until_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUntil_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUntil_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Until part.
	 *
	 * @return the until part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3527);
			match(UNTIL);
			setState(3528);
			match(LEFT_PAREN);
			setState(3529);
			condition();
			setState(3530);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Order_by_clauseContext.
	 */
	public static class Order_by_clauseContext extends ParserRuleContext {
		
		/**
		 * Order.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Order by elements.
		 *
		 * @return the list
		 */
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		
		/**
		 * Order by elements.
		 *
		 * @param i the i
		 * @return the order by elements context
		 */
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		
		/**
		 * Siblings.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIBLINGS() { return getToken(HanaParser.SIBLINGS, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new order by clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOrder_by_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOrder_by_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Order by clause.
	 *
	 * @return the order by clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			match(ORDER);
			setState(3534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3533);
				match(SIBLINGS);
				}
			}

			setState(3536);
			match(BY);
			setState(3537);
			order_by_elements();
			setState(3542);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3538);
					match(COMMA);
					setState(3539);
					order_by_elements();
					}
					} 
				}
				setState(3544);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Order_by_elementsContext.
	 */
	public static class Order_by_elementsContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Nulls.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		
		/**
		 * Asc.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASC() { return getToken(HanaParser.ASC, 0); }
		
		/**
		 * Desc.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DESC() { return getToken(HanaParser.DESC, 0); }
		
		/**
		 * First.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		
		/**
		 * Last.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LAST() { return getToken(HanaParser.LAST, 0); }
		
		/**
		 * Instantiates a new order by elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOrder_by_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOrder_by_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Order by elements.
	 *
	 * @return the order by elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545);
			expression();
			setState(3547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3546);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3549);
				match(NULLS);
				setState(3550);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class For_update_clauseContext.
	 */
	public static class For_update_clauseContext extends ParserRuleContext {
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Update.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		
		/**
		 * For update of part.
		 *
		 * @return the for update of part context
		 */
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		
		/**
		 * For update options.
		 *
		 * @return the for update options context
		 */
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		
		/**
		 * Instantiates a new for update clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_update_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_update_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * For update clause.
	 *
	 * @return the for update clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_for_update_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3553);
			match(FOR);
			setState(3554);
			match(UPDATE);
			setState(3556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(3555);
				for_update_of_part();
				}
				break;
			}
			setState(3559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				setState(3558);
				for_update_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class For_update_of_partContext.
	 */
	public static class For_update_of_partContext extends ParserRuleContext {
		
		/**
		 * Of.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new for update of part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_update_of_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_update_of_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * For update of part.
	 *
	 * @return the for update of part context
	 * @throws RecognitionException the recognition exception
	 */
	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_for_update_of_part);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3561);
			match(OF);
			setState(3562);
			column_name();
			setState(3567);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3563);
					match(COMMA);
					setState(3564);
					column_name();
					}
					} 
				}
				setState(3569);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class For_update_optionsContext.
	 */
	public static class For_update_optionsContext extends ParserRuleContext {
		
		/**
		 * Skip.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SKIP_() { return getToken(HanaParser.SKIP_, 0); }
		
		/**
		 * Locked.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOCKED() { return getToken(HanaParser.LOCKED, 0); }
		
		/**
		 * Nowait.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOWAIT() { return getToken(HanaParser.NOWAIT, 0); }
		
		/**
		 * Wait.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WAIT() { return getToken(HanaParser.WAIT, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new for update options context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_update_options(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_update_options(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * For update options.
	 *
	 * @return the for update options context
	 * @throws RecognitionException the recognition exception
	 */
	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_for_update_options);
		try {
			setState(3575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3570);
				match(SKIP_);
				setState(3571);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3572);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3573);
				match(WAIT);
				setState(3574);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Update_statementContext.
	 */
	public static class Update_statementContext extends ParserRuleContext {
		
		/**
		 * Update.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		
		/**
		 * General table ref.
		 *
		 * @return the general table ref context
		 */
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		
		/**
		 * Update set clause.
		 *
		 * @return the update set clause context
		 */
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		
		/**
		 * Where clause.
		 *
		 * @return the where clause context
		 */
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		
		/**
		 * Static returning clause.
		 *
		 * @return the static returning clause context
		 */
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		
		/**
		 * Error logging clause.
		 *
		 * @return the error logging clause context
		 */
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new update statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_update_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUpdate_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUpdate_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Update statement.
	 *
	 * @return the update statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_update_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3577);
			match(UPDATE);
			setState(3578);
			general_table_ref();
			setState(3579);
			update_set_clause();
			setState(3581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				setState(3580);
				where_clause();
				}
				break;
			}
			setState(3584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3583);
				static_returning_clause();
				}
				break;
			}
			setState(3587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				setState(3586);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Update_set_clauseContext.
	 */
	public static class Update_set_clauseContext extends ParserRuleContext {
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Column based update set clause.
		 *
		 * @return the list
		 */
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		
		/**
		 * Column based update set clause.
		 *
		 * @param i the i
		 * @return the column based update set clause context
		 */
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		
		/**
		 * Value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new update set clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUpdate_set_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUpdate_set_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Update set clause.
	 *
	 * @return the update set clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_update_set_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3589);
			match(SET);
			setState(3605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				setState(3590);
				column_based_update_set_clause();
				setState(3595);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,408,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3591);
						match(COMMA);
						setState(3592);
						column_based_update_set_clause();
						}
						} 
					}
					setState(3597);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,408,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(3598);
				match(VALUE);
				setState(3599);
				match(LEFT_PAREN);
				setState(3600);
				id();
				setState(3601);
				match(RIGHT_PAREN);
				setState(3602);
				match(EQUALS_OP);
				setState(3603);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Column_based_update_set_clauseContext.
	 */
	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new column based update set clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_based_update_set_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_based_update_set_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Column based update set clause.
	 *
	 * @return the column based update set clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3607);
				column_name();
				setState(3608);
				match(EQUALS_OP);
				setState(3609);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3611);
				match(LEFT_PAREN);
				setState(3612);
				column_name();
				setState(3617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3613);
					match(COMMA);
					setState(3614);
					column_name();
					}
					}
					setState(3619);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3620);
				match(RIGHT_PAREN);
				setState(3621);
				match(EQUALS_OP);
				setState(3622);
				subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Delete_statementContext.
	 */
	public static class Delete_statementContext extends ParserRuleContext {
		
		/**
		 * Delete.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DELETE() { return getToken(HanaParser.DELETE, 0); }
		
		/**
		 * Table ref.
		 *
		 * @return the table ref context
		 */
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		
		/**
		 * From.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FROM() { return getToken(HanaParser.FROM, 0); }
		
		/**
		 * Where clause.
		 *
		 * @return the where clause context
		 */
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		
		/**
		 * Static returning clause.
		 *
		 * @return the static returning clause context
		 */
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		
		/**
		 * Error logging clause.
		 *
		 * @return the error logging clause context
		 */
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new delete statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDelete_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDelete_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Delete statement.
	 *
	 * @return the delete statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3626);
			match(DELETE);
			setState(3628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3627);
				match(FROM);
				}
			}

			setState(3630);
			table_ref();
			setState(3632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3631);
				where_clause();
				}
				break;
			}
			setState(3635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(3634);
				static_returning_clause();
				}
				break;
			}
			setState(3638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				setState(3637);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Insert_statementContext.
	 */
	public static class Insert_statementContext extends ParserRuleContext {
		
		/**
		 * Insert.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INSERT() { return getToken(HanaParser.INSERT, 0); }
		
		/**
		 * Single table insert.
		 *
		 * @return the single table insert context
		 */
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		
		/**
		 * Multi table insert.
		 *
		 * @return the multi table insert context
		 */
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		
		/**
		 * Instantiates a new insert statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInsert_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInsert_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Insert statement.
	 *
	 * @return the insert statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3640);
			match(INSERT);
			setState(3643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3641);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3642);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Declare_statementContext.
	 */
	public static class Declare_statementContext extends ParserRuleContext {
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Default value part.
		 *
		 * @return the default value part context
		 */
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		
		/**
		 * Instantiates a new declare statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDeclare_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDeclare_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDeclare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Declare statement.
	 *
	 * @return the declare statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_declare_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3645);
			match(DECLARE);
			setState(3646);
			id();
			setState(3648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3647);
				type_spec();
				}
				break;
			}
			setState(3651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3650);
				default_value_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Exception_statementContext.
	 */
	public static class Exception_statementContext extends ParserRuleContext {
		
		/**
		 * Declare.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		
		/**
		 * Exit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		
		/**
		 * Handler.
		 *
		 * @return the terminal node
		 */
		public TerminalNode HANDLER() { return getToken(HanaParser.HANDLER, 0); }
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Proc condition value.
		 *
		 * @return the proc condition value context
		 */
		public Proc_condition_valueContext proc_condition_value() {
			return getRuleContext(Proc_condition_valueContext.class,0);
		}
		
		/**
		 * Data manipulation language statements.
		 *
		 * @return the data manipulation language statements context
		 */
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		
		/**
		 * Instantiates a new exception statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Exception_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_exception_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Exception statement.
	 *
	 * @return the exception statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Exception_statementContext exception_statement() throws RecognitionException {
		Exception_statementContext _localctx = new Exception_statementContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_exception_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3653);
			match(DECLARE);
			setState(3654);
			match(EXIT);
			setState(3655);
			match(HANDLER);
			setState(3656);
			match(FOR);
			setState(3657);
			proc_condition_value();
			setState(3658);
			data_manipulation_language_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_condition_value_Context.
	 */
	public static class Proc_condition_value_Context extends ParserRuleContext {
		
		/**
		 * Sqlexception.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQLEXCEPTION() { return getToken(HanaParser.SQLEXCEPTION, 0); }
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new proc condition value context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_condition_value_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_condition_value_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_condition_value_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_condition_value_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_condition_value_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc condition value.
	 *
	 * @return the proc condition value context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_condition_value_Context proc_condition_value_() throws RecognitionException {
		Proc_condition_value_Context _localctx = new Proc_condition_value_Context(_ctx, getState());
		enterRule(_localctx, 502, RULE_proc_condition_value_);
		try {
			setState(3662);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLEXCEPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3660);
				match(SQLEXCEPTION);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3661);
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Single_table_insertContext.
	 */
	public static class Single_table_insertContext extends ParserRuleContext {
		
		/**
		 * Insert into clause.
		 *
		 * @return the insert into clause context
		 */
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		
		/**
		 * Values clause.
		 *
		 * @return the values clause context
		 */
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Error logging clause.
		 *
		 * @return the error logging clause context
		 */
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		
		/**
		 * Static returning clause.
		 *
		 * @return the static returning clause context
		 */
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new single table insert context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSingle_table_insert(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSingle_table_insert(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Single table insert.
	 *
	 * @return the single table insert context
	 * @throws RecognitionException the recognition exception
	 */
	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_single_table_insert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3664);
			insert_into_clause();
			setState(3670);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3665);
				values_clause();
				setState(3667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(3666);
					static_returning_clause();
					}
					break;
				}
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3669);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3672);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Multi_table_insertContext.
	 */
	public static class Multi_table_insertContext extends ParserRuleContext {
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Conditional insert clause.
		 *
		 * @return the conditional insert clause context
		 */
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		
		/**
		 * Multi table element.
		 *
		 * @return the list
		 */
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		
		/**
		 * Multi table element.
		 *
		 * @param i the i
		 * @return the multi table element context
		 */
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		
		/**
		 * Instantiates a new multi table insert context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMulti_table_insert(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMulti_table_insert(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Multi table insert.
	 *
	 * @return the multi table insert context
	 * @throws RecognitionException the recognition exception
	 */
	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				setState(3675);
				match(ALL);
				setState(3677); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3676);
					multi_table_element();
					}
					}
					setState(3679); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3681);
				conditional_insert_clause();
				}
				break;
			}
			setState(3684);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Multi_table_elementContext.
	 */
	public static class Multi_table_elementContext extends ParserRuleContext {
		
		/**
		 * Insert into clause.
		 *
		 * @return the insert into clause context
		 */
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		
		/**
		 * Values clause.
		 *
		 * @return the values clause context
		 */
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		
		/**
		 * Error logging clause.
		 *
		 * @return the error logging clause context
		 */
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new multi table element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMulti_table_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMulti_table_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Multi table element.
	 *
	 * @return the multi table element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3686);
			insert_into_clause();
			setState(3688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3687);
				values_clause();
				}
			}

			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3690);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Conditional_insert_clauseContext.
	 */
	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		
		/**
		 * Conditional insert when part.
		 *
		 * @return the list
		 */
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		
		/**
		 * Conditional insert when part.
		 *
		 * @param i the i
		 * @return the conditional insert when part context
		 */
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		
		/**
		 * Conditional insert else part.
		 *
		 * @return the conditional insert else part context
		 */
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * First.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		
		/**
		 * Instantiates a new conditional insert clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConditional_insert_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConditional_insert_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Conditional insert clause.
	 *
	 * @return the conditional insert clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3693);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3697); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3696);
				conditional_insert_when_part();
				}
				}
				setState(3699); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3701);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Conditional_insert_when_partContext.
	 */
	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		
		/**
		 * When.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Multi table element.
		 *
		 * @return the list
		 */
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		
		/**
		 * Multi table element.
		 *
		 * @param i the i
		 * @return the multi table element context
		 */
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		
		/**
		 * Instantiates a new conditional insert when part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConditional_insert_when_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConditional_insert_when_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Conditional insert when part.
	 *
	 * @return the conditional insert when part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3704);
			match(WHEN);
			setState(3705);
			condition();
			setState(3706);
			match(THEN);
			setState(3708); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3707);
				multi_table_element();
				}
				}
				setState(3710); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Conditional_insert_else_partContext.
	 */
	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		
		/**
		 * Else.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		
		/**
		 * Multi table element.
		 *
		 * @return the list
		 */
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		
		/**
		 * Multi table element.
		 *
		 * @param i the i
		 * @return the multi table element context
		 */
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		
		/**
		 * Instantiates a new conditional insert else part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConditional_insert_else_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConditional_insert_else_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Conditional insert else part.
	 *
	 * @return the conditional insert else part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3712);
			match(ELSE);
			setState(3714); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3713);
				multi_table_element();
				}
				}
				setState(3716); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Insert_into_clauseContext.
	 */
	public static class Insert_into_clauseContext extends ParserRuleContext {
		
		/**
		 * Into.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		
		/**
		 * General table ref.
		 *
		 * @return the general table ref context
		 */
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new insert into clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInsert_into_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInsert_into_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Insert into clause.
	 *
	 * @return the insert into clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3718);
			match(INTO);
			setState(3719);
			general_table_ref();
			setState(3731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3720);
				match(LEFT_PAREN);
				setState(3721);
				column_name();
				setState(3726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3722);
					match(COMMA);
					setState(3723);
					column_name();
					}
					}
					setState(3728);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3729);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Values_clauseContext.
	 */
	public static class Values_clauseContext extends ParserRuleContext {
		
		/**
		 * Values.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUES() { return getToken(HanaParser.VALUES, 0); }
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Instantiates a new values clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_values_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterValues_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitValues_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Values clause.
	 *
	 * @return the values clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3733);
			match(VALUES);
			setState(3734);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Merge_statementContext.
	 */
	public static class Merge_statementContext extends ParserRuleContext {
		
		/**
		 * Merge.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MERGE() { return getToken(HanaParser.MERGE, 0); }
		
		/**
		 * Into.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Using.
		 *
		 * @return the terminal node
		 */
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		
		/**
		 * Selected tableview.
		 *
		 * @return the selected tableview context
		 */
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		
		/**
		 * On.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Table alias.
		 *
		 * @return the table alias context
		 */
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		
		/**
		 * Merge update clause.
		 *
		 * @return the merge update clause context
		 */
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		
		/**
		 * Merge insert clause.
		 *
		 * @return the merge insert clause context
		 */
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		
		/**
		 * Error logging clause.
		 *
		 * @return the error logging clause context
		 */
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new merge statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Merge statement.
	 *
	 * @return the merge statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3736);
			match(MERGE);
			setState(3737);
			match(INTO);
			setState(3738);
			tableview_name();
			setState(3740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3739);
				table_alias();
				}
			}

			setState(3742);
			match(USING);
			setState(3743);
			selected_tableview();
			setState(3744);
			match(ON);
			setState(3745);
			match(LEFT_PAREN);
			setState(3746);
			condition();
			setState(3747);
			match(RIGHT_PAREN);
			setState(3756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(3748);
				merge_update_clause();
				setState(3750);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
				case 1:
					{
					setState(3749);
					merge_insert_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3752);
				merge_insert_clause();
				setState(3754);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					setState(3753);
					merge_update_clause();
					}
					break;
				}
				}
				break;
			}
			setState(3759);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3758);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Merge_update_clauseContext.
	 */
	public static class Merge_update_clauseContext extends ParserRuleContext {
		
		/**
		 * When.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		
		/**
		 * Matched.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MATCHED() { return getToken(HanaParser.MATCHED, 0); }
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Update.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Merge element.
		 *
		 * @return the list
		 */
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		
		/**
		 * Merge element.
		 *
		 * @param i the i
		 * @return the merge element context
		 */
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Where clause.
		 *
		 * @return the where clause context
		 */
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		
		/**
		 * Merge update delete part.
		 *
		 * @return the merge update delete part context
		 */
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		
		/**
		 * Instantiates a new merge update clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_update_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_update_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Merge update clause.
	 *
	 * @return the merge update clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_merge_update_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3761);
			match(WHEN);
			setState(3762);
			match(MATCHED);
			setState(3763);
			match(THEN);
			setState(3764);
			match(UPDATE);
			setState(3765);
			match(SET);
			setState(3766);
			merge_element();
			setState(3771);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,439,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3767);
					match(COMMA);
					setState(3768);
					merge_element();
					}
					} 
				}
				setState(3773);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,439,_ctx);
			}
			setState(3775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3774);
				where_clause();
				}
				break;
			}
			setState(3778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3777);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Merge_elementContext.
	 */
	public static class Merge_elementContext extends ParserRuleContext {
		
		/**
		 * Column name.
		 *
		 * @return the column name context
		 */
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new merge element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_merge_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Merge element.
	 *
	 * @return the merge element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3780);
			column_name();
			setState(3781);
			match(EQUALS_OP);
			setState(3782);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Merge_update_delete_partContext.
	 */
	public static class Merge_update_delete_partContext extends ParserRuleContext {
		
		/**
		 * Delete.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DELETE() { return getToken(HanaParser.DELETE, 0); }
		
		/**
		 * Where clause.
		 *
		 * @return the where clause context
		 */
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new merge update delete part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_update_delete_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_update_delete_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Merge update delete part.
	 *
	 * @return the merge update delete part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3784);
			match(DELETE);
			setState(3785);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Merge_insert_clauseContext.
	 */
	public static class Merge_insert_clauseContext extends ParserRuleContext {
		
		/**
		 * When.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Matched.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MATCHED() { return getToken(HanaParser.MATCHED, 0); }
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Insert.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INSERT() { return getToken(HanaParser.INSERT, 0); }
		
		/**
		 * Values.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUES() { return getToken(HanaParser.VALUES, 0); }
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Where clause.
		 *
		 * @return the where clause context
		 */
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new merge insert clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_insert_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_insert_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Merge insert clause.
	 *
	 * @return the merge insert clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3787);
			match(WHEN);
			setState(3788);
			match(NOT);
			setState(3789);
			match(MATCHED);
			setState(3790);
			match(THEN);
			setState(3791);
			match(INSERT);
			setState(3803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3792);
				match(LEFT_PAREN);
				setState(3793);
				column_name();
				setState(3798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3794);
					match(COMMA);
					setState(3795);
					column_name();
					}
					}
					setState(3800);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3801);
				match(RIGHT_PAREN);
				}
			}

			setState(3805);
			match(VALUES);
			setState(3806);
			expression_list();
			setState(3808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(3807);
				where_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Selected_tableviewContext.
	 */
	public static class Selected_tableviewContext extends ParserRuleContext {
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Table alias.
		 *
		 * @return the table alias context
		 */
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		
		/**
		 * Instantiates a new selected tableview context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSelected_tableview(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSelected_tableview(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Selected tableview.
	 *
	 * @return the selected tableview context
	 * @throws RecognitionException the recognition exception
	 */
	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3815);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3810);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3811);
				match(LEFT_PAREN);
				setState(3812);
				select_statement();
				setState(3813);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3817);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Lock_table_statementContext.
	 */
	public static class Lock_table_statementContext extends ParserRuleContext {
		
		/**
		 * Lock.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOCK() { return getToken(HanaParser.LOCK, 0); }
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * Lock table element.
		 *
		 * @return the list
		 */
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		
		/**
		 * Lock table element.
		 *
		 * @param i the i
		 * @return the lock table element context
		 */
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Lock mode.
		 *
		 * @return the lock mode context
		 */
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		
		/**
		 * Mode.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MODE() { return getToken(HanaParser.MODE, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Wait nowait part.
		 *
		 * @return the wait nowait part context
		 */
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		
		/**
		 * Instantiates a new lock table statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLock_table_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLock_table_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Lock table statement.
	 *
	 * @return the lock table statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3820);
			match(LOCK);
			setState(3821);
			match(TABLE);
			setState(3822);
			lock_table_element();
			setState(3827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3823);
				match(COMMA);
				setState(3824);
				lock_table_element();
				}
				}
				setState(3829);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3830);
			match(IN);
			setState(3831);
			lock_mode();
			setState(3832);
			match(MODE);
			setState(3834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3833);
				wait_nowait_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Wait_nowait_partContext.
	 */
	public static class Wait_nowait_partContext extends ParserRuleContext {
		
		/**
		 * Wait.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WAIT() { return getToken(HanaParser.WAIT, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Nowait.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOWAIT() { return getToken(HanaParser.NOWAIT, 0); }
		
		/**
		 * Instantiates a new wait nowait part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWait_nowait_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWait_nowait_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Wait nowait part.
	 *
	 * @return the wait nowait part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_wait_nowait_part);
		try {
			setState(3839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3836);
				match(WAIT);
				setState(3837);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3838);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Lock_table_elementContext.
	 */
	public static class Lock_table_elementContext extends ParserRuleContext {
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Partition extension clause.
		 *
		 * @return the partition extension clause context
		 */
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new lock table element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLock_table_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLock_table_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Lock table element.
	 *
	 * @return the lock table element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			tableview_name();
			setState(3843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3842);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Lock_modeContext.
	 */
	public static class Lock_modeContext extends ParserRuleContext {
		
		/**
		 * Row.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROW() { return getToken(HanaParser.ROW, 0); }
		
		/**
		 * Share.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SHARE() { return getToken(HanaParser.SHARE, 0); }
		
		/**
		 * Exclusive.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCLUSIVE() { return getToken(HanaParser.EXCLUSIVE, 0); }
		
		/**
		 * Update.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		
		/**
		 * Instantiates a new lock mode context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLock_mode(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLock_mode(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Lock mode.
	 *
	 * @return the lock mode context
	 * @throws RecognitionException the recognition exception
	 */
	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_lock_mode);
		int _la;
		try {
			setState(3857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3845);
				match(ROW);
				setState(3846);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3847);
				match(ROW);
				setState(3848);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3849);
				match(SHARE);
				setState(3851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3850);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3853);
				match(SHARE);
				setState(3854);
				match(ROW);
				setState(3855);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3856);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class General_table_refContext.
	 */
	public static class General_table_refContext extends ParserRuleContext {
		
		/**
		 * Dml table expression clause.
		 *
		 * @return the dml table expression clause context
		 */
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		
		/**
		 * Only.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Table alias.
		 *
		 * @return the table alias context
		 */
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		
		/**
		 * Instantiates a new general table ref context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGeneral_table_ref(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGeneral_table_ref(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * General table ref.
	 *
	 * @return the general table ref context
	 * @throws RecognitionException the recognition exception
	 */
	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				setState(3859);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3860);
				match(ONLY);
				setState(3861);
				match(LEFT_PAREN);
				setState(3862);
				dml_table_expression_clause();
				setState(3863);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(3867);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Static_returning_clauseContext.
	 */
	public static class Static_returning_clauseContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Into clause.
		 *
		 * @return the into clause context
		 */
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		
		/**
		 * Returning.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURNING() { return getToken(HanaParser.RETURNING, 0); }
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new static returning clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStatic_returning_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStatic_returning_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Static returning clause.
	 *
	 * @return the static returning clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3870);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3871);
			expression();
			setState(3876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3872);
				match(COMMA);
				setState(3873);
				expression();
				}
				}
				setState(3878);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3879);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Error_logging_clauseContext.
	 */
	public static class Error_logging_clauseContext extends ParserRuleContext {
		
		/**
		 * Log.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOG() { return getToken(HanaParser.LOG, 0); }
		
		/**
		 * Errors.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ERRORS() { return getToken(HanaParser.ERRORS, 0); }
		
		/**
		 * Error logging into part.
		 *
		 * @return the error logging into part context
		 */
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		
		/**
		 * Error logging reject part.
		 *
		 * @return the error logging reject part context
		 */
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		
		/**
		 * Instantiates a new error logging clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterError_logging_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitError_logging_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Error logging clause.
	 *
	 * @return the error logging clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_error_logging_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3881);
			match(LOG);
			setState(3882);
			match(ERRORS);
			setState(3884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3883);
				error_logging_into_part();
				}
				break;
			}
			setState(3887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(3886);
				expression_wrapper();
				}
				break;
			}
			setState(3890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3889);
				error_logging_reject_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Error_logging_into_partContext.
	 */
	public static class Error_logging_into_partContext extends ParserRuleContext {
		
		/**
		 * Into.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new error logging into part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterError_logging_into_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitError_logging_into_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Error logging into part.
	 *
	 * @return the error logging into part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3892);
			match(INTO);
			setState(3893);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Error_logging_reject_partContext.
	 */
	public static class Error_logging_reject_partContext extends ParserRuleContext {
		
		/**
		 * Reject.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REJECT() { return getToken(HanaParser.REJECT, 0); }
		
		/**
		 * Limit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIMIT() { return getToken(HanaParser.LIMIT, 0); }
		
		/**
		 * Unlimited.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNLIMITED() { return getToken(HanaParser.UNLIMITED, 0); }
		
		/**
		 * Expression wrapper.
		 *
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new error logging reject part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterError_logging_reject_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitError_logging_reject_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Error logging reject part.
	 *
	 * @return the error logging reject part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3895);
			match(REJECT);
			setState(3896);
			match(LIMIT);
			setState(3899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3897);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(3898);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Dml_table_expression_clauseContext.
	 */
	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		
		/**
		 * Table collection expression.
		 *
		 * @return the table collection expression context
		 */
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Select statement.
		 *
		 * @return the select statement context
		 */
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Subquery restriction clause.
		 *
		 * @return the subquery restriction clause context
		 */
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		
		/**
		 * Except.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCEPT() { return getToken(HanaParser.EXCEPT, 0); }
		
		/**
		 * Table ref list.
		 *
		 * @return the table ref list context
		 */
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		
		/**
		 * Function call.
		 *
		 * @return the function call context
		 */
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Sample clause.
		 *
		 * @return the sample clause context
		 */
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new dml table expression clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDml_table_expression_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDml_table_expression_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Dml table expression clause.
	 *
	 * @return the dml table expression clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(3919);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3901);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3902);
				match(LEFT_PAREN);
				setState(3903);
				select_statement();
				setState(3905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3904);
					subquery_restriction_clause();
					}
				}

				setState(3907);
				match(RIGHT_PAREN);
				setState(3913);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(3908);
					match(EXCEPT);
					setState(3911);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
					case 1:
						{
						setState(3909);
						table_ref_list();
						}
						break;
					case 2:
						{
						setState(3910);
						function_call();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3915);
				tableview_name();
				setState(3917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(3916);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_collection_expressionContext.
	 */
	public static class Table_collection_expressionContext extends ParserRuleContext {
		
		/**
		 * Table.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		
		/**
		 * The.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THE() { return getToken(HanaParser.THE, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Plus sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PLUS_SIGN() { return getToken(HanaParser.PLUS_SIGN, 0); }
		
		/**
		 * Instantiates a new table collection expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_collection_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_collection_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table collection expression.
	 *
	 * @return the table collection expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3921);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(3922);
				match(LEFT_PAREN);
				setState(3923);
				subquery();
				setState(3924);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3926);
				match(LEFT_PAREN);
				setState(3927);
				expression();
				setState(3928);
				match(RIGHT_PAREN);
				setState(3932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
				case 1:
					{
					setState(3929);
					match(LEFT_PAREN);
					setState(3930);
					match(PLUS_SIGN);
					setState(3931);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Subquery_restriction_clauseContext.
	 */
	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Read.
		 *
		 * @return the terminal node
		 */
		public TerminalNode READ() { return getToken(HanaParser.READ, 0); }
		
		/**
		 * Only.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		
		/**
		 * Check.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHECK() { return getToken(HanaParser.CHECK, 0); }
		
		/**
		 * Option.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OPTION() { return getToken(HanaParser.OPTION, 0); }
		
		/**
		 * Constraint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTRAINT() { return getToken(HanaParser.CONSTRAINT, 0); }
		
		/**
		 * Constraint name.
		 *
		 * @return the constraint name context
		 */
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new subquery restriction clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery_restriction_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery_restriction_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Subquery restriction clause.
	 *
	 * @return the subquery restriction clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3936);
			match(WITH);
			setState(3945);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3937);
				match(READ);
				setState(3938);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(3939);
				match(CHECK);
				setState(3940);
				match(OPTION);
				setState(3943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3941);
					match(CONSTRAINT);
					setState(3942);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sample_clauseContext.
	 */
	public static class Sample_clauseContext extends ParserRuleContext {
		
		/**
		 * Sample.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SAMPLE() { return getToken(HanaParser.SAMPLE, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Block.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BLOCK() { return getToken(HanaParser.BLOCK, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * Seed part.
		 *
		 * @return the seed part context
		 */
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		
		/**
		 * Instantiates a new sample clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSample_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSample_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sample clause.
	 *
	 * @return the sample clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3947);
			match(SAMPLE);
			setState(3949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(3948);
				match(BLOCK);
				}
			}

			setState(3951);
			match(LEFT_PAREN);
			setState(3952);
			expression();
			setState(3955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3953);
				match(COMMA);
				setState(3954);
				expression();
				}
			}

			setState(3957);
			match(RIGHT_PAREN);
			setState(3959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3958);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Seed_partContext.
	 */
	public static class Seed_partContext extends ParserRuleContext {
		
		/**
		 * Seed.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEED() { return getToken(HanaParser.SEED, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Instantiates a new seed part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_seed_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSeed_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSeed_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Seed part.
	 *
	 * @return the seed part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3961);
			match(SEED);
			setState(3962);
			match(LEFT_PAREN);
			setState(3963);
			expression();
			setState(3964);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cursor_expressionContext.
	 */
	public static class Cursor_expressionContext extends ParserRuleContext {
		
		/**
		 * Cursor.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Instantiates a new cursor expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cursor expression.
	 *
	 * @return the cursor expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3966);
			match(CURSOR);
			setState(3967);
			match(LEFT_PAREN);
			setState(3968);
			subquery();
			setState(3969);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Expression_listContext.
	 */
	public static class Expression_listContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new expression list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_expression_list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression_list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression_list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Expression list.
	 *
	 * @return the expression list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3971);
			match(LEFT_PAREN);
			setState(3973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (UNSIGNED_INTEGER - 513)) | (1L << (APPROXIMATE_NUM_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (PLUS_SIGN - 513)) | (1L << (MINUS_SIGN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3972);
				expression();
				}
			}

			setState(3979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3975);
				match(COMMA);
				setState(3976);
				expression();
				}
				}
				setState(3981);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3982);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class ConditionContext.
	 */
	public static class ConditionContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new condition context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_condition; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCondition(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCondition(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Condition.
	 *
	 * @return the condition context
	 * @throws RecognitionException the recognition exception
	 */
	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3984);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Condition_wrapperContext.
	 */
	public static class Condition_wrapperContext extends ParserRuleContext {
		
		/**
		 * Condition.
		 *
		 * @return the condition context
		 */
		public Condition_Context condition_() {
			return getRuleContext(Condition_Context.class,0);
		}
		
		/**
		 * Instantiates a new condition wrapper context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCondition_wrapper(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCondition_wrapper(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCondition_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Condition wrapper.
	 *
	 * @return the condition wrapper context
	 * @throws RecognitionException the recognition exception
	 */
	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3986);
			condition_(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Condition_Context.
	 */
	public static class Condition_Context extends ParserRuleContext {
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Condition.
		 *
		 * @return the list
		 */
		public List<Condition_Context> condition_() {
			return getRuleContexts(Condition_Context.class);
		}
		
		/**
		 * Condition.
		 *
		 * @param i the i
		 * @return the condition context
		 */
		public Condition_Context condition_(int i) {
			return getRuleContext(Condition_Context.class,i);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Predicate.
		 *
		 * @return the predicate context
		 */
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		
		/**
		 * Or.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OR() { return getToken(HanaParser.OR, 0); }
		
		/**
		 * And.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		
		/**
		 * Instantiates a new condition context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Condition_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_condition_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCondition_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCondition_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCondition_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Condition.
	 *
	 * @return the condition context
	 * @throws RecognitionException the recognition exception
	 */
	public final Condition_Context condition_() throws RecognitionException {
		return condition_(0);
	}

	/**
	 * Condition.
	 *
	 * @param _p the p
	 * @return the condition context
	 * @throws RecognitionException the recognition exception
	 */
	private Condition_Context condition_(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Condition_Context _localctx = new Condition_Context(_ctx, _parentState);
		Condition_Context _prevctx = _localctx;
		int _startState = 568;
		enterRecursionRule(_localctx, 568, RULE_condition_, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(3989);
				match(NOT);
				setState(3990);
				condition_(3);
				}
				break;
			case 2:
				{
				setState(3991);
				match(LEFT_PAREN);
				setState(3992);
				condition_(0);
				setState(3993);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(3995);
				predicate();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4006);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4004);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
					case 1:
						{
						_localctx = new Condition_Context(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_condition_);
						setState(3998);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3999);
						match(OR);
						setState(4000);
						condition_(6);
						}
						break;
					case 2:
						{
						_localctx = new Condition_Context(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_condition_);
						setState(4001);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(4002);
						match(AND);
						setState(4003);
						condition_(5);
						}
						break;
					}
					} 
				}
				setState(4008);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	/**
	 * The Class PredicateContext.
	 */
	public static class PredicateContext extends ParserRuleContext {
		
		/**
		 * Comparison predicate.
		 *
		 * @return the comparison predicate context
		 */
		public Comparison_predicateContext comparison_predicate() {
			return getRuleContext(Comparison_predicateContext.class,0);
		}
		
		/**
		 * Range predicate.
		 *
		 * @return the range predicate context
		 */
		public Range_predicateContext range_predicate() {
			return getRuleContext(Range_predicateContext.class,0);
		}
		
		/**
		 * In predicate.
		 *
		 * @return the in predicate context
		 */
		public In_predicateContext in_predicate() {
			return getRuleContext(In_predicateContext.class,0);
		}
		
		/**
		 * Exist predicate.
		 *
		 * @return the exist predicate context
		 */
		public Exist_predicateContext exist_predicate() {
			return getRuleContext(Exist_predicateContext.class,0);
		}
		
		/**
		 * Like predicate.
		 *
		 * @return the like predicate context
		 */
		public Like_predicateContext like_predicate() {
			return getRuleContext(Like_predicateContext.class,0);
		}
		
		/**
		 * Null predicate.
		 *
		 * @return the null predicate context
		 */
		public Null_predicateContext null_predicate() {
			return getRuleContext(Null_predicateContext.class,0);
		}
		
		/**
		 * Instantiates a new predicate context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_predicate; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPredicate(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPredicate(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Predicate.
	 *
	 * @return the predicate context
	 * @throws RecognitionException the recognition exception
	 */
	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_predicate);
		try {
			setState(4015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4009);
				comparison_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4010);
				range_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4011);
				in_predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4012);
				exist_predicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4013);
				like_predicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4014);
				null_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Comparison_predicateContext.
	 */
	public static class Comparison_predicateContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		
		/**
		 * Relational operator.
		 *
		 * @return the relational operator context
		 */
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression__listContext expression__list() {
			return getRuleContext(Expression__listContext.class,0);
		}
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Any.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ANY() { return getToken(HanaParser.ANY, 0); }
		
		/**
		 * Some.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SOME() { return getToken(HanaParser.SOME, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Instantiates a new comparison predicate context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Comparison_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_comparison_predicate; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterComparison_predicate(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitComparison_predicate(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitComparison_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Comparison predicate.
	 *
	 * @return the comparison predicate context
	 * @throws RecognitionException the recognition exception
	 */
	public final Comparison_predicateContext comparison_predicate() throws RecognitionException {
		Comparison_predicateContext _localctx = new Comparison_predicateContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_comparison_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			expression_(0);
			setState(4018);
			relational_operator();
			setState(4020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(4019);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				setState(4022);
				expression__list();
				}
				break;
			case 2:
				{
				setState(4023);
				subquery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Relational_operatorContext.
	 */
	public static class Relational_operatorContext extends ParserRuleContext {
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Greater than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		
		/**
		 * Less than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		
		/**
		 * Greater than or equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		
		/**
		 * Less than or equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0); }
		
		/**
		 * Instantiates a new relational operator context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRelational_operator(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRelational_operator(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRelational_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Relational operator.
	 *
	 * @return the relational operator context
	 * @throws RecognitionException the recognition exception
	 */
	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_relational_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4026);
			_la = _input.LA(1);
			if ( !(_la==T__3 || _la==T__4 || ((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (LESS_THAN_OR_EQUALS_OP - 550)) | (1L << (LESS_THAN_OP - 550)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 550)) | (1L << (GREATER_THAN_OP - 550)) | (1L << (EQUALS_OP - 550)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Range_predicateContext.
	 */
	public static class Range_predicateContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		
		/**
		 * Between.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		
		/**
		 * And.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Instantiates a new range predicate context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Range_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_range_predicate; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRange_predicate(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRange_predicate(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRange_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Range predicate.
	 *
	 * @return the range predicate context
	 * @throws RecognitionException the recognition exception
	 */
	public final Range_predicateContext range_predicate() throws RecognitionException {
		Range_predicateContext _localctx = new Range_predicateContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_range_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4028);
			expression_(0);
			setState(4030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4029);
				match(NOT);
				}
			}

			setState(4032);
			match(BETWEEN);
			setState(4033);
			expression_(0);
			setState(4034);
			match(AND);
			setState(4035);
			expression_(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class In_predicateContext.
	 */
	public static class In_predicateContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression__listContext expression__list() {
			return getRuleContext(Expression__listContext.class,0);
		}
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Instantiates a new in predicate context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public In_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_in_predicate; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterIn_predicate(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitIn_predicate(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitIn_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * In predicate.
	 *
	 * @return the in predicate context
	 * @throws RecognitionException the recognition exception
	 */
	public final In_predicateContext in_predicate() throws RecognitionException {
		In_predicateContext _localctx = new In_predicateContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_in_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4037);
			expression_(0);
			setState(4039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4038);
				match(NOT);
				}
			}

			setState(4041);
			match(IN);
			setState(4044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(4042);
				expression__list();
				}
				break;
			case 2:
				{
				setState(4043);
				subquery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Exist_predicateContext.
	 */
	public static class Exist_predicateContext extends ParserRuleContext {
		
		/**
		 * Exists.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXISTS() { return getToken(HanaParser.EXISTS, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Instantiates a new exist predicate context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Exist_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_exist_predicate; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExist_predicate(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExist_predicate(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExist_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Exist predicate.
	 *
	 * @return the exist predicate context
	 * @throws RecognitionException the recognition exception
	 */
	public final Exist_predicateContext exist_predicate() throws RecognitionException {
		Exist_predicateContext _localctx = new Exist_predicateContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_exist_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4046);
				match(NOT);
				}
			}

			setState(4049);
			match(EXISTS);
			setState(4050);
			match(LEFT_PAREN);
			setState(4051);
			subquery();
			setState(4052);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Like_predicateContext.
	 */
	public static class Like_predicateContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		
		/**
		 * Like type.
		 *
		 * @return the like type context
		 */
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Escape.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ESCAPE() { return getToken(HanaParser.ESCAPE, 0); }
		
		/**
		 * Instantiates a new like predicate context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Like_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_like_predicate; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLike_predicate(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLike_predicate(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLike_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Like predicate.
	 *
	 * @return the like predicate context
	 * @throws RecognitionException the recognition exception
	 */
	public final Like_predicateContext like_predicate() throws RecognitionException {
		Like_predicateContext _localctx = new Like_predicateContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_like_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4054);
			expression_(0);
			setState(4056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4055);
				match(NOT);
				}
			}

			setState(4058);
			like_type();
			setState(4059);
			expression_(0);
			setState(4062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4060);
				match(ESCAPE);
				setState(4061);
				expression_(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Null_predicateContext.
	 */
	public static class Null_predicateContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Instantiates a new null predicate context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Null_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_null_predicate; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNull_predicate(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNull_predicate(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNull_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Null predicate.
	 *
	 * @return the null predicate context
	 * @throws RecognitionException the recognition exception
	 */
	public final Null_predicateContext null_predicate() throws RecognitionException {
		Null_predicateContext _localctx = new Null_predicateContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_null_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4064);
			expression_(0);
			setState(4065);
			match(IS);
			setState(4067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4066);
				match(NOT);
				}
			}

			setState(4069);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Expression__listContext.
	 */
	public static class Expression__listContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new expression list context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Expression__listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_expression__list; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression__list(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression__list(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression__list(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Expression list.
	 *
	 * @return the expression list context
	 * @throws RecognitionException the recognition exception
	 */
	public final Expression__listContext expression__list() throws RecognitionException {
		Expression__listContext _localctx = new Expression__listContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_expression__list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4071);
			expression_(0);
			setState(4076);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4072);
					match(COMMA);
					setState(4073);
					expression_(0);
					}
					} 
				}
				setState(4078);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Expression_Context.
	 */
	public static class Expression_Context extends ParserRuleContext {
		
		/**
		 * Case expression.
		 *
		 * @return the case expression context
		 */
		public Case_expression_Context case_expression_() {
			return getRuleContext(Case_expression_Context.class,0);
		}
		
		/**
		 * Function expression.
		 *
		 * @return the function expression context
		 */
		public Function_expression_Context function_expression_() {
			return getRuleContext(Function_expression_Context.class,0);
		}
		
		/**
		 * Aggregate expression.
		 *
		 * @return the aggregate expression context
		 */
		public Aggregate_expression_Context aggregate_expression_() {
			return getRuleContext(Aggregate_expression_Context.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Minus sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINUS_SIGN() { return getToken(HanaParser.MINUS_SIGN, 0); }
		
		/**
		 * Variable name.
		 *
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		
		/**
		 * Constant.
		 *
		 * @return the constant context
		 */
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		
		/**
		 * Column name.
		 *
		 * @return the column name context
		 */
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		
		/**
		 * Correlation name.
		 *
		 * @return the correlation name context
		 */
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Operator.
		 *
		 * @return the operator context
		 */
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		
		/**
		 * Instantiates a new expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_expression_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Expression.
	 *
	 * @return the expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Expression_Context expression_() throws RecognitionException {
		return expression_(0);
	}

	/**
	 * Expression.
	 *
	 * @param _p the p
	 * @return the expression context
	 * @throws RecognitionException the recognition exception
	 */
	private Expression_Context expression_(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Expression_Context _localctx = new Expression_Context(_ctx, _parentState);
		Expression_Context _prevctx = _localctx;
		int _startState = 588;
		enterRecursionRule(_localctx, 588, RULE_expression_, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4101);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(4080);
				case_expression_();
				}
				break;
			case 2:
				{
				setState(4081);
				function_expression_();
				}
				break;
			case 3:
				{
				setState(4082);
				aggregate_expression_();
				}
				break;
			case 4:
				{
				setState(4083);
				match(LEFT_PAREN);
				setState(4084);
				expression_(0);
				setState(4085);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				{
				setState(4087);
				match(LEFT_PAREN);
				setState(4088);
				subquery();
				setState(4089);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				setState(4091);
				match(MINUS_SIGN);
				setState(4092);
				expression_(5);
				}
				break;
			case 7:
				{
				setState(4093);
				variable_name();
				}
				break;
			case 8:
				{
				setState(4094);
				constant();
				}
				break;
			case 9:
				{
				setState(4098);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
				case 1:
					{
					setState(4095);
					correlation_name();
					setState(4096);
					match(PERIOD);
					}
					break;
				}
				setState(4100);
				column_name();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4109);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_Context(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expression_);
					setState(4103);
					if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
					setState(4104);
					operator();
					setState(4105);
					expression_(5);
					}
					} 
				}
				setState(4111);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	/**
	 * The Class Correlation_nameContext.
	 */
	public static class Correlation_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new correlation name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_correlation_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCorrelation_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCorrelation_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCorrelation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Correlation name.
	 *
	 * @return the correlation name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Correlation_nameContext correlation_name() throws RecognitionException {
		Correlation_nameContext _localctx = new Correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4112);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class OperatorContext.
	 */
	public static class OperatorContext extends ParserRuleContext {
		
		/**
		 * Plus sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PLUS_SIGN() { return getToken(HanaParser.PLUS_SIGN, 0); }
		
		/**
		 * Minus sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINUS_SIGN() { return getToken(HanaParser.MINUS_SIGN, 0); }
		
		/**
		 * Asterisk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		
		/**
		 * Solidus.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SOLIDUS() { return getToken(HanaParser.SOLIDUS, 0); }
		
		/**
		 * Concatenation op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONCATENATION_OP() { return getToken(HanaParser.CONCATENATION_OP, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Less than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		
		/**
		 * Greater than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		
		/**
		 * Less than or equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0); }
		
		/**
		 * Greater than or equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		
		/**
		 * And.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		
		/**
		 * Or.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OR() { return getToken(HanaParser.OR, 0); }
		
		/**
		 * Instantiates a new operator context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_operator; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOperator(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOperator(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Operator.
	 *
	 * @return the operator context
	 * @throws RecognitionException the recognition exception
	 */
	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4114);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << AND))) != 0) || _la==OR || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (ASTERISK - 540)) | (1L << (PLUS_SIGN - 540)) | (1L << (MINUS_SIGN - 540)) | (1L << (SOLIDUS - 540)) | (1L << (LESS_THAN_OR_EQUALS_OP - 540)) | (1L << (LESS_THAN_OP - 540)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 540)) | (1L << (GREATER_THAN_OP - 540)) | (1L << (CONCATENATION_OP - 540)) | (1L << (EQUALS_OP - 540)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Case_expression_Context.
	 */
	public static class Case_expression_Context extends ParserRuleContext {
		
		/**
		 * Simple case expression.
		 *
		 * @return the simple case expression context
		 */
		public Simple_case_expression_Context simple_case_expression_() {
			return getRuleContext(Simple_case_expression_Context.class,0);
		}
		
		/**
		 * Search case expression.
		 *
		 * @return the search case expression context
		 */
		public Search_case_expression_Context search_case_expression_() {
			return getRuleContext(Search_case_expression_Context.class,0);
		}
		
		/**
		 * Instantiates a new case expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Case_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_case_expression_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCase_expression_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCase_expression_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCase_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Case expression.
	 *
	 * @return the case expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Case_expression_Context case_expression_() throws RecognitionException {
		Case_expression_Context _localctx = new Case_expression_Context(_ctx, getState());
		enterRule(_localctx, 594, RULE_case_expression_);
		try {
			setState(4118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4116);
				simple_case_expression_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4117);
				search_case_expression_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Simple_case_expression_Context.
	 */
	public static class Simple_case_expression_Context extends ParserRuleContext {
		
		/**
		 * Case.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CASE() { return getToken(HanaParser.CASE, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		
		/**
		 * When.
		 *
		 * @return the list
		 */
		public List<TerminalNode> WHEN() { return getTokens(HanaParser.WHEN); }
		
		/**
		 * When.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode WHEN(int i) {
			return getToken(HanaParser.WHEN, i);
		}
		
		/**
		 * Then.
		 *
		 * @return the list
		 */
		public List<TerminalNode> THEN() { return getTokens(HanaParser.THEN); }
		
		/**
		 * Then.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode THEN(int i) {
			return getToken(HanaParser.THEN, i);
		}
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Else.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		
		/**
		 * Instantiates a new simple case expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Simple_case_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_simple_case_expression_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSimple_case_expression_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSimple_case_expression_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSimple_case_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Simple case expression.
	 *
	 * @return the simple case expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Simple_case_expression_Context simple_case_expression_() throws RecognitionException {
		Simple_case_expression_Context _localctx = new Simple_case_expression_Context(_ctx, getState());
		enterRule(_localctx, 596, RULE_simple_case_expression_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4120);
			match(CASE);
			setState(4121);
			expression_(0);
			setState(4122);
			match(WHEN);
			setState(4123);
			expression_(0);
			setState(4124);
			match(THEN);
			setState(4125);
			expression_(0);
			setState(4133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(4126);
				match(WHEN);
				setState(4127);
				expression_(0);
				setState(4128);
				match(THEN);
				setState(4129);
				expression_(0);
				}
				}
				setState(4135);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4136);
				match(ELSE);
				setState(4137);
				expression_(0);
				}
			}

			setState(4140);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Search_case_expression_Context.
	 */
	public static class Search_case_expression_Context extends ParserRuleContext {
		
		/**
		 * Case.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CASE() { return getToken(HanaParser.CASE, 0); }
		
		/**
		 * When.
		 *
		 * @return the list
		 */
		public List<TerminalNode> WHEN() { return getTokens(HanaParser.WHEN); }
		
		/**
		 * When.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode WHEN(int i) {
			return getToken(HanaParser.WHEN, i);
		}
		
		/**
		 * Condition.
		 *
		 * @return the list
		 */
		public List<Condition_Context> condition_() {
			return getRuleContexts(Condition_Context.class);
		}
		
		/**
		 * Condition.
		 *
		 * @param i the i
		 * @return the condition context
		 */
		public Condition_Context condition_(int i) {
			return getRuleContext(Condition_Context.class,i);
		}
		
		/**
		 * Then.
		 *
		 * @return the list
		 */
		public List<TerminalNode> THEN() { return getTokens(HanaParser.THEN); }
		
		/**
		 * Then.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode THEN(int i) {
			return getToken(HanaParser.THEN, i);
		}
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Else.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		
		/**
		 * Instantiates a new search case expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Search_case_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_search_case_expression_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSearch_case_expression_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSearch_case_expression_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSearch_case_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Search case expression.
	 *
	 * @return the search case expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Search_case_expression_Context search_case_expression_() throws RecognitionException {
		Search_case_expression_Context _localctx = new Search_case_expression_Context(_ctx, getState());
		enterRule(_localctx, 598, RULE_search_case_expression_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4142);
			match(CASE);
			setState(4143);
			match(WHEN);
			setState(4144);
			condition_(0);
			setState(4145);
			match(THEN);
			setState(4146);
			expression_(0);
			setState(4154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(4147);
				match(WHEN);
				setState(4148);
				condition_(0);
				setState(4149);
				match(THEN);
				setState(4150);
				expression_(0);
				}
				}
				setState(4156);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4157);
				match(ELSE);
				setState(4158);
				expression_(0);
				}
			}

			setState(4161);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Function_expression_Context.
	 */
	public static class Function_expression_Context extends ParserRuleContext {
		
		/**
		 * Function name.
		 *
		 * @return the function name context
		 */
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new function expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Function_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_function_expression_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_expression_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_expression_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Function expression.
	 *
	 * @return the function expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Function_expression_Context function_expression_() throws RecognitionException {
		Function_expression_Context _localctx = new Function_expression_Context(_ctx, getState());
		enterRule(_localctx, 600, RULE_function_expression_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			function_name();
			setState(4164);
			match(LEFT_PAREN);
			setState(4165);
			expression_(0);
			setState(4170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4166);
				match(COMMA);
				setState(4167);
				expression_(0);
				}
				}
				setState(4172);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4173);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Aggregate_expression_Context.
	 */
	public static class Aggregate_expression_Context extends ParserRuleContext {
		
		/**
		 * Count.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COUNT() { return getToken(HanaParser.COUNT, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Asterisk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Distinct.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DISTINCT() { return getToken(HanaParser.DISTINCT, 0); }
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression__listContext expression__list() {
			return getRuleContext(Expression__listContext.class,0);
		}
		
		/**
		 * Agg name.
		 *
		 * @return the agg name context
		 */
		public Agg_nameContext agg_name() {
			return getRuleContext(Agg_nameContext.class,0);
		}
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * String agg.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STRING_AGG() { return getToken(HanaParser.STRING_AGG, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * Delimiter.
		 *
		 * @return the delimiter context
		 */
		public DelimiterContext delimiter() {
			return getRuleContext(DelimiterContext.class,0);
		}
		
		/**
		 * Aggregate order by clause.
		 *
		 * @return the aggregate order by clause context
		 */
		public Aggregate_order_by_clauseContext aggregate_order_by_clause() {
			return getRuleContext(Aggregate_order_by_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new aggregate expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Aggregate_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_aggregate_expression_; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAggregate_expression_(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAggregate_expression_(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAggregate_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Aggregate expression.
	 *
	 * @return the aggregate expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Aggregate_expression_Context aggregate_expression_() throws RecognitionException {
		Aggregate_expression_Context _localctx = new Aggregate_expression_Context(_ctx, getState());
		enterRule(_localctx, 602, RULE_aggregate_expression_);
		int _la;
		try {
			setState(4205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4175);
				match(COUNT);
				setState(4176);
				match(LEFT_PAREN);
				setState(4177);
				match(ASTERISK);
				setState(4178);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4179);
				match(COUNT);
				setState(4180);
				match(LEFT_PAREN);
				setState(4181);
				match(DISTINCT);
				setState(4182);
				expression__list();
				setState(4183);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4185);
				agg_name();
				setState(4186);
				match(LEFT_PAREN);
				setState(4188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
				case 1:
					{
					setState(4187);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4190);
				expression_(0);
				setState(4191);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4193);
				match(STRING_AGG);
				setState(4194);
				match(LEFT_PAREN);
				setState(4195);
				expression_(0);
				setState(4198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4196);
					match(COMMA);
					setState(4197);
					delimiter();
					}
				}

				setState(4201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4200);
					aggregate_order_by_clause();
					}
				}

				setState(4203);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Agg_nameContext.
	 */
	public static class Agg_nameContext extends ParserRuleContext {
		
		/**
		 * Corr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CORR() { return getToken(HanaParser.CORR, 0); }
		
		/**
		 * Corr spearman.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CORR_SPEARMAN() { return getToken(HanaParser.CORR_SPEARMAN, 0); }
		
		/**
		 * Count.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COUNT() { return getToken(HanaParser.COUNT, 0); }
		
		/**
		 * Min.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MIN() { return getToken(HanaParser.MIN, 0); }
		
		/**
		 * Median.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEDIAN() { return getToken(HanaParser.MEDIAN, 0); }
		
		/**
		 * Max.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAX() { return getToken(HanaParser.MAX, 0); }
		
		/**
		 * Sum.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUM() { return getToken(HanaParser.SUM, 0); }
		
		/**
		 * Avg.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AVG() { return getToken(HanaParser.AVG, 0); }
		
		/**
		 * Stddev.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STDDEV() { return getToken(HanaParser.STDDEV, 0); }
		
		/**
		 * Var.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VAR() { return getToken(HanaParser.VAR, 0); }
		
		/**
		 * Stddev pop.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STDDEV_POP() { return getToken(HanaParser.STDDEV_POP, 0); }
		
		/**
		 * Var pop.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VAR_POP() { return getToken(HanaParser.VAR_POP, 0); }
		
		/**
		 * Stddev samp.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STDDEV_SAMP() { return getToken(HanaParser.STDDEV_SAMP, 0); }
		
		/**
		 * Var samp.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VAR_SAMP() { return getToken(HanaParser.VAR_SAMP, 0); }
		
		/**
		 * Instantiates a new agg name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Agg_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_agg_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAgg_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAgg_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAgg_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Agg name.
	 *
	 * @return the agg name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Agg_nameContext agg_name() throws RecognitionException {
		Agg_nameContext _localctx = new Agg_nameContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_agg_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4207);
			_la = _input.LA(1);
			if ( !(_la==COUNT || ((((_la - 491)) & ~0x3f) == 0 && ((1L << (_la - 491)) & ((1L << (CORR_SPEARMAN - 491)) | (1L << (VAR - 491)) | (1L << (STDDEV_POP - 491)) | (1L << (VAR_POP - 491)) | (1L << (STDDEV_SAMP - 491)) | (1L << (VAR_SAMP - 491)) | (1L << (AVG - 491)) | (1L << (CORR - 491)) | (1L << (MAX - 491)) | (1L << (MEDIAN - 491)) | (1L << (MIN - 491)) | (1L << (SUM - 491)) | (1L << (STDDEV - 491)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class DelimiterContext.
	 */
	public static class DelimiterContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Quoted string.
		 *
		 * @return the quoted string context
		 */
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		
		/**
		 * Instantiates a new delimiter context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public DelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_delimiter; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDelimiter(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDelimiter(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Delimiter.
	 *
	 * @return the delimiter context
	 * @throws RecognitionException the recognition exception
	 */
	public final DelimiterContext delimiter() throws RecognitionException {
		DelimiterContext _localctx = new DelimiterContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_delimiter);
		try {
			setState(4211);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4209);
				id_expression();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4210);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Aggregate_order_by_clauseContext.
	 */
	public static class Aggregate_order_by_clauseContext extends ParserRuleContext {
		
		/**
		 * Order.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		
		/**
		 * Nulls.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		
		/**
		 * First.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		
		/**
		 * Last.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LAST() { return getToken(HanaParser.LAST, 0); }
		
		/**
		 * Asc.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASC() { return getToken(HanaParser.ASC, 0); }
		
		/**
		 * Desc.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DESC() { return getToken(HanaParser.DESC, 0); }
		
		/**
		 * Instantiates a new aggregate order by clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Aggregate_order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_aggregate_order_by_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAggregate_order_by_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAggregate_order_by_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAggregate_order_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Aggregate order by clause.
	 *
	 * @return the aggregate order by clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Aggregate_order_by_clauseContext aggregate_order_by_clause() throws RecognitionException {
		Aggregate_order_by_clauseContext _localctx = new Aggregate_order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_aggregate_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4213);
			match(ORDER);
			setState(4214);
			match(BY);
			setState(4215);
			expression_(0);
			setState(4217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(4216);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				{
				setState(4219);
				match(NULLS);
				setState(4220);
				match(FIRST);
				}
				break;
			case 2:
				{
				setState(4221);
				match(NULLS);
				setState(4222);
				match(LAST);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class ExpressionContext.
	 */
	public static class ExpressionContext extends ParserRuleContext {
		
		/**
		 * Cursor expression.
		 *
		 * @return the cursor expression context
		 */
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		
		/**
		 * Logical and expression.
		 *
		 * @return the list
		 */
		public List<Logical_and_expressionContext> logical_and_expression() {
			return getRuleContexts(Logical_and_expressionContext.class);
		}
		
		/**
		 * Logical and expression.
		 *
		 * @param i the i
		 * @return the logical and expression context
		 */
		public Logical_and_expressionContext logical_and_expression(int i) {
			return getRuleContext(Logical_and_expressionContext.class,i);
		}
		
		/**
		 * Or.
		 *
		 * @return the list
		 */
		public List<TerminalNode> OR() { return getTokens(HanaParser.OR); }
		
		/**
		 * Or.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode OR(int i) {
			return getToken(HanaParser.OR, i);
		}
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * Instantiates a new expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Expression.
	 *
	 * @return the expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_expression);
		try {
			int _alt;
			setState(4235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4225);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4226);
				logical_and_expression();
				setState(4231);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,504,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4227);
						match(OR);
						setState(4228);
						logical_and_expression();
						}
						} 
					}
					setState(4233);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,504,_ctx);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4234);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Expression_wrapperContext.
	 */
	public static class Expression_wrapperContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Order by clause.
		 *
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		
		/**
		 * Start.
		 *
		 * @return the terminal node
		 */
		public TerminalNode START() { return getToken(HanaParser.START, 0); }
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Instantiates a new expression wrapper context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression_wrapper(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression_wrapper(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Expression wrapper.
	 *
	 * @return the expression wrapper context
	 * @throws RecognitionException the recognition exception
	 */
	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_expression_wrapper);
		try {
			setState(4246);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4237);
				expression();
				setState(4239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(4238);
					order_by_clause();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(4241);
				match(START);
				setState(4242);
				expression();
				setState(4243);
				match(IN);
				setState(4244);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Logical_and_expressionContext.
	 */
	public static class Logical_and_expressionContext extends ParserRuleContext {
		
		/**
		 * Negated expression.
		 *
		 * @return the list
		 */
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		
		/**
		 * Negated expression.
		 *
		 * @param i the i
		 * @return the negated expression context
		 */
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		
		/**
		 * And.
		 *
		 * @return the list
		 */
		public List<TerminalNode> AND() { return getTokens(HanaParser.AND); }
		
		/**
		 * And.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode AND(int i) {
			return getToken(HanaParser.AND, i);
		}
		
		/**
		 * Instantiates a new logical and expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLogical_and_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLogical_and_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLogical_and_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Logical and expression.
	 *
	 * @return the logical and expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4248);
			negated_expression();
			setState(4253);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,508,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4249);
					match(AND);
					setState(4250);
					negated_expression();
					}
					} 
				}
				setState(4255);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,508,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Negated_expressionContext.
	 */
	public static class Negated_expressionContext extends ParserRuleContext {
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Negated expression.
		 *
		 * @return the negated expression context
		 */
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		
		/**
		 * Equality expression.
		 *
		 * @return the equality expression context
		 */
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new negated expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNegated_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNegated_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNegated_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Negated expression.
	 *
	 * @return the negated expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_negated_expression);
		try {
			setState(4259);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4256);
				match(NOT);
				setState(4257);
				negated_expression();
				}
				break;
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4258);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Equality_expressionContext.
	 */
	public static class Equality_expressionContext extends ParserRuleContext {
		
		/**
		 * Multiset expression.
		 *
		 * @return the multiset expression context
		 */
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		
		/**
		 * Checks if is.
		 *
		 * @return the list
		 */
		public List<TerminalNode> IS() { return getTokens(HanaParser.IS); }
		
		/**
		 * Checks if is.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode IS(int i) {
			return getToken(HanaParser.IS, i);
		}
		
		/**
		 * Null.
		 *
		 * @return the list
		 */
		public List<TerminalNode> NULL() { return getTokens(HanaParser.NULL); }
		
		/**
		 * Null.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode NULL(int i) {
			return getToken(HanaParser.NULL, i);
		}
		
		/**
		 * Nan.
		 *
		 * @return the list
		 */
		public List<TerminalNode> NAN() { return getTokens(HanaParser.NAN); }
		
		/**
		 * Nan.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode NAN(int i) {
			return getToken(HanaParser.NAN, i);
		}
		
		/**
		 * Present.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PRESENT() { return getTokens(HanaParser.PRESENT); }
		
		/**
		 * Present.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PRESENT(int i) {
			return getToken(HanaParser.PRESENT, i);
		}
		
		/**
		 * Infinite.
		 *
		 * @return the list
		 */
		public List<TerminalNode> INFINITE() { return getTokens(HanaParser.INFINITE); }
		
		/**
		 * Infinite.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode INFINITE(int i) {
			return getToken(HanaParser.INFINITE, i);
		}
		
		/**
		 * A letter.
		 *
		 * @return the list
		 */
		public List<TerminalNode> A_LETTER() { return getTokens(HanaParser.A_LETTER); }
		
		/**
		 * A letter.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode A_LETTER(int i) {
			return getToken(HanaParser.A_LETTER, i);
		}
		
		/**
		 * Sets the.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SET() { return getTokens(HanaParser.SET); }
		
		/**
		 * Sets the.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SET(int i) {
			return getToken(HanaParser.SET, i);
		}
		
		/**
		 * Empty.
		 *
		 * @return the list
		 */
		public List<TerminalNode> EMPTY() { return getTokens(HanaParser.EMPTY); }
		
		/**
		 * Empty.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode EMPTY(int i) {
			return getToken(HanaParser.EMPTY, i);
		}
		
		/**
		 * Of.
		 *
		 * @return the list
		 */
		public List<TerminalNode> OF() { return getTokens(HanaParser.OF); }
		
		/**
		 * Of.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode OF(int i) {
			return getToken(HanaParser.OF, i);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Type spec.
		 *
		 * @return the list
		 */
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		
		/**
		 * Type spec.
		 *
		 * @param i the i
		 * @return the type spec context
		 */
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * Not.
		 *
		 * @return the list
		 */
		public List<TerminalNode> NOT() { return getTokens(HanaParser.NOT); }
		
		/**
		 * Not.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode NOT(int i) {
			return getToken(HanaParser.NOT, i);
		}
		
		/**
		 * Type.
		 *
		 * @return the list
		 */
		public List<TerminalNode> TYPE() { return getTokens(HanaParser.TYPE); }
		
		/**
		 * Type.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode TYPE(int i) {
			return getToken(HanaParser.TYPE, i);
		}
		
		/**
		 * Only.
		 *
		 * @return the list
		 */
		public List<TerminalNode> ONLY() { return getTokens(HanaParser.ONLY); }
		
		/**
		 * Only.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode ONLY(int i) {
			return getToken(HanaParser.ONLY, i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new equality expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterEquality_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitEquality_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitEquality_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Equality expression.
	 *
	 * @return the equality expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4261);
			multiset_expression();
			setState(4295);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,515,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4262);
					match(IS);
					setState(4264);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(4263);
						match(NOT);
						}
					}

					setState(4291);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL:
						{
						setState(4266);
						match(NULL);
						}
						break;
					case NAN:
						{
						setState(4267);
						match(NAN);
						}
						break;
					case PRESENT:
						{
						setState(4268);
						match(PRESENT);
						}
						break;
					case INFINITE:
						{
						setState(4269);
						match(INFINITE);
						}
						break;
					case A_LETTER:
						{
						setState(4270);
						match(A_LETTER);
						setState(4271);
						match(SET);
						}
						break;
					case EMPTY:
						{
						setState(4272);
						match(EMPTY);
						}
						break;
					case OF:
						{
						setState(4273);
						match(OF);
						setState(4275);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==TYPE) {
							{
							setState(4274);
							match(TYPE);
							}
						}

						setState(4277);
						match(LEFT_PAREN);
						setState(4279);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
						case 1:
							{
							setState(4278);
							match(ONLY);
							}
							break;
						}
						setState(4281);
						type_spec();
						setState(4286);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4282);
							match(COMMA);
							setState(4283);
							type_spec();
							}
							}
							setState(4288);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4289);
						match(RIGHT_PAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(4297);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,515,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Multiset_expressionContext.
	 */
	public static class Multiset_expressionContext extends ParserRuleContext {
		
		/**
		 * Relational expression.
		 *
		 * @return the relational expression context
		 */
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		
		/**
		 * Multiset type.
		 *
		 * @return the multiset type context
		 */
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		
		/**
		 * Concatenation.
		 *
		 * @return the concatenation context
		 */
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		
		/**
		 * Of.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		
		/**
		 * Instantiates a new multiset expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMultiset_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMultiset_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMultiset_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Multiset expression.
	 *
	 * @return the multiset expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4298);
			relational_expression();
			setState(4305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				setState(4299);
				multiset_type();
				setState(4301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(4300);
					match(OF);
					}
				}

				setState(4303);
				concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Multiset_typeContext.
	 */
	public static class Multiset_typeContext extends ParserRuleContext {
		
		/**
		 * Member.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		
		/**
		 * Submultiset.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUBMULTISET() { return getToken(HanaParser.SUBMULTISET, 0); }
		
		/**
		 * Instantiates a new multiset type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMultiset_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMultiset_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Multiset type.
	 *
	 * @return the multiset type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4307);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Relational_expressionContext.
	 */
	public static class Relational_expressionContext extends ParserRuleContext {
		
		/**
		 * Compound expression.
		 *
		 * @return the list
		 */
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		
		/**
		 * Compound expression.
		 *
		 * @param i the i
		 * @return the compound expression context
		 */
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		
		/**
		 * Relational expression operator.
		 *
		 * @return the list
		 */
		public List<Relational_expression_operatorContext> relational_expression_operator() {
			return getRuleContexts(Relational_expression_operatorContext.class);
		}
		
		/**
		 * Relational expression operator.
		 *
		 * @param i the i
		 * @return the relational expression operator context
		 */
		public Relational_expression_operatorContext relational_expression_operator(int i) {
			return getRuleContext(Relational_expression_operatorContext.class,i);
		}
		
		/**
		 * Instantiates a new relational expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRelational_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRelational_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Relational expression.
	 *
	 * @return the relational expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			compound_expression();
			setState(4315);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,518,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4310);
					relational_expression_operator();
					setState(4311);
					compound_expression();
					}
					} 
				}
				setState(4317);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,518,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Relational_expression_operatorContext.
	 */
	public static class Relational_expression_operatorContext extends ParserRuleContext {
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Less than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		
		/**
		 * Greater than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		
		/**
		 * Not equal op.
		 *
		 * @return the not equal op context
		 */
		public Not_equal_opContext not_equal_op() {
			return getRuleContext(Not_equal_opContext.class,0);
		}
		
		/**
		 * Less than or equals op.
		 *
		 * @return the less than or equals op context
		 */
		public Less_than_or_equals_opContext less_than_or_equals_op() {
			return getRuleContext(Less_than_or_equals_opContext.class,0);
		}
		
		/**
		 * Greater than or equals op.
		 *
		 * @return the greater than or equals op context
		 */
		public Greater_than_or_equals_opContext greater_than_or_equals_op() {
			return getRuleContext(Greater_than_or_equals_opContext.class,0);
		}
		
		/**
		 * Instantiates a new relational expression operator context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Relational_expression_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_relational_expression_operator; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRelational_expression_operator(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRelational_expression_operator(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRelational_expression_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Relational expression operator.
	 *
	 * @return the relational expression operator context
	 * @throws RecognitionException the recognition exception
	 */
	public final Relational_expression_operatorContext relational_expression_operator() throws RecognitionException {
		Relational_expression_operatorContext _localctx = new Relational_expression_operatorContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_relational_expression_operator);
		try {
			setState(4324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4318);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4319);
				match(LESS_THAN_OP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4320);
				match(GREATER_THAN_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4321);
				not_equal_op();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4322);
				less_than_or_equals_op();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4323);
				greater_than_or_equals_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Compound_expressionContext.
	 */
	public static class Compound_expressionContext extends ParserRuleContext {
		
		/**
		 * Concatenation.
		 *
		 * @return the list
		 */
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		
		/**
		 * Concatenation.
		 *
		 * @param i the i
		 * @return the concatenation context
		 */
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * In elements.
		 *
		 * @return the in elements context
		 */
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		
		/**
		 * Between.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		
		/**
		 * Between elements.
		 *
		 * @return the between elements context
		 */
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		
		/**
		 * Like type.
		 *
		 * @return the like type context
		 */
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		
		/**
		 * Not.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		
		/**
		 * Like escape part.
		 *
		 * @return the like escape part context
		 */
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		
		/**
		 * Instantiates a new compound expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCompound_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCompound_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCompound_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Compound expression.
	 *
	 * @return the compound expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4326);
			concatenation();
			setState(4341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				{
				setState(4328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4327);
					match(NOT);
					}
				}

				setState(4339);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(4330);
					match(IN);
					setState(4331);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(4332);
					match(BETWEEN);
					setState(4333);
					between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE_REGEXPR:
					{
					setState(4334);
					like_type();
					setState(4335);
					concatenation();
					setState(4337);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
					case 1:
						{
						setState(4336);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Like_typeContext.
	 */
	public static class Like_typeContext extends ParserRuleContext {
		
		/**
		 * Like.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKE() { return getToken(HanaParser.LIKE, 0); }
		
		/**
		 * Likec.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKEC() { return getToken(HanaParser.LIKEC, 0); }
		
		/**
		 * Like2.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKE2() { return getToken(HanaParser.LIKE2, 0); }
		
		/**
		 * Like4.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKE4() { return getToken(HanaParser.LIKE4, 0); }
		
		/**
		 * Like regexpr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKE_REGEXPR() { return getToken(HanaParser.LIKE_REGEXPR, 0); }
		
		/**
		 * Instantiates a new like type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_like_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLike_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLike_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Like type.
	 *
	 * @return the like type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4343);
			_la = _input.LA(1);
			if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (LIKE - 211)) | (1L << (LIKE2 - 211)) | (1L << (LIKE4 - 211)) | (1L << (LIKEC - 211)) | (1L << (LIKE_REGEXPR - 211)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Like_escape_partContext.
	 */
	public static class Like_escape_partContext extends ParserRuleContext {
		
		/**
		 * Escape.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ESCAPE() { return getToken(HanaParser.ESCAPE, 0); }
		
		/**
		 * Concatenation.
		 *
		 * @return the concatenation context
		 */
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		
		/**
		 * Instantiates a new like escape part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLike_escape_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLike_escape_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Like escape part.
	 *
	 * @return the like escape part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4345);
			match(ESCAPE);
			setState(4346);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class In_elementsContext.
	 */
	public static class In_elementsContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the list
		 */
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		
		/**
		 * Concatenation wrapper.
		 *
		 * @param i the i
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Constant.
		 *
		 * @return the constant context
		 */
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * General element.
		 *
		 * @return the general element context
		 */
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		
		/**
		 * Instantiates a new in elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_in_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterIn_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitIn_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitIn_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * In elements.
	 *
	 * @return the in elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_in_elements);
		int _la;
		try {
			setState(4366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4348);
				match(LEFT_PAREN);
				setState(4349);
				subquery();
				setState(4350);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4352);
				match(LEFT_PAREN);
				setState(4353);
				concatenation_wrapper();
				setState(4358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4354);
					match(COMMA);
					setState(4355);
					concatenation_wrapper();
					}
					}
					setState(4360);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4361);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4363);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4364);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4365);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Between_elementsContext.
	 */
	public static class Between_elementsContext extends ParserRuleContext {
		
		/**
		 * Concatenation.
		 *
		 * @return the list
		 */
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		
		/**
		 * Concatenation.
		 *
		 * @param i the i
		 * @return the concatenation context
		 */
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		
		/**
		 * And.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		
		/**
		 * Instantiates a new between elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_between_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBetween_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBetween_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Between elements.
	 *
	 * @return the between elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			concatenation();
			setState(4369);
			match(AND);
			setState(4370);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class ConcatenationContext.
	 */
	public static class ConcatenationContext extends ParserRuleContext {
		
		/**
		 * Additive expression.
		 *
		 * @return the list
		 */
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		
		/**
		 * Additive expression.
		 *
		 * @param i the i
		 * @return the additive expression context
		 */
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		
		/**
		 * Concatenation op.
		 *
		 * @return the list
		 */
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		
		/**
		 * Concatenation op.
		 *
		 * @param i the i
		 * @return the concatenation op context
		 */
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		
		/**
		 * Instantiates a new concatenation context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_concatenation; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConcatenation(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConcatenation(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Concatenation.
	 *
	 * @return the concatenation context
	 * @throws RecognitionException the recognition exception
	 */
	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4372);
			additive_expression();
			setState(4378);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,526,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4373);
					concatenation_op();
					setState(4374);
					additive_expression();
					}
					} 
				}
				setState(4380);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,526,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Concatenation_wrapperContext.
	 */
	public static class Concatenation_wrapperContext extends ParserRuleContext {
		
		/**
		 * Concatenation.
		 *
		 * @return the concatenation context
		 */
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		
		/**
		 * Instantiates a new concatenation wrapper context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConcatenation_wrapper(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConcatenation_wrapper(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConcatenation_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Concatenation wrapper.
	 *
	 * @return the concatenation wrapper context
	 * @throws RecognitionException the recognition exception
	 */
	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4381);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Additive_expressionContext.
	 */
	public static class Additive_expressionContext extends ParserRuleContext {
		
		/**
		 * Multiply expression.
		 *
		 * @return the list
		 */
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		
		/**
		 * Multiply expression.
		 *
		 * @param i the i
		 * @return the multiply expression context
		 */
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		
		/**
		 * Plus sign.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PLUS_SIGN() { return getTokens(HanaParser.PLUS_SIGN); }
		
		/**
		 * Plus sign.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PLUS_SIGN(int i) {
			return getToken(HanaParser.PLUS_SIGN, i);
		}
		
		/**
		 * Minus sign.
		 *
		 * @return the list
		 */
		public List<TerminalNode> MINUS_SIGN() { return getTokens(HanaParser.MINUS_SIGN); }
		
		/**
		 * Minus sign.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(HanaParser.MINUS_SIGN, i);
		}
		
		/**
		 * Instantiates a new additive expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAdditive_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAdditive_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAdditive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Additive expression.
	 *
	 * @return the additive expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4383);
			multiply_expression();
			setState(4388);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4384);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4385);
					multiply_expression();
					}
					} 
				}
				setState(4390);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Multiply_expressionContext.
	 */
	public static class Multiply_expressionContext extends ParserRuleContext {
		
		/**
		 * Datetime expression.
		 *
		 * @return the list
		 */
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		
		/**
		 * Datetime expression.
		 *
		 * @param i the i
		 * @return the datetime expression context
		 */
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		
		/**
		 * Asterisk.
		 *
		 * @return the list
		 */
		public List<TerminalNode> ASTERISK() { return getTokens(HanaParser.ASTERISK); }
		
		/**
		 * Asterisk.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode ASTERISK(int i) {
			return getToken(HanaParser.ASTERISK, i);
		}
		
		/**
		 * Solidus.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SOLIDUS() { return getTokens(HanaParser.SOLIDUS); }
		
		/**
		 * Solidus.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SOLIDUS(int i) {
			return getToken(HanaParser.SOLIDUS, i);
		}
		
		/**
		 * Instantiates a new multiply expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMultiply_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMultiply_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMultiply_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Multiply expression.
	 *
	 * @return the multiply expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4391);
			datetime_expression();
			setState(4396);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4392);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4393);
					datetime_expression();
					}
					} 
				}
				setState(4398);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Datetime_expressionContext.
	 */
	public static class Datetime_expressionContext extends ParserRuleContext {
		
		/**
		 * Model expression.
		 *
		 * @return the model expression context
		 */
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		
		/**
		 * At.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AT() { return getToken(HanaParser.AT, 0); }
		
		/**
		 * Interval expression.
		 *
		 * @return the interval expression context
		 */
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		
		/**
		 * Local.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOCAL() { return getToken(HanaParser.LOCAL, 0); }
		
		/**
		 * Time.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		
		/**
		 * Zone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ZONE() { return getToken(HanaParser.ZONE, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new datetime expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDatetime_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDatetime_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDatetime_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Datetime expression.
	 *
	 * @return the datetime expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4399);
			model_expression();
			setState(4408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(4400);
				match(AT);
				setState(4405);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4401);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4402);
					match(TIME);
					setState(4403);
					match(ZONE);
					setState(4404);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4407);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Interval_expressionContext.
	 */
	public static class Interval_expressionContext extends ParserRuleContext {
		
		/**
		 * Day.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DAY() { return getToken(HanaParser.DAY, 0); }
		
		/**
		 * To.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		
		/**
		 * Second.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SECOND() { return getToken(HanaParser.SECOND, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the list
		 */
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		
		/**
		 * Concatenation wrapper.
		 *
		 * @param i the i
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * Year.
		 *
		 * @return the terminal node
		 */
		public TerminalNode YEAR() { return getToken(HanaParser.YEAR, 0); }
		
		/**
		 * Month.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MONTH() { return getToken(HanaParser.MONTH, 0); }
		
		/**
		 * Instantiates a new interval expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInterval_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInterval_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Interval expression.
	 *
	 * @return the interval expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_interval_expression);
		int _la;
		try {
			setState(4434);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4410);
				match(DAY);
				setState(4415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4411);
					match(LEFT_PAREN);
					setState(4412);
					concatenation_wrapper();
					setState(4413);
					match(RIGHT_PAREN);
					}
				}

				setState(4417);
				match(TO);
				setState(4418);
				match(SECOND);
				setState(4423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					setState(4419);
					match(LEFT_PAREN);
					setState(4420);
					concatenation_wrapper();
					setState(4421);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4425);
				match(YEAR);
				setState(4430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4426);
					match(LEFT_PAREN);
					setState(4427);
					concatenation_wrapper();
					setState(4428);
					match(RIGHT_PAREN);
					}
				}

				setState(4432);
				match(TO);
				setState(4433);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_expressionContext.
	 */
	public static class Model_expressionContext extends ParserRuleContext {
		
		/**
		 * Unary expression.
		 *
		 * @return the unary expression context
		 */
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		
		/**
		 * Left bracket.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_BRACKET() { return getToken(HanaParser.LEFT_BRACKET, 0); }
		
		/**
		 * Model expression element.
		 *
		 * @return the model expression element context
		 */
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		
		/**
		 * Right bracket.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_BRACKET() { return getToken(HanaParser.RIGHT_BRACKET, 0); }
		
		/**
		 * Instantiates a new model expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model expression.
	 *
	 * @return the model expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4436);
			unary_expression();
			setState(4441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(4437);
				match(LEFT_BRACKET);
				setState(4438);
				model_expression_element();
				setState(4439);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Model_expression_elementContext.
	 */
	public static class Model_expression_elementContext extends ParserRuleContext {
		
		/**
		 * Any.
		 *
		 * @return the list
		 */
		public List<TerminalNode> ANY() { return getTokens(HanaParser.ANY); }
		
		/**
		 * Any.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode ANY(int i) {
			return getToken(HanaParser.ANY, i);
		}
		
		/**
		 * Condition wrapper.
		 *
		 * @return the list
		 */
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		
		/**
		 * Condition wrapper.
		 *
		 * @param i the i
		 * @return the condition wrapper context
		 */
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Single column for loop.
		 *
		 * @return the list
		 */
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		
		/**
		 * Single column for loop.
		 *
		 * @param i the i
		 * @return the single column for loop context
		 */
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		
		/**
		 * Multi column for loop.
		 *
		 * @return the multi column for loop context
		 */
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		
		/**
		 * Instantiates a new model expression element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_expression_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_expression_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Model expression element.
	 *
	 * @return the model expression element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_model_expression_element);
		int _la;
		try {
			setState(4466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					setState(4443);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4444);
					condition_wrapper();
					}
					break;
				}
				setState(4454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4447);
					match(COMMA);
					setState(4450);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
					case 1:
						{
						setState(4448);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4449);
						condition_wrapper();
						}
						break;
					}
					}
					}
					setState(4456);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4457);
				single_column_for_loop();
				setState(4462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4458);
					match(COMMA);
					setState(4459);
					single_column_for_loop();
					}
					}
					setState(4464);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4465);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Single_column_for_loopContext.
	 */
	public static class Single_column_for_loopContext extends ParserRuleContext {
		
		/** The ex 1. */
		public ExpressionContext ex1;
		
		/** The ex 2. */
		public ExpressionContext ex2;
		
		/** The ex 3. */
		public ExpressionContext ex3;
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the column name context
		 */
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * From.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FROM() { return getToken(HanaParser.FROM, 0); }
		
		/**
		 * To.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		
		/**
		 * For increment decrement type.
		 *
		 * @return the for increment decrement type context
		 */
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * For like part.
		 *
		 * @return the for like part context
		 */
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		
		/**
		 * Instantiates a new single column for loop context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSingle_column_for_loop(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSingle_column_for_loop(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Single column for loop.
	 *
	 * @return the single column for loop context
	 * @throws RecognitionException the recognition exception
	 */
	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4468);
			match(FOR);
			setState(4469);
			column_name();
			setState(4482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4470);
				match(IN);
				setState(4471);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4472);
					for_like_part();
					}
				}

				setState(4475);
				match(FROM);
				setState(4476);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4477);
				match(TO);
				setState(4478);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4479);
				for_increment_decrement_type();
				setState(4480);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class For_like_partContext.
	 */
	public static class For_like_partContext extends ParserRuleContext {
		
		/**
		 * Like.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKE() { return getToken(HanaParser.LIKE, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Instantiates a new for like part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_like_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_like_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * For like part.
	 *
	 * @return the for like part context
	 * @throws RecognitionException the recognition exception
	 */
	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4484);
			match(LIKE);
			setState(4485);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class For_increment_decrement_typeContext.
	 */
	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		
		/**
		 * Increment.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INCREMENT() { return getToken(HanaParser.INCREMENT, 0); }
		
		/**
		 * Decrement.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECREMENT() { return getToken(HanaParser.DECREMENT, 0); }
		
		/**
		 * Instantiates a new for increment decrement type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_increment_decrement_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_increment_decrement_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * For increment decrement type.
	 *
	 * @return the for increment decrement type context
	 * @throws RecognitionException the recognition exception
	 */
	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4487);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Multi_column_for_loopContext.
	 */
	public static class Multi_column_for_loopContext extends ParserRuleContext {
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Column name.
		 *
		 * @return the list
		 */
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		
		/**
		 * Column name.
		 *
		 * @param i the i
		 * @return the column name context
		 */
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Expression list.
		 *
		 * @return the list
		 */
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		
		/**
		 * Expression list.
		 *
		 * @param i the i
		 * @return the expression list context
		 */
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new multi column for loop context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMulti_column_for_loop(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMulti_column_for_loop(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Multi column for loop.
	 *
	 * @return the multi column for loop context
	 * @throws RecognitionException the recognition exception
	 */
	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4489);
			match(FOR);
			setState(4490);
			match(LEFT_PAREN);
			setState(4491);
			column_name();
			setState(4496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4492);
				match(COMMA);
				setState(4493);
				column_name();
				}
				}
				setState(4498);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4499);
			match(RIGHT_PAREN);
			setState(4500);
			match(IN);
			setState(4501);
			match(LEFT_PAREN);
			setState(4514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				setState(4502);
				subquery();
				}
				break;
			case 2:
				{
				setState(4503);
				match(LEFT_PAREN);
				setState(4504);
				expression_list();
				setState(4509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4505);
					match(COMMA);
					setState(4506);
					expression_list();
					}
					}
					setState(4511);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4512);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4516);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Unary_expressionContext.
	 */
	public static class Unary_expressionContext extends ParserRuleContext {
		
		/**
		 * Minus sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINUS_SIGN() { return getToken(HanaParser.MINUS_SIGN, 0); }
		
		/**
		 * Unary expression.
		 *
		 * @return the unary expression context
		 */
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		
		/**
		 * Plus sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PLUS_SIGN() { return getToken(HanaParser.PLUS_SIGN, 0); }
		
		/**
		 * Prior.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRIOR() { return getToken(HanaParser.PRIOR, 0); }
		
		/**
		 * Connect by root.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONNECT_BY_ROOT() { return getToken(HanaParser.CONNECT_BY_ROOT, 0); }
		
		/**
		 * New.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NEW() { return getToken(HanaParser.NEW, 0); }
		
		/**
		 * Distinct.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DISTINCT() { return getToken(HanaParser.DISTINCT, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Case statement.
		 *
		 * @return the case statement context
		 */
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		
		/**
		 * Quantified expression.
		 *
		 * @return the quantified expression context
		 */
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		
		/**
		 * Standard function.
		 *
		 * @return the standard function context
		 */
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		
		/**
		 * Atom.
		 *
		 * @return the atom context
		 */
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		
		/**
		 * Instantiates a new unary expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnary_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnary_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Unary expression.
	 *
	 * @return the unary expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_unary_expression);
		try {
			setState(4536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4518);
				match(MINUS_SIGN);
				setState(4519);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4520);
				match(PLUS_SIGN);
				setState(4521);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4522);
				match(PRIOR);
				setState(4523);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4524);
				match(CONNECT_BY_ROOT);
				setState(4525);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4526);
				match(NEW);
				setState(4527);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4528);
				match(DISTINCT);
				setState(4529);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4530);
				match(ALL);
				setState(4531);
				unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4532);
				case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4533);
				quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4534);
				standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4535);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Case_statementContext.
	 */
	public static class Case_statementContext extends ParserRuleContext {
		
		/**
		 * Searched case statement.
		 *
		 * @return the searched case statement context
		 */
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		
		/**
		 * Simple case statement.
		 *
		 * @return the simple case statement context
		 */
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		
		/**
		 * Instantiates a new case statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_case_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCase_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCase_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Case statement.
	 *
	 * @return the case statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_case_statement);
		try {
			setState(4540);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4538);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4539);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Simple_case_statementContext.
	 */
	public static class Simple_case_statementContext extends ParserRuleContext {
		
		/** The ck 1. */
		public Token ck1;
		
		/**
		 * Atom.
		 *
		 * @return the atom context
		 */
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Case.
		 *
		 * @return the list
		 */
		public List<TerminalNode> CASE() { return getTokens(HanaParser.CASE); }
		
		/**
		 * Case.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode CASE(int i) {
			return getToken(HanaParser.CASE, i);
		}
		
		/**
		 * Label name.
		 *
		 * @return the list
		 */
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		
		/**
		 * Label name.
		 *
		 * @param i the i
		 * @return the label name context
		 */
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		
		/**
		 * Simple case when part.
		 *
		 * @return the list
		 */
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		
		/**
		 * Simple case when part.
		 *
		 * @param i the i
		 * @return the simple case when part context
		 */
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		
		/**
		 * Case else part.
		 *
		 * @return the case else part context
		 */
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		
		/**
		 * Instantiates a new simple case statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSimple_case_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSimple_case_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Simple case statement.
	 *
	 * @return the simple case statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(4542);
				label_name();
				}
			}

			setState(4545);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4546);
			atom();
			setState(4548); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4547);
				simple_case_when_part();
				}
				}
				setState(4550); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4552);
				case_else_part();
				}
			}

			setState(4555);
			match(END);
			setState(4557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(4556);
				match(CASE);
				}
				break;
			}
			setState(4560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(4559);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Simple_case_when_partContext.
	 */
	public static class Simple_case_when_partContext extends ParserRuleContext {
		
		/**
		 * When.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		
		/**
		 * Expression wrapper.
		 *
		 * @return the list
		 */
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @param i the i
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * Instantiates a new simple case when part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSimple_case_when_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSimple_case_when_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Simple case when part.
	 *
	 * @return the simple case when part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4562);
			match(WHEN);
			setState(4563);
			expression_wrapper();
			setState(4564);
			match(THEN);
			setState(4567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				setState(4565);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4566);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Searched_case_statementContext.
	 */
	public static class Searched_case_statementContext extends ParserRuleContext {
		
		/** The ck 1. */
		public Token ck1;
		
		/**
		 * End.
		 *
		 * @return the terminal node
		 */
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		
		/**
		 * Case.
		 *
		 * @return the list
		 */
		public List<TerminalNode> CASE() { return getTokens(HanaParser.CASE); }
		
		/**
		 * Case.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode CASE(int i) {
			return getToken(HanaParser.CASE, i);
		}
		
		/**
		 * Label name.
		 *
		 * @return the list
		 */
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		
		/**
		 * Label name.
		 *
		 * @param i the i
		 * @return the label name context
		 */
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		
		/**
		 * Searched case when part.
		 *
		 * @return the list
		 */
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		
		/**
		 * Searched case when part.
		 *
		 * @param i the i
		 * @return the searched case when part context
		 */
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		
		/**
		 * Case else part.
		 *
		 * @return the case else part context
		 */
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		
		/**
		 * Instantiates a new searched case statement context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSearched_case_statement(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSearched_case_statement(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Searched case statement.
	 *
	 * @return the searched case statement context
	 * @throws RecognitionException the recognition exception
	 */
	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(4569);
				label_name();
				}
			}

			setState(4572);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4574); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4573);
				searched_case_when_part();
				}
				}
				setState(4576); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4578);
				case_else_part();
				}
			}

			setState(4581);
			match(END);
			setState(4583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				{
				setState(4582);
				match(CASE);
				}
				break;
			}
			setState(4586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(4585);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Searched_case_when_partContext.
	 */
	public static class Searched_case_when_partContext extends ParserRuleContext {
		
		/**
		 * When.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		
		/**
		 * Condition wrapper.
		 *
		 * @return the condition wrapper context
		 */
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		
		/**
		 * Then.
		 *
		 * @return the terminal node
		 */
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new searched case when part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSearched_case_when_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSearched_case_when_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Searched case when part.
	 *
	 * @return the searched case when part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4588);
			match(WHEN);
			setState(4589);
			condition_wrapper();
			setState(4590);
			match(THEN);
			setState(4593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				{
				setState(4591);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4592);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Case_else_partContext.
	 */
	public static class Case_else_partContext extends ParserRuleContext {
		
		/**
		 * Else.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		
		/**
		 * Seq of statements.
		 *
		 * @return the seq of statements context
		 */
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new case else part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCase_else_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCase_else_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Case else part.
	 *
	 * @return the case else part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4595);
			match(ELSE);
			setState(4598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				{
				setState(4596);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4597);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class AtomContext.
	 */
	public static class AtomContext extends ParserRuleContext {
		
		/**
		 * Table element.
		 *
		 * @return the table element context
		 */
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		
		/**
		 * Outer join sign.
		 *
		 * @return the outer join sign context
		 */
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Constant.
		 *
		 * @return the constant context
		 */
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		
		/**
		 * General element.
		 *
		 * @return the general element context
		 */
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Expression or vector.
		 *
		 * @return the expression or vector context
		 */
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		
		/**
		 * Subquery operation part.
		 *
		 * @return the list
		 */
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		
		/**
		 * Subquery operation part.
		 *
		 * @param i the i
		 * @return the subquery operation part context
		 */
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		
		/**
		 * Instantiates a new atom context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_atom; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAtom(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAtom(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Atom.
	 *
	 * @return the atom context
	 * @throws RecognitionException the recognition exception
	 */
	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_atom);
		try {
			int _alt;
			setState(4620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4600);
				table_element();
				setState(4601);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4603);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4604);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4605);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4606);
				match(LEFT_PAREN);
				setState(4618);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
				case 1:
					{
					setState(4607);
					subquery();
					setState(4608);
					match(RIGHT_PAREN);
					setState(4612);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,561,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4609);
							subquery_operation_part();
							}
							} 
						}
						setState(4614);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,561,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4615);
					expression_or_vector();
					setState(4616);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Expression_or_vectorContext.
	 */
	public static class Expression_or_vectorContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * Vector expr.
		 *
		 * @return the vector expr context
		 */
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		
		/**
		 * Instantiates a new expression or vector context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression_or_vector(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression_or_vector(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Expression or vector.
	 *
	 * @return the expression or vector context
	 * @throws RecognitionException the recognition exception
	 */
	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4622);
			expression();
			setState(4624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4623);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Vector_exprContext.
	 */
	public static class Vector_exprContext extends ParserRuleContext {
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Instantiates a new vector expr context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVector_expr(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVector_expr(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Vector expr.
	 *
	 * @return the vector expr context
	 * @throws RecognitionException the recognition exception
	 */
	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4626);
			match(COMMA);
			setState(4627);
			expression();
			setState(4632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4628);
				match(COMMA);
				setState(4629);
				expression();
				}
				}
				setState(4634);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Quantified_expressionContext.
	 */
	public static class Quantified_expressionContext extends ParserRuleContext {
		
		/**
		 * Some.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SOME() { return getToken(HanaParser.SOME, 0); }
		
		/**
		 * Exists.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXISTS() { return getToken(HanaParser.EXISTS, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * Any.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ANY() { return getToken(HanaParser.ANY, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Expression wrapper.
		 *
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new quantified expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuantified_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuantified_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Quantified expression.
	 *
	 * @return the quantified expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4635);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				setState(4636);
				match(LEFT_PAREN);
				setState(4637);
				subquery();
				setState(4638);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4640);
				match(LEFT_PAREN);
				setState(4641);
				expression_wrapper();
				setState(4642);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Standard_functionContext.
	 */
	public static class Standard_functionContext extends ParserRuleContext {
		
		/**
		 * Over clause keyword.
		 *
		 * @return the over clause keyword context
		 */
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		
		/**
		 * Function argument analytic.
		 *
		 * @return the function argument analytic context
		 */
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		
		/**
		 * Over clause.
		 *
		 * @return the over clause context
		 */
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		
		/**
		 * Regular id.
		 *
		 * @return the regular id context
		 */
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		
		/**
		 * Function argument modeling.
		 *
		 * @return the function argument modeling context
		 */
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		
		/**
		 * Using clause.
		 *
		 * @return the using clause context
		 */
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		
		/**
		 * Count.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COUNT() { return getToken(HanaParser.COUNT, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * Asterisk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the list
		 */
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		
		/**
		 * Concatenation wrapper.
		 *
		 * @param i the i
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		
		/**
		 * Distinct.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DISTINCT() { return getToken(HanaParser.DISTINCT, 0); }
		
		/**
		 * Unique.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNIQUE() { return getToken(HanaParser.UNIQUE, 0); }
		
		/**
		 * All.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Cast.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CAST() { return getToken(HanaParser.CAST, 0); }
		
		/**
		 * Xmlcast.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLCAST() { return getToken(HanaParser.XMLCAST, 0); }
		
		/**
		 * Multiset.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MULTISET() { return getToken(HanaParser.MULTISET, 0); }
		
		/**
		 * Subquery.
		 *
		 * @return the subquery context
		 */
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		
		/**
		 * Chr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHR() { return getToken(HanaParser.CHR, 0); }
		
		/**
		 * Using.
		 *
		 * @return the terminal node
		 */
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		
		/**
		 * Nchar cs.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NCHAR_CS() { return getToken(HanaParser.NCHAR_CS, 0); }
		
		/**
		 * Collect.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COLLECT() { return getToken(HanaParser.COLLECT, 0); }
		
		/**
		 * Collect order by part.
		 *
		 * @return the collect order by part context
		 */
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		
		/**
		 * Within or over clause keyword.
		 *
		 * @return the within or over clause keyword context
		 */
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		
		/**
		 * Function argument.
		 *
		 * @return the function argument context
		 */
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		
		/**
		 * Within or over part.
		 *
		 * @return the list
		 */
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		
		/**
		 * Within or over part.
		 *
		 * @param i the i
		 * @return the within or over part context
		 */
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		
		/**
		 * Decompose.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECOMPOSE() { return getToken(HanaParser.DECOMPOSE, 0); }
		
		/**
		 * Canonical.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CANONICAL() { return getToken(HanaParser.CANONICAL, 0); }
		
		/**
		 * Compatibility.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMPATIBILITY() { return getToken(HanaParser.COMPATIBILITY, 0); }
		
		/**
		 * Extract.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXTRACT() { return getToken(HanaParser.EXTRACT, 0); }
		
		/**
		 * From.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FROM() { return getToken(HanaParser.FROM, 0); }
		
		/**
		 * First value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FIRST_VALUE() { return getToken(HanaParser.FIRST_VALUE, 0); }
		
		/**
		 * Last value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LAST_VALUE() { return getToken(HanaParser.LAST_VALUE, 0); }
		
		/**
		 * Respect or ignore nulls.
		 *
		 * @return the respect or ignore nulls context
		 */
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		
		/**
		 * Standard prediction function keyword.
		 *
		 * @return the standard prediction function keyword context
		 */
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @return the list
		 */
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @param i the i
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Cost matrix clause.
		 *
		 * @return the cost matrix clause context
		 */
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		
		/**
		 * Translate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRANSLATE() { return getToken(HanaParser.TRANSLATE, 0); }
		
		/**
		 * Char cs.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_CS() { return getToken(HanaParser.CHAR_CS, 0); }
		
		/**
		 * Treat.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TREAT() { return getToken(HanaParser.TREAT, 0); }
		
		/**
		 * Ref.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REF() { return getToken(HanaParser.REF, 0); }
		
		/**
		 * Trim.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRIM() { return getToken(HanaParser.TRIM, 0); }
		
		/**
		 * Quoted string.
		 *
		 * @return the quoted string context
		 */
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		
		/**
		 * Leading.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEADING() { return getToken(HanaParser.LEADING, 0); }
		
		/**
		 * Trailing.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRAILING() { return getToken(HanaParser.TRAILING, 0); }
		
		/**
		 * Both.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BOTH() { return getToken(HanaParser.BOTH, 0); }
		
		/**
		 * Xmlagg.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLAGG() { return getToken(HanaParser.XMLAGG, 0); }
		
		/**
		 * Order by clause.
		 *
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * General element part.
		 *
		 * @return the general element part context
		 */
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		
		/**
		 * Xml multiuse expression element.
		 *
		 * @return the list
		 */
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		
		/**
		 * Xml multiuse expression element.
		 *
		 * @param i the i
		 * @return the xml multiuse expression element context
		 */
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		
		/**
		 * Xmlcolattval.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLCOLATTVAL() { return getToken(HanaParser.XMLCOLATTVAL, 0); }
		
		/**
		 * Xmlforest.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLFOREST() { return getToken(HanaParser.XMLFOREST, 0); }
		
		/**
		 * Xmlelement.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLELEMENT() { return getToken(HanaParser.XMLELEMENT, 0); }
		
		/**
		 * Xml attributes clause.
		 *
		 * @return the xml attributes clause context
		 */
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		
		/**
		 * Entityescaping.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ENTITYESCAPING() { return getToken(HanaParser.ENTITYESCAPING, 0); }
		
		/**
		 * Noentityescaping.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOENTITYESCAPING() { return getToken(HanaParser.NOENTITYESCAPING, 0); }
		
		/**
		 * Name.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		
		/**
		 * Evalname.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EVALNAME() { return getToken(HanaParser.EVALNAME, 0); }
		
		/**
		 * Column alias.
		 *
		 * @return the list
		 */
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		
		/**
		 * Column alias.
		 *
		 * @param i the i
		 * @return the column alias context
		 */
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		
		/**
		 * Xmlexists.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLEXISTS() { return getToken(HanaParser.XMLEXISTS, 0); }
		
		/**
		 * Xml passing clause.
		 *
		 * @return the xml passing clause context
		 */
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		
		/**
		 * Xmlparse.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLPARSE() { return getToken(HanaParser.XMLPARSE, 0); }
		
		/**
		 * Document.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DOCUMENT() { return getToken(HanaParser.DOCUMENT, 0); }
		
		/**
		 * Content.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONTENT() { return getToken(HanaParser.CONTENT, 0); }
		
		/**
		 * Wellformed.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WELLFORMED() { return getToken(HanaParser.WELLFORMED, 0); }
		
		/**
		 * Xmlpi.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLPI() { return getToken(HanaParser.XMLPI, 0); }
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Xmlquery.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLQUERY() { return getToken(HanaParser.XMLQUERY, 0); }
		
		/**
		 * Returning.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURNING() { return getToken(HanaParser.RETURNING, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * On.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		
		/**
		 * Empty.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EMPTY() { return getToken(HanaParser.EMPTY, 0); }
		
		/**
		 * Xmlroot.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLROOT() { return getToken(HanaParser.XMLROOT, 0); }
		
		/**
		 * Xmlroot param version part.
		 *
		 * @return the xmlroot param version part context
		 */
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		
		/**
		 * Xmlroot param standalone part.
		 *
		 * @return the xmlroot param standalone part context
		 */
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		
		/**
		 * Xmlserialize.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLSERIALIZE() { return getToken(HanaParser.XMLSERIALIZE, 0); }
		
		/**
		 * Xmlserialize param enconding part.
		 *
		 * @return the xmlserialize param enconding part context
		 */
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		
		/**
		 * Xmlserialize param version part.
		 *
		 * @return the xmlserialize param version part context
		 */
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		
		/**
		 * Xmlserialize param ident part.
		 *
		 * @return the xmlserialize param ident part context
		 */
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		
		/**
		 * Defaults.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULTS() { return getToken(HanaParser.DEFAULTS, 0); }
		
		/**
		 * Hide.
		 *
		 * @return the terminal node
		 */
		public TerminalNode HIDE() { return getToken(HanaParser.HIDE, 0); }
		
		/**
		 * Show.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SHOW() { return getToken(HanaParser.SHOW, 0); }
		
		/**
		 * Xmltable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLTABLE() { return getToken(HanaParser.XMLTABLE, 0); }
		
		/**
		 * Xml namespaces clause.
		 *
		 * @return the xml namespaces clause context
		 */
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		
		/**
		 * Columns.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COLUMNS() { return getToken(HanaParser.COLUMNS, 0); }
		
		/**
		 * Xml table column.
		 *
		 * @return the list
		 */
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		
		/**
		 * Xml table column.
		 *
		 * @param i the i
		 * @return the xml table column context
		 */
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		
		/**
		 * Instantiates a new standard function context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_standard_function; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStandard_function(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStandard_function(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStandard_function(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Standard function.
	 *
	 * @return the standard function context
	 * @throws RecognitionException the recognition exception
	 */
	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(4960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4646);
				over_clause_keyword();
				setState(4647);
				function_argument_analytic();
				setState(4649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
				case 1:
					{
					setState(4648);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4651);
				regular_id();
				setState(4652);
				function_argument_modeling();
				setState(4654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
				case 1:
					{
					setState(4653);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4656);
				match(COUNT);
				setState(4657);
				match(LEFT_PAREN);
				setState(4663);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4658);
					match(ASTERISK);
					}
					break;
				case T__5:
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREAK:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE_REGEXPR:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TINYINT:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case SQL_ERROR_CODE:
				case SQL_ERROR_MESSAGE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4660);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
					case 1:
						{
						setState(4659);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(4662);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4665);
				match(RIGHT_PAREN);
				setState(4667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(4666);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4669);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4670);
				match(LEFT_PAREN);
				setState(4677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
				case 1:
					{
					setState(4671);
					match(MULTISET);
					setState(4672);
					match(LEFT_PAREN);
					setState(4673);
					subquery();
					setState(4674);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4676);
					concatenation_wrapper();
					}
					break;
				}
				setState(4679);
				match(AS);
				setState(4680);
				type_spec();
				setState(4681);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4683);
				match(CHR);
				setState(4684);
				match(LEFT_PAREN);
				setState(4685);
				concatenation_wrapper();
				setState(4686);
				match(USING);
				setState(4687);
				match(NCHAR_CS);
				setState(4688);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4690);
				match(COLLECT);
				setState(4691);
				match(LEFT_PAREN);
				setState(4693);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(4692);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4695);
				concatenation_wrapper();
				setState(4697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4696);
					collect_order_by_part();
					}
				}

				setState(4699);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4701);
				within_or_over_clause_keyword();
				setState(4702);
				function_argument();
				setState(4704); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4703);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4706); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4708);
				match(DECOMPOSE);
				setState(4709);
				match(LEFT_PAREN);
				setState(4710);
				concatenation_wrapper();
				setState(4712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4711);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4714);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4716);
				match(EXTRACT);
				setState(4717);
				match(LEFT_PAREN);
				setState(4718);
				regular_id();
				setState(4719);
				match(FROM);
				setState(4720);
				concatenation_wrapper();
				setState(4721);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4723);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4724);
				function_argument_analytic();
				setState(4726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4725);
					respect_or_ignore_nulls();
					}
				}

				setState(4728);
				over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4730);
				standard_prediction_function_keyword();
				setState(4731);
				match(LEFT_PAREN);
				setState(4732);
				expression_wrapper();
				setState(4737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4733);
					match(COMMA);
					setState(4734);
					expression_wrapper();
					}
					}
					setState(4739);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4740);
					cost_matrix_clause();
					}
				}

				setState(4744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4743);
					using_clause();
					}
				}

				setState(4746);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4748);
				match(TRANSLATE);
				setState(4749);
				match(LEFT_PAREN);
				setState(4750);
				expression_wrapper();
				setState(4753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4751);
					match(USING);
					setState(4752);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4759);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4755);
					match(COMMA);
					setState(4756);
					expression_wrapper();
					}
					}
					setState(4761);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4762);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4764);
				match(TREAT);
				setState(4765);
				match(LEFT_PAREN);
				setState(4766);
				expression_wrapper();
				setState(4767);
				match(AS);
				setState(4769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(4768);
					match(REF);
					}
					break;
				}
				setState(4771);
				type_spec();
				setState(4772);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4774);
				match(TRIM);
				setState(4775);
				match(LEFT_PAREN);
				setState(4783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(4777);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4776);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4780);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4779);
						quoted_string();
						}
					}

					setState(4782);
					match(FROM);
					}
					break;
				}
				setState(4785);
				concatenation_wrapper();
				setState(4786);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4788);
				match(XMLAGG);
				setState(4789);
				match(LEFT_PAREN);
				setState(4790);
				expression_wrapper();
				setState(4792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4791);
					order_by_clause();
					}
				}

				setState(4794);
				match(RIGHT_PAREN);
				setState(4797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(4795);
					match(PERIOD);
					setState(4796);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4799);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4800);
				match(LEFT_PAREN);
				setState(4801);
				xml_multiuse_expression_element();
				setState(4806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4802);
					match(COMMA);
					setState(4803);
					xml_multiuse_expression_element();
					}
					}
					setState(4808);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4809);
				match(RIGHT_PAREN);
				setState(4812);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(4810);
					match(PERIOD);
					setState(4811);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4814);
				match(XMLELEMENT);
				setState(4815);
				match(LEFT_PAREN);
				setState(4817);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					setState(4816);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
				case 1:
					{
					setState(4819);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4822);
				expression_wrapper();
				setState(4825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(4823);
					match(COMMA);
					setState(4824);
					xml_attributes_clause();
					}
					break;
				}
				setState(4834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4827);
					match(COMMA);
					setState(4828);
					expression_wrapper();
					setState(4830);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
						{
						setState(4829);
						column_alias();
						}
					}

					}
					}
					setState(4836);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4837);
				match(RIGHT_PAREN);
				setState(4840);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					setState(4838);
					match(PERIOD);
					setState(4839);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4842);
				match(XMLEXISTS);
				setState(4843);
				match(LEFT_PAREN);
				setState(4844);
				expression_wrapper();
				setState(4846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4845);
					xml_passing_clause();
					}
				}

				setState(4848);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4850);
				match(XMLPARSE);
				setState(4851);
				match(LEFT_PAREN);
				setState(4852);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4853);
				concatenation_wrapper();
				setState(4855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4854);
					match(WELLFORMED);
					}
				}

				setState(4857);
				match(RIGHT_PAREN);
				setState(4860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(4858);
					match(PERIOD);
					setState(4859);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4862);
				match(XMLPI);
				setState(4863);
				match(LEFT_PAREN);
				setState(4868);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4864);
					match(NAME);
					setState(4865);
					id();
					}
					break;
				case EVALNAME:
					{
					setState(4866);
					match(EVALNAME);
					setState(4867);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4870);
					match(COMMA);
					setState(4871);
					concatenation_wrapper();
					}
				}

				setState(4874);
				match(RIGHT_PAREN);
				setState(4877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(4875);
					match(PERIOD);
					setState(4876);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4879);
				match(XMLQUERY);
				setState(4880);
				match(LEFT_PAREN);
				setState(4881);
				concatenation_wrapper();
				setState(4883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4882);
					xml_passing_clause();
					}
				}

				setState(4885);
				match(RETURNING);
				setState(4886);
				match(CONTENT);
				setState(4890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4887);
					match(NULL);
					setState(4888);
					match(ON);
					setState(4889);
					match(EMPTY);
					}
				}

				setState(4892);
				match(RIGHT_PAREN);
				setState(4895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(4893);
					match(PERIOD);
					setState(4894);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4897);
				match(XMLROOT);
				setState(4898);
				match(LEFT_PAREN);
				setState(4899);
				concatenation_wrapper();
				setState(4902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(4900);
					match(COMMA);
					setState(4901);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(4906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4904);
					match(COMMA);
					setState(4905);
					xmlroot_param_standalone_part();
					}
				}

				setState(4908);
				match(RIGHT_PAREN);
				setState(4911);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(4909);
					match(PERIOD);
					setState(4910);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4913);
				match(XMLSERIALIZE);
				setState(4914);
				match(LEFT_PAREN);
				setState(4915);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4916);
				concatenation_wrapper();
				setState(4919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4917);
					match(AS);
					setState(4918);
					type_spec();
					}
				}

				setState(4922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4921);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4924);
					xmlserialize_param_version_part();
					}
				}

				setState(4928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4927);
					xmlserialize_param_ident_part();
					}
				}

				setState(4932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4930);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4931);
					match(DEFAULTS);
					}
				}

				setState(4934);
				match(RIGHT_PAREN);
				setState(4937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(4935);
					match(PERIOD);
					setState(4936);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4939);
				match(XMLTABLE);
				setState(4940);
				match(LEFT_PAREN);
				setState(4942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4941);
					xml_namespaces_clause();
					}
					break;
				}
				setState(4944);
				concatenation_wrapper();
				setState(4946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4945);
					xml_passing_clause();
					}
				}

				setState(4953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(4948);
					match(COLUMNS);
					setState(4949);
					xml_table_column();
					{
					setState(4950);
					match(COMMA);
					setState(4951);
					xml_table_column();
					}
					}
				}

				setState(4955);
				match(RIGHT_PAREN);
				setState(4958);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(4956);
					match(PERIOD);
					setState(4957);
					general_element_part();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Over_clause_keywordContext.
	 */
	public static class Over_clause_keywordContext extends ParserRuleContext {
		
		/**
		 * Avg.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AVG() { return getToken(HanaParser.AVG, 0); }
		
		/**
		 * Corr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CORR() { return getToken(HanaParser.CORR, 0); }
		
		/**
		 * Lag.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LAG() { return getToken(HanaParser.LAG, 0); }
		
		/**
		 * Lead.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEAD() { return getToken(HanaParser.LEAD, 0); }
		
		/**
		 * Max.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAX() { return getToken(HanaParser.MAX, 0); }
		
		/**
		 * Median.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEDIAN() { return getToken(HanaParser.MEDIAN, 0); }
		
		/**
		 * Min.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MIN() { return getToken(HanaParser.MIN, 0); }
		
		/**
		 * Ntile.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NTILE() { return getToken(HanaParser.NTILE, 0); }
		
		/**
		 * Ratio to report.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RATIO_TO_REPORT() { return getToken(HanaParser.RATIO_TO_REPORT, 0); }
		
		/**
		 * Row number.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROW_NUMBER() { return getToken(HanaParser.ROW_NUMBER, 0); }
		
		/**
		 * Sum.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUM() { return getToken(HanaParser.SUM, 0); }
		
		/**
		 * Variance.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARIANCE() { return getToken(HanaParser.VARIANCE, 0); }
		
		/**
		 * Regr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REGR_() { return getToken(HanaParser.REGR_, 0); }
		
		/**
		 * Stddev.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STDDEV() { return getToken(HanaParser.STDDEV, 0); }
		
		/**
		 * Var.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VAR_() { return getToken(HanaParser.VAR_, 0); }
		
		/**
		 * Covar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COVAR_() { return getToken(HanaParser.COVAR_, 0); }
		
		/**
		 * Instantiates a new over clause keyword context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOver_clause_keyword(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOver_clause_keyword(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Over clause keyword.
	 *
	 * @return the over clause keyword context
	 * @throws RecognitionException the recognition exception
	 */
	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4962);
			_la = _input.LA(1);
			if ( !(((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (AVG - 510)) | (1L << (CORR - 510)) | (1L << (LAG - 510)) | (1L << (LEAD - 510)) | (1L << (MAX - 510)) | (1L << (MEDIAN - 510)) | (1L << (MIN - 510)) | (1L << (NTILE - 510)) | (1L << (RATIO_TO_REPORT - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (SUM - 510)) | (1L << (VARIANCE - 510)) | (1L << (REGR_ - 510)) | (1L << (STDDEV - 510)) | (1L << (VAR_ - 510)) | (1L << (COVAR_ - 510)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Within_or_over_clause_keywordContext.
	 */
	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		
		/**
		 * Cume dist.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CUME_DIST() { return getToken(HanaParser.CUME_DIST, 0); }
		
		/**
		 * Dense rank.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DENSE_RANK() { return getToken(HanaParser.DENSE_RANK, 0); }
		
		/**
		 * Listagg.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LISTAGG() { return getToken(HanaParser.LISTAGG, 0); }
		
		/**
		 * Percent rank.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENT_RANK() { return getToken(HanaParser.PERCENT_RANK, 0); }
		
		/**
		 * Percentile cont.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENTILE_CONT() { return getToken(HanaParser.PERCENTILE_CONT, 0); }
		
		/**
		 * Percentile disc.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENTILE_DISC() { return getToken(HanaParser.PERCENTILE_DISC, 0); }
		
		/**
		 * Rank.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RANK() { return getToken(HanaParser.RANK, 0); }
		
		/**
		 * Instantiates a new within or over clause keyword context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Within or over clause keyword.
	 *
	 * @return the within or over clause keyword context
	 * @throws RecognitionException the recognition exception
	 */
	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4964);
			_la = _input.LA(1);
			if ( !(((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (CUME_DIST - 503)) | (1L << (DENSE_RANK - 503)) | (1L << (LISTAGG - 503)) | (1L << (PERCENT_RANK - 503)) | (1L << (PERCENTILE_CONT - 503)) | (1L << (PERCENTILE_DISC - 503)) | (1L << (RANK - 503)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Standard_prediction_function_keywordContext.
	 */
	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		
		/**
		 * Prediction.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION() { return getToken(HanaParser.PREDICTION, 0); }
		
		/**
		 * Prediction bounds.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_BOUNDS() { return getToken(HanaParser.PREDICTION_BOUNDS, 0); }
		
		/**
		 * Prediction cost.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_COST() { return getToken(HanaParser.PREDICTION_COST, 0); }
		
		/**
		 * Prediction details.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_DETAILS() { return getToken(HanaParser.PREDICTION_DETAILS, 0); }
		
		/**
		 * Prediction probability.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(HanaParser.PREDICTION_PROBABILITY, 0); }
		
		/**
		 * Prediction set.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_SET() { return getToken(HanaParser.PREDICTION_SET, 0); }
		
		/**
		 * Instantiates a new standard prediction function keyword context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStandard_prediction_function_keyword(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStandard_prediction_function_keyword(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Standard prediction function keyword.
	 *
	 * @return the standard prediction function keyword context
	 * @throws RecognitionException the recognition exception
	 */
	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4966);
			_la = _input.LA(1);
			if ( !(((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & ((1L << (PREDICTION - 497)) | (1L << (PREDICTION_BOUNDS - 497)) | (1L << (PREDICTION_COST - 497)) | (1L << (PREDICTION_DETAILS - 497)) | (1L << (PREDICTION_PROBABILITY - 497)) | (1L << (PREDICTION_SET - 497)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Over_clauseContext.
	 */
	public static class Over_clauseContext extends ParserRuleContext {
		
		/**
		 * Over.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OVER() { return getToken(HanaParser.OVER, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Query partition clause.
		 *
		 * @return the query partition clause context
		 */
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		
		/**
		 * Order by clause.
		 *
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		
		/**
		 * Windowing clause.
		 *
		 * @return the windowing clause context
		 */
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new over clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_over_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOver_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOver_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Over clause.
	 *
	 * @return the over clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4968);
			match(OVER);
			setState(4969);
			match(LEFT_PAREN);
			setState(4971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4970);
				query_partition_clause();
				}
			}

			setState(4977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4973);
				order_by_clause();
				setState(4975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4974);
					windowing_clause();
					}
				}

				}
			}

			setState(4979);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Windowing_clauseContext.
	 */
	public static class Windowing_clauseContext extends ParserRuleContext {
		
		/**
		 * Windowing type.
		 *
		 * @return the windowing type context
		 */
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		
		/**
		 * Between.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		
		/**
		 * Windowing elements.
		 *
		 * @return the list
		 */
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		
		/**
		 * Windowing elements.
		 *
		 * @param i the i
		 * @return the windowing elements context
		 */
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		
		/**
		 * And.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		
		/**
		 * Instantiates a new windowing clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWindowing_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWindowing_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Windowing clause.
	 *
	 * @return the windowing clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4981);
			windowing_type();
			setState(4988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4982);
				match(BETWEEN);
				setState(4983);
				windowing_elements();
				setState(4984);
				match(AND);
				setState(4985);
				windowing_elements();
				}
				break;
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4987);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Windowing_typeContext.
	 */
	public static class Windowing_typeContext extends ParserRuleContext {
		
		/**
		 * Rows.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROWS() { return getToken(HanaParser.ROWS, 0); }
		
		/**
		 * Range.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RANGE() { return getToken(HanaParser.RANGE, 0); }
		
		/**
		 * Instantiates a new windowing type context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWindowing_type(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWindowing_type(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Windowing type.
	 *
	 * @return the windowing type context
	 * @throws RecognitionException the recognition exception
	 */
	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4990);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Windowing_elementsContext.
	 */
	public static class Windowing_elementsContext extends ParserRuleContext {
		
		/**
		 * Unbounded.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNBOUNDED() { return getToken(HanaParser.UNBOUNDED, 0); }
		
		/**
		 * Preceding.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRECEDING() { return getToken(HanaParser.PRECEDING, 0); }
		
		/**
		 * Current.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURRENT() { return getToken(HanaParser.CURRENT, 0); }
		
		/**
		 * Row.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROW() { return getToken(HanaParser.ROW, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		
		/**
		 * Following.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOLLOWING() { return getToken(HanaParser.FOLLOWING, 0); }
		
		/**
		 * Instantiates a new windowing elements context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWindowing_elements(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWindowing_elements(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Windowing elements.
	 *
	 * @return the windowing elements context
	 * @throws RecognitionException the recognition exception
	 */
	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_windowing_elements);
		int _la;
		try {
			setState(4999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4992);
				match(UNBOUNDED);
				setState(4993);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4994);
				match(CURRENT);
				setState(4995);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4996);
				concatenation_wrapper();
				setState(4997);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Using_clauseContext.
	 */
	public static class Using_clauseContext extends ParserRuleContext {
		
		/**
		 * Using.
		 *
		 * @return the terminal node
		 */
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		
		/**
		 * Asterisk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		
		/**
		 * Using element.
		 *
		 * @return the list
		 */
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		
		/**
		 * Using element.
		 *
		 * @param i the i
		 * @return the using element context
		 */
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new using clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_using_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUsing_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUsing_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Using clause.
	 *
	 * @return the using clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5001);
			match(USING);
			setState(5011);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(5002);
				match(ASTERISK);
				}
				break;
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case STRING_AGG:
			case CORR_SPEARMAN:
			case VAR:
			case STDDEV_POP:
			case VAR_POP:
			case STDDEV_SAMP:
			case VAR_SAMP:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5003);
				using_element();
				setState(5008);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,625,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5004);
						match(COMMA);
						setState(5005);
						using_element();
						}
						} 
					}
					setState(5010);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,625,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Using_elementContext.
	 */
	public static class Using_elementContext extends ParserRuleContext {
		
		/**
		 * Select list elements.
		 *
		 * @return the select list elements context
		 */
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		
		/**
		 * In.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		
		/**
		 * Out.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		
		/**
		 * Column alias.
		 *
		 * @return the column alias context
		 */
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		
		/**
		 * Instantiates a new using element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_using_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUsing_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUsing_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Using element.
	 *
	 * @return the using element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				setState(5013);
				match(IN);
				setState(5015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
				case 1:
					{
					setState(5014);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5017);
				match(OUT);
				}
				break;
			}
			setState(5020);
			select_list_elements();
			setState(5022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				setState(5021);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Collect_order_by_partContext.
	 */
	public static class Collect_order_by_partContext extends ParserRuleContext {
		
		/**
		 * Order.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new collect order by part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCollect_order_by_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCollect_order_by_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Collect order by part.
	 *
	 * @return the collect order by part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5024);
			match(ORDER);
			setState(5025);
			match(BY);
			setState(5026);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Within_or_over_partContext.
	 */
	public static class Within_or_over_partContext extends ParserRuleContext {
		
		/**
		 * Within.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITHIN() { return getToken(HanaParser.WITHIN, 0); }
		
		/**
		 * Group.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GROUP() { return getToken(HanaParser.GROUP, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Order by clause.
		 *
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Over clause.
		 *
		 * @return the over clause context
		 */
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new within or over part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWithin_or_over_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWithin_or_over_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Within or over part.
	 *
	 * @return the within or over part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_within_or_over_part);
		try {
			setState(5035);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5028);
				match(WITHIN);
				setState(5029);
				match(GROUP);
				setState(5030);
				match(LEFT_PAREN);
				setState(5031);
				order_by_clause();
				setState(5032);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5034);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cost_matrix_clauseContext.
	 */
	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		
		/**
		 * Cost.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COST() { return getToken(HanaParser.COST, 0); }
		
		/**
		 * Model.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MODEL() { return getToken(HanaParser.MODEL, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Cost class name.
		 *
		 * @return the list
		 */
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		
		/**
		 * Cost class name.
		 *
		 * @param i the i
		 * @return the cost class name context
		 */
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Values.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUES() { return getToken(HanaParser.VALUES, 0); }
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Auto.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTO() { return getToken(HanaParser.AUTO, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Instantiates a new cost matrix clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCost_matrix_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCost_matrix_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cost matrix clause.
	 *
	 * @return the cost matrix clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5037);
			match(COST);
			setState(5055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(5038);
				match(MODEL);
				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(5039);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(5042);
				match(LEFT_PAREN);
				setState(5043);
				cost_class_name();
				setState(5048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5044);
					match(COMMA);
					setState(5045);
					cost_class_name();
					}
					}
					setState(5050);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5051);
				match(RIGHT_PAREN);
				setState(5052);
				match(VALUES);
				setState(5053);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xml_passing_clauseContext.
	 */
	public static class Xml_passing_clauseContext extends ParserRuleContext {
		
		/**
		 * Passing.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PASSING() { return getToken(HanaParser.PASSING, 0); }
		
		/**
		 * Expression wrapper.
		 *
		 * @return the list
		 */
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @param i the i
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * By.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		
		/**
		 * Value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		
		/**
		 * Column alias.
		 *
		 * @return the list
		 */
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		
		/**
		 * Column alias.
		 *
		 * @param i the i
		 * @return the column alias context
		 */
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		
		/**
		 * Instantiates a new xml passing clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_passing_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_passing_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xml passing clause.
	 *
	 * @return the xml passing clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5057);
			match(PASSING);
			setState(5060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(5058);
				match(BY);
				setState(5059);
				match(VALUE);
				}
			}

			setState(5062);
			expression_wrapper();
			setState(5064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(5063);
				column_alias();
				}
			}

			{
			setState(5066);
			match(COMMA);
			setState(5067);
			expression_wrapper();
			setState(5069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				setState(5068);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xml_attributes_clauseContext.
	 */
	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		
		/**
		 * Xmlattributes.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLATTRIBUTES() { return getToken(HanaParser.XMLATTRIBUTES, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Xml multiuse expression element.
		 *
		 * @return the list
		 */
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		
		/**
		 * Xml multiuse expression element.
		 *
		 * @param i the i
		 * @return the xml multiuse expression element context
		 */
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Entityescaping.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ENTITYESCAPING() { return getToken(HanaParser.ENTITYESCAPING, 0); }
		
		/**
		 * Noentityescaping.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOENTITYESCAPING() { return getToken(HanaParser.NOENTITYESCAPING, 0); }
		
		/**
		 * Schemacheck.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SCHEMACHECK() { return getToken(HanaParser.SCHEMACHECK, 0); }
		
		/**
		 * Noschemacheck.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOSCHEMACHECK() { return getToken(HanaParser.NOSCHEMACHECK, 0); }
		
		/**
		 * Instantiates a new xml attributes clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_attributes_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_attributes_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xml attributes clause.
	 *
	 * @return the xml attributes clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5071);
			match(XMLATTRIBUTES);
			setState(5072);
			match(LEFT_PAREN);
			setState(5074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(5073);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				{
				setState(5076);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5079);
			xml_multiuse_expression_element();
			setState(5084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5080);
				match(COMMA);
				setState(5081);
				xml_multiuse_expression_element();
				}
				}
				setState(5086);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5087);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xml_namespaces_clauseContext.
	 */
	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		
		/**
		 * Xmlnamespaces.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLNAMESPACES() { return getToken(HanaParser.XMLNAMESPACES, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the list
		 */
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		
		/**
		 * Concatenation wrapper.
		 *
		 * @param i the i
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		
		/**
		 * Column alias.
		 *
		 * @return the list
		 */
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		
		/**
		 * Column alias.
		 *
		 * @param i the i
		 * @return the column alias context
		 */
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Xml general default part.
		 *
		 * @return the xml general default part context
		 */
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		
		/**
		 * Instantiates a new xml namespaces clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_namespaces_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_namespaces_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xml namespaces clause.
	 *
	 * @return the xml namespaces clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5089);
			match(XMLNAMESPACES);
			setState(5090);
			match(LEFT_PAREN);
			setState(5094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				setState(5091);
				concatenation_wrapper();
				setState(5092);
				column_alias();
				}
				break;
			}
			setState(5102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5096);
				match(COMMA);
				setState(5097);
				concatenation_wrapper();
				setState(5098);
				column_alias();
				}
				}
				setState(5104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5105);
				xml_general_default_part();
				}
			}

			setState(5108);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xml_table_columnContext.
	 */
	public static class Xml_table_columnContext extends ParserRuleContext {
		
		/**
		 * Xml column name.
		 *
		 * @return the xml column name context
		 */
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Ordinality.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDINALITY() { return getToken(HanaParser.ORDINALITY, 0); }
		
		/**
		 * Type spec.
		 *
		 * @return the type spec context
		 */
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		
		/**
		 * Path.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PATH() { return getToken(HanaParser.PATH, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		
		/**
		 * Xml general default part.
		 *
		 * @return the xml general default part context
		 */
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		
		/**
		 * Instantiates a new xml table column context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_table_column(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_table_column(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xml table column.
	 *
	 * @return the xml table column context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5110);
			xml_column_name();
			setState(5121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(5111);
				match(FOR);
				setState(5112);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIGINT:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SECONDDATE:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5113);
				type_spec();
				setState(5116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(5114);
					match(PATH);
					setState(5115);
					concatenation_wrapper();
					}
				}

				setState(5119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(5118);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xml_general_default_partContext.
	 */
	public static class Xml_general_default_partContext extends ParserRuleContext {
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new xml general default part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_general_default_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_general_default_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xml general default part.
	 *
	 * @return the xml general default part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5123);
			match(DEFAULT);
			setState(5124);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xml_multiuse_expression_elementContext.
	 */
	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		
		/**
		 * Expression.
		 *
		 * @return the expression context
		 */
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Evalname.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EVALNAME() { return getToken(HanaParser.EVALNAME, 0); }
		
		/**
		 * Concatenation.
		 *
		 * @return the concatenation context
		 */
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		
		/**
		 * Instantiates a new xml multiuse expression element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_multiuse_expression_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_multiuse_expression_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xml multiuse expression element.
	 *
	 * @return the xml multiuse expression element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5126);
			expression();
			setState(5133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5127);
				match(AS);
				setState(5131);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					setState(5128);
					id_expression();
					}
					break;
				case 2:
					{
					setState(5129);
					match(EVALNAME);
					setState(5130);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xmlroot_param_version_partContext.
	 */
	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		
		/**
		 * Version.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VERSION() { return getToken(HanaParser.VERSION, 0); }
		
		/**
		 * No.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NO() { return getToken(HanaParser.NO, 0); }
		
		/**
		 * Value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		
		/**
		 * Expression wrapper.
		 *
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new xmlroot param version part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlroot_param_version_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlroot_param_version_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xmlroot param version part.
	 *
	 * @return the xmlroot param version part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5135);
			match(VERSION);
			setState(5139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(5136);
				match(NO);
				setState(5137);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(5138);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xmlroot_param_standalone_partContext.
	 */
	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		
		/**
		 * Standalone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STANDALONE() { return getToken(HanaParser.STANDALONE, 0); }
		
		/**
		 * Yes.
		 *
		 * @return the terminal node
		 */
		public TerminalNode YES() { return getToken(HanaParser.YES, 0); }
		
		/**
		 * No.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NO() { return getToken(HanaParser.NO, 0); }
		
		/**
		 * Value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		
		/**
		 * Instantiates a new xmlroot param standalone part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlroot_param_standalone_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlroot_param_standalone_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xmlroot param standalone part.
	 *
	 * @return the xmlroot param standalone part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5141);
			match(STANDALONE);
			setState(5147);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(5142);
				match(YES);
				}
				break;
			case NO:
				{
				setState(5143);
				match(NO);
				setState(5145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5144);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xmlserialize_param_enconding_partContext.
	 */
	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		
		/**
		 * Encoding.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ENCODING() { return getToken(HanaParser.ENCODING, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new xmlserialize param enconding part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xmlserialize param enconding part.
	 *
	 * @return the xmlserialize param enconding part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5149);
			match(ENCODING);
			setState(5150);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xmlserialize_param_version_partContext.
	 */
	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		
		/**
		 * Version.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VERSION() { return getToken(HanaParser.VERSION, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new xmlserialize param version part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlserialize_param_version_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlserialize_param_version_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xmlserialize param version part.
	 *
	 * @return the xmlserialize param version part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5152);
			match(VERSION);
			setState(5153);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xmlserialize_param_ident_partContext.
	 */
	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		
		/**
		 * No.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NO() { return getToken(HanaParser.NO, 0); }
		
		/**
		 * Indent.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDENT() { return getToken(HanaParser.INDENT, 0); }
		
		/**
		 * Size.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIZE() { return getToken(HanaParser.SIZE, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Concatenation wrapper.
		 *
		 * @return the concatenation wrapper context
		 */
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new xmlserialize param ident part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlserialize_param_ident_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlserialize_param_ident_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xmlserialize param ident part.
	 *
	 * @return the xmlserialize param ident part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(5163);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5155);
				match(NO);
				setState(5156);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5157);
				match(INDENT);
				setState(5161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(5158);
					match(SIZE);
					setState(5159);
					match(EQUALS_OP);
					setState(5160);
					concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sql_plus_commandContext.
	 */
	public static class Sql_plus_commandContext extends ParserRuleContext {
		
		/**
		 * Solidus.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SOLIDUS() { return getToken(HanaParser.SOLIDUS, 0); }
		
		/**
		 * Whenever command.
		 *
		 * @return the whenever command context
		 */
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		
		/**
		 * Exit command.
		 *
		 * @return the exit command context
		 */
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		
		/**
		 * Prompt command.
		 *
		 * @return the prompt command context
		 */
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		
		/**
		 * Sets the command.
		 *
		 * @return the sets the command context
		 */
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		
		/**
		 * Semicolon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		
		/**
		 * Instantiates a new sql plus command context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_plus_command(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_plus_command(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_plus_command(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sql plus command.
	 *
	 * @return the sql plus command context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_sql_plus_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5170);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(5165);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(5166);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(5167);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(5168);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(5169);
				set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(5172);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Whenever_commandContext.
	 */
	public static class Whenever_commandContext extends ParserRuleContext {
		
		/**
		 * Whenever.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHENEVER() { return getToken(HanaParser.WHENEVER, 0); }
		
		/**
		 * Sqlerror.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQLERROR() { return getToken(HanaParser.SQLERROR, 0); }
		
		/**
		 * Oserror.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OSERROR() { return getToken(HanaParser.OSERROR, 0); }
		
		/**
		 * Exit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		
		/**
		 * Continue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONTINUE() { return getToken(HanaParser.CONTINUE, 0); }
		
		/**
		 * Success.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUCCESS() { return getToken(HanaParser.SUCCESS, 0); }
		
		/**
		 * Failure.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FAILURE() { return getToken(HanaParser.FAILURE, 0); }
		
		/**
		 * Warning.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WARNING() { return getToken(HanaParser.WARNING, 0); }
		
		/**
		 * Commit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMIT() { return getToken(HanaParser.COMMIT, 0); }
		
		/**
		 * Rollback.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		
		/**
		 * None.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NONE() { return getToken(HanaParser.NONE, 0); }
		
		/**
		 * Instantiates a new whenever command context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWhenever_command(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWhenever_command(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWhenever_command(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Whenever command.
	 *
	 * @return the whenever command context
	 * @throws RecognitionException the recognition exception
	 */
	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5175);
			match(WHENEVER);
			setState(5176);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5182);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(5177);
				match(EXIT);
				setState(5178);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5179);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(5180);
				match(CONTINUE);
				setState(5181);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Set_commandContext.
	 */
	public static class Set_commandContext extends ParserRuleContext {
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Regular id.
		 *
		 * @return the list
		 */
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		
		/**
		 * Regular id.
		 *
		 * @param i the i
		 * @return the regular id context
		 */
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		
		/**
		 * Char string.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		
		/**
		 * On.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		
		/**
		 * Off.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OFF() { return getToken(HanaParser.OFF, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the numeric context
		 */
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		
		/**
		 * Instantiates a new sets the command context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_set_command; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_command(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_command(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_command(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sets the command.
	 *
	 * @return the sets the command context
	 * @throws RecognitionException the recognition exception
	 */
	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5184);
			match(SET);
			setState(5185);
			regular_id();
			setState(5191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5186);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(5187);
				match(ON);
				}
				break;
			case 3:
				{
				setState(5188);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(5189);
				numeric();
				}
				break;
			case 5:
				{
				setState(5190);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Exit_commandContext.
	 */
	public static class Exit_commandContext extends ParserRuleContext {
		
		/**
		 * Exit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		
		/**
		 * Instantiates a new exit command context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_exit_command; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExit_command(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExit_command(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExit_command(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Exit command.
	 *
	 * @return the exit command context
	 * @throws RecognitionException the recognition exception
	 */
	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5193);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Prompt_commandContext.
	 */
	public static class Prompt_commandContext extends ParserRuleContext {
		
		/**
		 * Prompt.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PROMPT() { return getToken(HanaParser.PROMPT, 0); }
		
		/**
		 * Instantiates a new prompt command context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPrompt_command(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPrompt_command(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPrompt_command(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Prompt command.
	 *
	 * @return the prompt command context
	 * @throws RecognitionException the recognition exception
	 */
	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5195);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Partition_extension_clauseContext.
	 */
	public static class Partition_extension_clauseContext extends ParserRuleContext {
		
		/**
		 * Expression list.
		 *
		 * @return the expression list context
		 */
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		
		/**
		 * Subpartition.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUBPARTITION() { return getToken(HanaParser.SUBPARTITION, 0); }
		
		/**
		 * Partition.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PARTITION() { return getToken(HanaParser.PARTITION, 0); }
		
		/**
		 * For.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		
		/**
		 * Instantiates a new partition extension clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPartition_extension_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPartition_extension_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Partition extension clause.
	 *
	 * @return the partition extension clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5197);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5198);
				match(FOR);
				}
			}

			setState(5201);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Column_aliasContext.
	 */
	public static class Column_aliasContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Alias quoted string.
		 *
		 * @return the alias quoted string context
		 */
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		
		/**
		 * As.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		
		/**
		 * Instantiates a new column alias context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_column_alias; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_alias(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_alias(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Column alias.
	 *
	 * @return the column alias context
	 * @throws RecognitionException the recognition exception
	 */
	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_column_alias);
		int _la;
		try {
			setState(5211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5203);
					match(AS);
					}
				}

				setState(5208);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREAK:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE_REGEXPR:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TINYINT:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5206);
					id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5207);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5210);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_aliasContext.
	 */
	public static class Table_aliasContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Alias quoted string.
		 *
		 * @return the alias quoted string context
		 */
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		
		/**
		 * Instantiates a new table alias context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_alias; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_alias(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_alias(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table alias.
	 *
	 * @return the table alias context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5213);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(5214);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Alias_quoted_stringContext.
	 */
	public static class Alias_quoted_stringContext extends ParserRuleContext {
		
		/**
		 * Quoted string.
		 *
		 * @return the quoted string context
		 */
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		
		/**
		 * Instantiates a new alias quoted string context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAlias_quoted_string(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAlias_quoted_string(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Alias quoted string.
	 *
	 * @return the alias quoted string context
	 * @throws RecognitionException the recognition exception
	 */
	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5217);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Where_clauseContext.
	 */
	public static class Where_clauseContext extends ParserRuleContext {
		
		/**
		 * Where.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHERE() { return getToken(HanaParser.WHERE, 0); }
		
		/**
		 * Current of clause.
		 *
		 * @return the current of clause context
		 */
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		
		/**
		 * Condition wrapper.
		 *
		 * @return the condition wrapper context
		 */
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		
		/**
		 * Instantiates a new where clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_where_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWhere_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWhere_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Where clause.
	 *
	 * @return the where clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5219);
			match(WHERE);
			setState(5222);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(5220);
				current_of_clause();
				}
				break;
			case T__5:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case STRING_AGG:
			case CORR_SPEARMAN:
			case VAR:
			case STDDEV_POP:
			case VAR_POP:
			case STDDEV_SAMP:
			case VAR_SAMP:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5221);
				condition_wrapper();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Current_of_clauseContext.
	 */
	public static class Current_of_clauseContext extends ParserRuleContext {
		
		/**
		 * Current.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURRENT() { return getToken(HanaParser.CURRENT, 0); }
		
		/**
		 * Of.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		
		/**
		 * Cursor name.
		 *
		 * @return the cursor name context
		 */
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new current of clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCurrent_of_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCurrent_of_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Current of clause.
	 *
	 * @return the current of clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5224);
			match(CURRENT);
			setState(5225);
			match(OF);
			setState(5226);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Into_clauseContext.
	 */
	public static class Into_clauseContext extends ParserRuleContext {
		
		/**
		 * Into.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		
		/**
		 * Variable name.
		 *
		 * @return the list
		 */
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		
		/**
		 * Variable name.
		 *
		 * @param i the i
		 * @return the variable name context
		 */
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Bulk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BULK() { return getToken(HanaParser.BULK, 0); }
		
		/**
		 * Collect.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COLLECT() { return getToken(HanaParser.COLLECT, 0); }
		
		/**
		 * Instantiates a new into clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_into_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInto_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInto_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Into clause.
	 *
	 * @return the into clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_into_clause);
		try {
			int _alt;
			setState(5248);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5228);
				match(INTO);
				setState(5229);
				variable_name();
				setState(5234);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5230);
						match(COMMA);
						setState(5231);
						variable_name();
						}
						} 
					}
					setState(5236);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5237);
				match(BULK);
				setState(5238);
				match(COLLECT);
				setState(5239);
				match(INTO);
				setState(5240);
				variable_name();
				setState(5245);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,664,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5241);
						match(COMMA);
						setState(5242);
						variable_name();
						}
						} 
					}
					setState(5247);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,664,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Xml_column_nameContext.
	 */
	public static class Xml_column_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Quoted string.
		 *
		 * @return the quoted string context
		 */
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		
		/**
		 * Instantiates a new xml column name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_column_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_column_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Xml column name.
	 *
	 * @return the xml column name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_xml_column_name);
		try {
			setState(5252);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5250);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5251);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cost_class_nameContext.
	 */
	public static class Cost_class_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new cost class name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCost_class_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCost_class_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cost class name.
	 *
	 * @return the cost class name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5254);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Attribute_nameContext.
	 */
	public static class Attribute_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new attribute name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAttribute_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAttribute_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Attribute name.
	 *
	 * @return the attribute name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5256);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Savepoint_nameContext.
	 */
	public static class Savepoint_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new savepoint name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSavepoint_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSavepoint_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Savepoint name.
	 *
	 * @return the savepoint name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5258);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Rollback_segment_nameContext.
	 */
	public static class Rollback_segment_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new rollback segment name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRollback_segment_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRollback_segment_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Rollback segment name.
	 *
	 * @return the rollback segment name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5260);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_var_nameContext.
	 */
	public static class Table_var_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new table var name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_var_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_var_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table var name.
	 *
	 * @return the table var name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5262);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Schema_nameContext.
	 */
	public static class Schema_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new schema name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_schema_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSchema_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSchema_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Schema name.
	 *
	 * @return the schema name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5264);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Routine_nameContext.
	 */
	public static class Routine_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * At sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AT_SIGN() { return getToken(HanaParser.AT_SIGN, 0); }
		
		/**
		 * Link name.
		 *
		 * @return the link name context
		 */
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new routine name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_routine_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRoutine_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRoutine_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Routine name.
	 *
	 * @return the routine name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_routine_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5266);
			id();
			setState(5271);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,667,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5267);
					match(PERIOD);
					setState(5268);
					id_expression();
					}
					} 
				}
				setState(5273);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,667,_ctx);
			}
			setState(5276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				setState(5274);
				match(AT_SIGN);
				setState(5275);
				link_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Package_nameContext.
	 */
	public static class Package_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new package name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_package_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPackage_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPackage_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Package name.
	 *
	 * @return the package name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5278);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Implementation_type_nameContext.
	 */
	public static class Implementation_type_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new implementation type name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterImplementation_type_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitImplementation_type_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Implementation type name.
	 *
	 * @return the implementation type name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5280);
			id();
			setState(5283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5281);
				match(PERIOD);
				setState(5282);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Reference_model_nameContext.
	 */
	public static class Reference_model_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new reference model name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReference_model_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReference_model_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Reference model name.
	 *
	 * @return the reference model name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5285);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Main_model_nameContext.
	 */
	public static class Main_model_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new main model name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMain_model_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMain_model_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Main model name.
	 *
	 * @return the main model name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5287);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Aggregate_function_nameContext.
	 */
	public static class Aggregate_function_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Instantiates a new aggregate function name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAggregate_function_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAggregate_function_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Aggregate function name.
	 *
	 * @return the aggregate function name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5289);
			id();
			setState(5294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5290);
				match(PERIOD);
				setState(5291);
				id_expression();
				}
				}
				setState(5296);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Query_nameContext.
	 */
	public static class Query_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new query name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_query_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuery_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuery_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Query name.
	 *
	 * @return the query name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5297);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Constraint_nameContext.
	 */
	public static class Constraint_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * At sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AT_SIGN() { return getToken(HanaParser.AT_SIGN, 0); }
		
		/**
		 * Link name.
		 *
		 * @return the link name context
		 */
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new constraint name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConstraint_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConstraint_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Constraint name.
	 *
	 * @return the constraint name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5299);
			id();
			setState(5304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5300);
				match(PERIOD);
				setState(5301);
				id_expression();
				}
				}
				setState(5306);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5307);
				match(AT_SIGN);
				setState(5308);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Label_nameContext.
	 */
	public static class Label_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new label name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_label_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLabel_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLabel_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Label name.
	 *
	 * @return the label name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5311);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Type_nameContext.
	 */
	public static class Type_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Instantiates a new type name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_type_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Type name.
	 *
	 * @return the type name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_type_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5313);
			id_expression();
			setState(5318);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,673,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5314);
					match(PERIOD);
					setState(5315);
					id_expression();
					}
					} 
				}
				setState(5320);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,673,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Sequence_nameContext.
	 */
	public static class Sequence_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Instantiates a new sequence name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSequence_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSequence_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Sequence name.
	 *
	 * @return the sequence name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5321);
			id_expression();
			setState(5326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5322);
				match(PERIOD);
				setState(5323);
				id_expression();
				}
				}
				setState(5328);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Exception_nameContext.
	 */
	public static class Exception_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Instantiates a new exception name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_exception_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Exception name.
	 *
	 * @return the exception name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_exception_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5329);
			id();
			setState(5334);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,675,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5330);
					match(PERIOD);
					setState(5331);
					id_expression();
					}
					} 
				}
				setState(5336);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,675,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Function_nameContext.
	 */
	public static class Function_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new function name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_function_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Function name.
	 *
	 * @return the function name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5337);
			id();
			setState(5340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5338);
				match(PERIOD);
				setState(5339);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Proc_nameContext.
	 */
	public static class Proc_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Schema name.
		 *
		 * @return the schema name context
		 */
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Instantiates a new proc name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Proc_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_proc_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Proc name.
	 *
	 * @return the proc name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Proc_nameContext proc_name() throws RecognitionException {
		Proc_nameContext _localctx = new Proc_nameContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_proc_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5342);
				schema_name();
				setState(5343);
				match(PERIOD);
				}
				break;
			}
			setState(5347);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Trigger_nameContext.
	 */
	public static class Trigger_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new trigger name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTrigger_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTrigger_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Trigger name.
	 *
	 * @return the trigger name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5349);
			id();
			setState(5352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5350);
				match(PERIOD);
				setState(5351);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Variable_name_oldContext.
	 */
	public static class Variable_name_oldContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Introducer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTRODUCER() { return getToken(HanaParser.INTRODUCER, 0); }
		
		/**
		 * Char set name.
		 *
		 * @return the char set name context
		 */
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Instantiates a new variable name old context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Variable_name_oldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_variable_name_old; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVariable_name_old(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVariable_name_old(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVariable_name_old(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Variable name old.
	 *
	 * @return the variable name old context
	 * @throws RecognitionException the recognition exception
	 */
	public final Variable_name_oldContext variable_name_old() throws RecognitionException {
		Variable_name_oldContext _localctx = new Variable_name_oldContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_variable_name_old);
		int _la;
		try {
			setState(5364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5354);
					match(INTRODUCER);
					setState(5355);
					char_set_name();
					}
				}

				setState(5358);
				id_expression();
				setState(5361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5359);
					match(PERIOD);
					setState(5360);
					id_expression();
					}
				}

				}
				break;
			case T__5:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5363);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Index_nameContext.
	 */
	public static class Index_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new index name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_index_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterIndex_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitIndex_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Index name.
	 *
	 * @return the index name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5366);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Cursor_name_oldContext.
	 */
	public static class Cursor_name_oldContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Instantiates a new cursor name old context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Cursor_name_oldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_cursor_name_old; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_name_old(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_name_old(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_name_old(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Cursor name old.
	 *
	 * @return the cursor name old context
	 * @throws RecognitionException the recognition exception
	 */
	public final Cursor_name_oldContext cursor_name_old() throws RecognitionException {
		Cursor_name_oldContext _localctx = new Cursor_name_oldContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_cursor_name_old);
		try {
			setState(5370);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5368);
				id();
				}
				break;
			case T__5:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5369);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Record_nameContext.
	 */
	public static class Record_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Instantiates a new record name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_record_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRecord_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRecord_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Record name.
	 *
	 * @return the record name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_record_name);
		try {
			setState(5374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5372);
				id();
				}
				break;
			case T__5:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5373);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Collection_nameContext.
	 */
	public static class Collection_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Instantiates a new collection name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_collection_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCollection_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCollection_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Collection name.
	 *
	 * @return the collection name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5376);
			id();
			setState(5379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5377);
				match(PERIOD);
				setState(5378);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Link_nameContext.
	 */
	public static class Link_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Instantiates a new link name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_link_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLink_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLink_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Link name.
	 *
	 * @return the link name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5381);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Column_name_oldContext.
	 */
	public static class Column_name_oldContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Instantiates a new column name old context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Column_name_oldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_column_name_old; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_name_old(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_name_old(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_name_old(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Column name old.
	 *
	 * @return the column name old context
	 * @throws RecognitionException the recognition exception
	 */
	public final Column_name_oldContext column_name_old() throws RecognitionException {
		Column_name_oldContext _localctx = new Column_name_oldContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_column_name_old);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5383);
			id();
			setState(5388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5384);
				match(PERIOD);
				setState(5385);
				id_expression();
				}
				}
				setState(5390);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Tableview_nameContext.
	 */
	public static class Tableview_nameContext extends ParserRuleContext {
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * At sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AT_SIGN() { return getToken(HanaParser.AT_SIGN, 0); }
		
		/**
		 * Link name.
		 *
		 * @return the link name context
		 */
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		
		/**
		 * Partition extension clause.
		 *
		 * @return the partition extension clause context
		 */
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new tableview name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTableview_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTableview_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Tableview name.
	 *
	 * @return the tableview name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5391);
			id();
			setState(5394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(5392);
				match(PERIOD);
				setState(5393);
				id_expression();
				}
				break;
			}
			setState(5399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5396);
				match(AT_SIGN);
				setState(5397);
				link_name();
				}
				break;
			case 2:
				{
				setState(5398);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Char_set_nameContext.
	 */
	public static class Char_set_nameContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Instantiates a new char set name context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterChar_set_name(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitChar_set_name(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Char set name.
	 *
	 * @return the char set name context
	 * @throws RecognitionException the recognition exception
	 */
	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5401);
			id_expression();
			setState(5406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5402);
				match(PERIOD);
				setState(5403);
				id_expression();
				}
				}
				setState(5408);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Keep_clauseContext.
	 */
	public static class Keep_clauseContext extends ParserRuleContext {
		
		/**
		 * Keep.
		 *
		 * @return the terminal node
		 */
		public TerminalNode KEEP() { return getToken(HanaParser.KEEP, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Dense rank.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DENSE_RANK() { return getToken(HanaParser.DENSE_RANK, 0); }
		
		/**
		 * Order by clause.
		 *
		 * @return the order by clause context
		 */
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * First.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		
		/**
		 * Last.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LAST() { return getToken(HanaParser.LAST, 0); }
		
		/**
		 * Over clause.
		 *
		 * @return the over clause context
		 */
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new keep clause context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterKeep_clause(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitKeep_clause(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Keep clause.
	 *
	 * @return the keep clause context
	 * @throws RecognitionException the recognition exception
	 */
	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5409);
			match(KEEP);
			setState(5410);
			match(LEFT_PAREN);
			setState(5411);
			match(DENSE_RANK);
			setState(5412);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5413);
			order_by_clause();
			setState(5414);
			match(RIGHT_PAREN);
			setState(5416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
			case 1:
				{
				setState(5415);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Function_argumentContext.
	 */
	public static class Function_argumentContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Argument.
		 *
		 * @return the list
		 */
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		
		/**
		 * Argument.
		 *
		 * @param i the i
		 * @return the argument context
		 */
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Keep clause.
		 *
		 * @return the keep clause context
		 */
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		
		/**
		 * Instantiates a new function argument context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_function_argument; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_argument(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_argument(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Function argument.
	 *
	 * @return the function argument context
	 * @throws RecognitionException the recognition exception
	 */
	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5418);
			match(LEFT_PAREN);
			setState(5420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (UNSIGNED_INTEGER - 513)) | (1L << (APPROXIMATE_NUM_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (PLUS_SIGN - 513)) | (1L << (MINUS_SIGN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(5419);
				argument();
				}
			}

			setState(5426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5422);
				match(COMMA);
				{
				setState(5423);
				argument();
				}
				}
				}
				setState(5428);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5429);
			match(RIGHT_PAREN);
			setState(5431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
			case 1:
				{
				setState(5430);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Function_argument_analyticContext.
	 */
	public static class Function_argument_analyticContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Argument.
		 *
		 * @return the list
		 */
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		
		/**
		 * Argument.
		 *
		 * @param i the i
		 * @return the argument context
		 */
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Keep clause.
		 *
		 * @return the keep clause context
		 */
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		
		/**
		 * Respect or ignore nulls.
		 *
		 * @return the list
		 */
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		
		/**
		 * Respect or ignore nulls.
		 *
		 * @param i the i
		 * @return the respect or ignore nulls context
		 */
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		
		/**
		 * Instantiates a new function argument analytic context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_argument_analytic(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_argument_analytic(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Function argument analytic.
	 *
	 * @return the function argument analytic context
	 * @throws RecognitionException the recognition exception
	 */
	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5433);
			match(LEFT_PAREN);
			setState(5438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (UNSIGNED_INTEGER - 513)) | (1L << (APPROXIMATE_NUM_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (PLUS_SIGN - 513)) | (1L << (MINUS_SIGN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(5434);
				argument();
				setState(5436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5435);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5440);
				match(COMMA);
				setState(5441);
				argument();
				setState(5443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5442);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5449);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5450);
			match(RIGHT_PAREN);
			setState(5452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				{
				setState(5451);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Function_argument_modelingContext.
	 */
	public static class Function_argument_modelingContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Column name.
		 *
		 * @return the column name context
		 */
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		
		/**
		 * Using.
		 *
		 * @return the terminal node
		 */
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Tableview name.
		 *
		 * @return the tableview name context
		 */
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		
		/**
		 * Asterisk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		
		/**
		 * Expression.
		 *
		 * @return the list
		 */
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		
		/**
		 * Expression.
		 *
		 * @param i the i
		 * @return the expression context
		 */
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		
		/**
		 * Comma.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		
		/**
		 * Keep clause.
		 *
		 * @return the keep clause context
		 */
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		
		/**
		 * Numeric.
		 *
		 * @return the list
		 */
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		
		/**
		 * Numeric.
		 *
		 * @param i the i
		 * @return the numeric context
		 */
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		
		/**
		 * Null.
		 *
		 * @return the list
		 */
		public List<TerminalNode> NULL() { return getTokens(HanaParser.NULL); }
		
		/**
		 * Null.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode NULL(int i) {
			return getToken(HanaParser.NULL, i);
		}
		
		/**
		 * Column alias.
		 *
		 * @return the list
		 */
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		
		/**
		 * Column alias.
		 *
		 * @param i the i
		 * @return the column alias context
		 */
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		
		/**
		 * Instantiates a new function argument modeling context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_argument_modeling(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_argument_modeling(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Function argument modeling.
	 *
	 * @return the function argument modeling context
	 * @throws RecognitionException the recognition exception
	 */
	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5454);
			match(LEFT_PAREN);
			setState(5455);
			column_name();
			setState(5468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5456);
				match(COMMA);
				setState(5459);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5457);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5458);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5461);
					match(COMMA);
					setState(5464);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5462);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5463);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5470);
			match(USING);
			setState(5490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(5471);
				tableview_name();
				setState(5472);
				match(PERIOD);
				setState(5473);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5475);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5476);
				expression();
				setState(5478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					setState(5477);
					column_alias();
					}
				}

				setState(5487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5480);
					match(COMMA);
					setState(5481);
					expression();
					setState(5483);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
						{
						setState(5482);
						column_alias();
						}
					}

					}
					}
					setState(5489);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5492);
			match(RIGHT_PAREN);
			setState(5494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(5493);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Respect_or_ignore_nullsContext.
	 */
	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		
		/**
		 * Nulls.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		
		/**
		 * Respect.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESPECT() { return getToken(HanaParser.RESPECT, 0); }
		
		/**
		 * Ignore.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IGNORE() { return getToken(HanaParser.IGNORE, 0); }
		
		/**
		 * Instantiates a new respect or ignore nulls context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRespect_or_ignore_nulls(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRespect_or_ignore_nulls(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Respect or ignore nulls.
	 *
	 * @return the respect or ignore nulls context
	 * @throws RecognitionException the recognition exception
	 */
	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5496);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5497);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class ArgumentContext.
	 */
	public static class ArgumentContext extends ParserRuleContext {
		
		/**
		 * Function call.
		 *
		 * @return the function call context
		 */
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		
		/**
		 * Id.
		 *
		 * @return the id context
		 */
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Greater than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		
		/**
		 * Instantiates a new argument context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_argument; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterArgument(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitArgument(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Argument.
	 *
	 * @return the argument context
	 * @throws RecognitionException the recognition exception
	 */
	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				{
				setState(5503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					setState(5499);
					id();
					setState(5500);
					match(EQUALS_OP);
					setState(5501);
					match(GREATER_THAN_OP);
					}
					break;
				}
				setState(5505);
				expression_wrapper();
				}
				}
				break;
			case 2:
				{
				setState(5506);
				function_call();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Type_specContext.
	 */
	public static class Type_specContext extends ParserRuleContext {
		
		/**
		 * Datatype.
		 *
		 * @return the datatype context
		 */
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		
		/**
		 * Type name.
		 *
		 * @return the type name context
		 */
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		
		/**
		 * Ref.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REF() { return getToken(HanaParser.REF, 0); }
		
		/**
		 * Percent rowtype.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENT_ROWTYPE() { return getToken(HanaParser.PERCENT_ROWTYPE, 0); }
		
		/**
		 * Percent type.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENT_TYPE() { return getToken(HanaParser.PERCENT_TYPE, 0); }
		
		/**
		 * Instantiates a new type spec context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_type_spec; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_spec(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_spec(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Type spec.
	 *
	 * @return the type spec context
	 * @throws RecognitionException the recognition exception
	 */
	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_type_spec);
		int _la;
		try {
			setState(5517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5509);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5511);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
				case 1:
					{
					setState(5510);
					match(REF);
					}
					break;
				}
				setState(5513);
				type_name();
				setState(5515);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
				case 1:
					{
					setState(5514);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class DatatypeContext.
	 */
	public static class DatatypeContext extends ParserRuleContext {
		
		/**
		 * Native datatype element.
		 *
		 * @return the native datatype element context
		 */
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		
		/**
		 * Precision part.
		 *
		 * @return the precision part context
		 */
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		
		/**
		 * With.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		
		/**
		 * Time.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		
		/**
		 * Zone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ZONE() { return getToken(HanaParser.ZONE, 0); }
		
		/**
		 * Local.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOCAL() { return getToken(HanaParser.LOCAL, 0); }
		
		/**
		 * Interval.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTERVAL() { return getToken(HanaParser.INTERVAL, 0); }
		
		/**
		 * To.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		
		/**
		 * Year.
		 *
		 * @return the terminal node
		 */
		public TerminalNode YEAR() { return getToken(HanaParser.YEAR, 0); }
		
		/**
		 * Day.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DAY() { return getToken(HanaParser.DAY, 0); }
		
		/**
		 * Month.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MONTH() { return getToken(HanaParser.MONTH, 0); }
		
		/**
		 * Second.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SECOND() { return getToken(HanaParser.SECOND, 0); }
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @return the list
		 */
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		
		/**
		 * Expression wrapper.
		 *
		 * @param i the i
		 * @return the expression wrapper context
		 */
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * Instantiates a new datatype context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_datatype; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDatatype(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDatatype(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Datatype.
	 *
	 * @return the datatype context
	 * @throws RecognitionException the recognition exception
	 */
	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_datatype);
		int _la;
		try {
			setState(5547);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIGINT:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SECONDDATE:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5519);
				native_datatype_element();
				setState(5521);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
				case 1:
					{
					setState(5520);
					precision_part();
					}
					break;
				}
				setState(5529);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
				case 1:
					{
					setState(5523);
					match(WITH);
					setState(5525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5524);
						match(LOCAL);
						}
					}

					setState(5527);
					match(TIME);
					setState(5528);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5531);
				match(INTERVAL);
				setState(5532);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5533);
					match(LEFT_PAREN);
					setState(5534);
					expression_wrapper();
					setState(5535);
					match(RIGHT_PAREN);
					}
				}

				setState(5539);
				match(TO);
				setState(5540);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5545);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					setState(5541);
					match(LEFT_PAREN);
					setState(5542);
					expression_wrapper();
					setState(5543);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Precision_partContext.
	 */
	public static class Precision_partContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the list
		 */
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		
		/**
		 * Numeric.
		 *
		 * @param i the i
		 * @return the numeric context
		 */
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * Char.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR() { return getToken(HanaParser.CHAR, 0); }
		
		/**
		 * Byte.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BYTE() { return getToken(HanaParser.BYTE, 0); }
		
		/**
		 * Instantiates a new precision part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_precision_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPrecision_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPrecision_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Precision part.
	 *
	 * @return the precision part context
	 * @throws RecognitionException the recognition exception
	 */
	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5549);
			match(LEFT_PAREN);
			setState(5550);
			numeric();
			setState(5553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5551);
				match(COMMA);
				setState(5552);
				numeric();
				}
			}

			setState(5556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5555);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5558);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Native_datatype_elementContext.
	 */
	public static class Native_datatype_elementContext extends ParserRuleContext {
		
		/**
		 * Binary integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BINARY_INTEGER() { return getToken(HanaParser.BINARY_INTEGER, 0); }
		
		/**
		 * Pls integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PLS_INTEGER() { return getToken(HanaParser.PLS_INTEGER, 0); }
		
		/**
		 * Natural.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NATURAL() { return getToken(HanaParser.NATURAL, 0); }
		
		/**
		 * Binary float.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BINARY_FLOAT() { return getToken(HanaParser.BINARY_FLOAT, 0); }
		
		/**
		 * Binary double.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BINARY_DOUBLE() { return getToken(HanaParser.BINARY_DOUBLE, 0); }
		
		/**
		 * Bigint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BIGINT() { return getToken(HanaParser.BIGINT, 0); }
		
		/**
		 * Naturaln.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NATURALN() { return getToken(HanaParser.NATURALN, 0); }
		
		/**
		 * Positive.
		 *
		 * @return the terminal node
		 */
		public TerminalNode POSITIVE() { return getToken(HanaParser.POSITIVE, 0); }
		
		/**
		 * Positiven.
		 *
		 * @return the terminal node
		 */
		public TerminalNode POSITIVEN() { return getToken(HanaParser.POSITIVEN, 0); }
		
		/**
		 * Seconddate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SECONDDATE() { return getToken(HanaParser.SECONDDATE, 0); }
		
		/**
		 * Signtype.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIGNTYPE() { return getToken(HanaParser.SIGNTYPE, 0); }
		
		/**
		 * Simple integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIMPLE_INTEGER() { return getToken(HanaParser.SIMPLE_INTEGER, 0); }
		
		/**
		 * Nvarchar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NVARCHAR() { return getToken(HanaParser.NVARCHAR, 0); }
		
		/**
		 * Dec.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEC() { return getToken(HanaParser.DEC, 0); }
		
		/**
		 * Integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTEGER() { return getToken(HanaParser.INTEGER, 0); }
		
		/**
		 * Int.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INT() { return getToken(HanaParser.INT, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NUMERIC() { return getToken(HanaParser.NUMERIC, 0); }
		
		/**
		 * Smallint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SMALLINT() { return getToken(HanaParser.SMALLINT, 0); }
		
		/**
		 * Number.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NUMBER() { return getToken(HanaParser.NUMBER, 0); }
		
		/**
		 * Decimal.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECIMAL() { return getToken(HanaParser.DECIMAL, 0); }
		
		/**
		 * Double.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DOUBLE() { return getToken(HanaParser.DOUBLE, 0); }
		
		/**
		 * Precision.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRECISION() { return getToken(HanaParser.PRECISION, 0); }
		
		/**
		 * Float.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FLOAT() { return getToken(HanaParser.FLOAT, 0); }
		
		/**
		 * Real.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REAL() { return getToken(HanaParser.REAL, 0); }
		
		/**
		 * Nchar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NCHAR() { return getToken(HanaParser.NCHAR, 0); }
		
		/**
		 * Long.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LONG() { return getToken(HanaParser.LONG, 0); }
		
		/**
		 * Raw.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RAW() { return getToken(HanaParser.RAW, 0); }
		
		/**
		 * Char.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR() { return getToken(HanaParser.CHAR, 0); }
		
		/**
		 * Character.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHARACTER() { return getToken(HanaParser.CHARACTER, 0); }
		
		/**
		 * Varchar2.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARCHAR2() { return getToken(HanaParser.VARCHAR2, 0); }
		
		/**
		 * Varchar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARCHAR() { return getToken(HanaParser.VARCHAR, 0); }
		
		/**
		 * String.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STRING() { return getToken(HanaParser.STRING, 0); }
		
		/**
		 * Boolean.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BOOLEAN() { return getToken(HanaParser.BOOLEAN, 0); }
		
		/**
		 * Date.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DATE() { return getToken(HanaParser.DATE, 0); }
		
		/**
		 * Rowid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROWID() { return getToken(HanaParser.ROWID, 0); }
		
		/**
		 * Urowid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UROWID() { return getToken(HanaParser.UROWID, 0); }
		
		/**
		 * Year.
		 *
		 * @return the terminal node
		 */
		public TerminalNode YEAR() { return getToken(HanaParser.YEAR, 0); }
		
		/**
		 * Month.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MONTH() { return getToken(HanaParser.MONTH, 0); }
		
		/**
		 * Day.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DAY() { return getToken(HanaParser.DAY, 0); }
		
		/**
		 * Hour.
		 *
		 * @return the terminal node
		 */
		public TerminalNode HOUR() { return getToken(HanaParser.HOUR, 0); }
		
		/**
		 * Minute.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINUTE() { return getToken(HanaParser.MINUTE, 0); }
		
		/**
		 * Second.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SECOND() { return getToken(HanaParser.SECOND, 0); }
		
		/**
		 * Timezone hour.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMEZONE_HOUR() { return getToken(HanaParser.TIMEZONE_HOUR, 0); }
		
		/**
		 * Timezone minute.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMEZONE_MINUTE() { return getToken(HanaParser.TIMEZONE_MINUTE, 0); }
		
		/**
		 * Timezone region.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMEZONE_REGION() { return getToken(HanaParser.TIMEZONE_REGION, 0); }
		
		/**
		 * Timezone abbr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMEZONE_ABBR() { return getToken(HanaParser.TIMEZONE_ABBR, 0); }
		
		/**
		 * Timestamp.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		
		/**
		 * Timestamp unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_UNCONSTRAINED, 0); }
		
		/**
		 * Timestamp tz unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		
		/**
		 * Timestamp ltz unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		
		/**
		 * Yminterval unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(HanaParser.YMINTERVAL_UNCONSTRAINED, 0); }
		
		/**
		 * Dsinterval unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(HanaParser.DSINTERVAL_UNCONSTRAINED, 0); }
		
		/**
		 * Bfile.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BFILE() { return getToken(HanaParser.BFILE, 0); }
		
		/**
		 * Blob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BLOB() { return getToken(HanaParser.BLOB, 0); }
		
		/**
		 * Clob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CLOB() { return getToken(HanaParser.CLOB, 0); }
		
		/**
		 * Nclob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NCLOB() { return getToken(HanaParser.NCLOB, 0); }
		
		/**
		 * Mlslabel.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MLSLABEL() { return getToken(HanaParser.MLSLABEL, 0); }
		
		/**
		 * Instantiates a new native datatype element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNative_datatype_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNative_datatype_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Native datatype element.
	 *
	 * @return the native datatype element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_native_datatype_element);
		try {
			setState(5622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5560);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5561);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5562);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5563);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5564);
				match(BINARY_DOUBLE);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 6);
				{
				setState(5565);
				match(BIGINT);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 7);
				{
				setState(5566);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5567);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 9);
				{
				setState(5568);
				match(POSITIVEN);
				}
				break;
			case SECONDDATE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5569);
				match(SECONDDATE);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5570);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 12);
				{
				setState(5571);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR:
				enterOuterAlt(_localctx, 13);
				{
				setState(5572);
				match(NVARCHAR);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 14);
				{
				setState(5573);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 15);
				{
				setState(5574);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5575);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 17);
				{
				setState(5576);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 18);
				{
				setState(5577);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 19);
				{
				setState(5578);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 20);
				{
				setState(5579);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 21);
				{
				setState(5580);
				match(DOUBLE);
				setState(5582);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
				case 1:
					{
					setState(5581);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 22);
				{
				setState(5584);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 23);
				{
				setState(5585);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5586);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 25);
				{
				setState(5587);
				match(LONG);
				setState(5589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5588);
					match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 26);
				{
				setState(5591);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 27);
				{
				setState(5592);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 28);
				{
				setState(5593);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 29);
				{
				setState(5594);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 30);
				{
				setState(5595);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 31);
				{
				setState(5596);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 32);
				{
				setState(5597);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 33);
				{
				setState(5598);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 34);
				{
				setState(5599);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 35);
				{
				setState(5600);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 36);
				{
				setState(5601);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 37);
				{
				setState(5602);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 38);
				{
				setState(5603);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 39);
				{
				setState(5604);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 40);
				{
				setState(5605);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 41);
				{
				setState(5606);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 42);
				{
				setState(5607);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 43);
				{
				setState(5608);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 44);
				{
				setState(5609);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 45);
				{
				setState(5610);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 46);
				{
				setState(5611);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5612);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5613);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5614);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 50);
				{
				setState(5615);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 51);
				{
				setState(5616);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 52);
				{
				setState(5617);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5618);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 54);
				{
				setState(5619);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 55);
				{
				setState(5620);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 56);
				{
				setState(5621);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Bind_variableContext.
	 */
	public static class Bind_variableContext extends ParserRuleContext {
		
		/**
		 * Bindvar.
		 *
		 * @return the list
		 */
		public List<TerminalNode> BINDVAR() { return getTokens(HanaParser.BINDVAR); }
		
		/**
		 * Bindvar.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode BINDVAR(int i) {
			return getToken(HanaParser.BINDVAR, i);
		}
		
		/**
		 * Colon.
		 *
		 * @return the list
		 */
		public List<TerminalNode> COLON() { return getTokens(HanaParser.COLON); }
		
		/**
		 * Colon.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode COLON(int i) {
			return getToken(HanaParser.COLON, i);
		}
		
		/**
		 * Unsigned integer.
		 *
		 * @return the list
		 */
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(HanaParser.UNSIGNED_INTEGER); }
		
		/**
		 * Unsigned integer.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(HanaParser.UNSIGNED_INTEGER, i);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * General element part.
		 *
		 * @return the list
		 */
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		
		/**
		 * General element part.
		 *
		 * @param i the i
		 * @return the general element part context
		 */
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		
		/**
		 * Left bracket.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_BRACKET() { return getToken(HanaParser.LEFT_BRACKET, 0); }
		
		/**
		 * Bind variable.
		 *
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		
		/**
		 * Right bracket.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_BRACKET() { return getToken(HanaParser.RIGHT_BRACKET, 0); }
		
		/**
		 * Indicator.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDICATOR() { return getToken(HanaParser.INDICATOR, 0); }
		
		/**
		 * Bind sql error code.
		 *
		 * @return the bind sql error code context
		 */
		public Bind_sql_error_codeContext bind_sql_error_code() {
			return getRuleContext(Bind_sql_error_codeContext.class,0);
		}
		
		/**
		 * Const sql error code.
		 *
		 * @return the const sql error code context
		 */
		public Const_sql_error_codeContext const_sql_error_code() {
			return getRuleContext(Const_sql_error_codeContext.class,0);
		}
		
		/**
		 * Bind sql error message.
		 *
		 * @return the bind sql error message context
		 */
		public Bind_sql_error_messageContext bind_sql_error_message() {
			return getRuleContext(Bind_sql_error_messageContext.class,0);
		}
		
		/**
		 * Const sql error message.
		 *
		 * @return the const sql error message context
		 */
		public Const_sql_error_messageContext const_sql_error_message() {
			return getRuleContext(Const_sql_error_messageContext.class,0);
		}
		
		/**
		 * Instantiates a new bind variable context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBind_variable(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBind_variable(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Bind variable.
	 *
	 * @return the bind variable context
	 * @throws RecognitionException the recognition exception
	 */
	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			setState(5656);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5627);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5624);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5625);
					match(COLON);
					setState(5626);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5637);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
				case 1:
					{
					setState(5630);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INDICATOR) {
						{
						setState(5629);
						match(INDICATOR);
						}
					}

					setState(5635);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case BINDVAR:
						{
						setState(5632);
						match(BINDVAR);
						}
						break;
					case COLON:
						{
						setState(5633);
						match(COLON);
						setState(5634);
						match(UNSIGNED_INTEGER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(5643);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,727,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5639);
						match(PERIOD);
						setState(5640);
						general_element_part();
						}
						} 
					}
					setState(5645);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,727,_ctx);
				}
				setState(5650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(5646);
					match(LEFT_BRACKET);
					setState(5647);
					bind_variable();
					setState(5648);
					match(RIGHT_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5652);
				bind_sql_error_code();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5653);
				const_sql_error_code();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5654);
				bind_sql_error_message();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5655);
				const_sql_error_message();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Bind_sql_error_codeContext.
	 */
	public static class Bind_sql_error_codeContext extends ParserRuleContext {
		
		/**
		 * Sql error code.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQL_ERROR_CODE() { return getToken(HanaParser.SQL_ERROR_CODE, 0); }
		
		/**
		 * Instantiates a new bind sql error code context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Bind_sql_error_codeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_bind_sql_error_code; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBind_sql_error_code(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBind_sql_error_code(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBind_sql_error_code(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Bind sql error code.
	 *
	 * @return the bind sql error code context
	 * @throws RecognitionException the recognition exception
	 */
	public final Bind_sql_error_codeContext bind_sql_error_code() throws RecognitionException {
		Bind_sql_error_codeContext _localctx = new Bind_sql_error_codeContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_bind_sql_error_code);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5658);
			match(T__5);
			setState(5659);
			match(SQL_ERROR_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Const_sql_error_codeContext.
	 */
	public static class Const_sql_error_codeContext extends ParserRuleContext {
		
		/**
		 * Sql error code.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQL_ERROR_CODE() { return getToken(HanaParser.SQL_ERROR_CODE, 0); }
		
		/**
		 * Instantiates a new const sql error code context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Const_sql_error_codeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_const_sql_error_code; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConst_sql_error_code(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConst_sql_error_code(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConst_sql_error_code(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Const sql error code.
	 *
	 * @return the const sql error code context
	 * @throws RecognitionException the recognition exception
	 */
	public final Const_sql_error_codeContext const_sql_error_code() throws RecognitionException {
		Const_sql_error_codeContext _localctx = new Const_sql_error_codeContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_const_sql_error_code);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5661);
			match(SQL_ERROR_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Bind_sql_error_messageContext.
	 */
	public static class Bind_sql_error_messageContext extends ParserRuleContext {
		
		/**
		 * Sql error message.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQL_ERROR_MESSAGE() { return getToken(HanaParser.SQL_ERROR_MESSAGE, 0); }
		
		/**
		 * Instantiates a new bind sql error message context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Bind_sql_error_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_bind_sql_error_message; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBind_sql_error_message(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBind_sql_error_message(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBind_sql_error_message(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Bind sql error message.
	 *
	 * @return the bind sql error message context
	 * @throws RecognitionException the recognition exception
	 */
	public final Bind_sql_error_messageContext bind_sql_error_message() throws RecognitionException {
		Bind_sql_error_messageContext _localctx = new Bind_sql_error_messageContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_bind_sql_error_message);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5663);
			match(T__5);
			setState(5664);
			match(SQL_ERROR_MESSAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Const_sql_error_messageContext.
	 */
	public static class Const_sql_error_messageContext extends ParserRuleContext {
		
		/**
		 * Sql error message.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQL_ERROR_MESSAGE() { return getToken(HanaParser.SQL_ERROR_MESSAGE, 0); }
		
		/**
		 * Instantiates a new const sql error message context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Const_sql_error_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_const_sql_error_message; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConst_sql_error_message(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConst_sql_error_message(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConst_sql_error_message(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Const sql error message.
	 *
	 * @return the const sql error message context
	 * @throws RecognitionException the recognition exception
	 */
	public final Const_sql_error_messageContext const_sql_error_message() throws RecognitionException {
		Const_sql_error_messageContext _localctx = new Const_sql_error_messageContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_const_sql_error_message);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5666);
			match(SQL_ERROR_MESSAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class General_elementContext.
	 */
	public static class General_elementContext extends ParserRuleContext {
		
		/**
		 * General element part.
		 *
		 * @return the list
		 */
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		
		/**
		 * General element part.
		 *
		 * @param i the i
		 * @return the general element part context
		 */
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Instantiates a new general element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_general_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGeneral_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGeneral_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGeneral_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * General element.
	 *
	 * @return the general element context
	 * @throws RecognitionException the recognition exception
	 */
	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_general_element);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5668);
			general_element_part();
			setState(5673);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,730,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5669);
					match(PERIOD);
					setState(5670);
					general_element_part();
					}
					} 
				}
				setState(5675);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,730,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class General_element_partContext.
	 */
	public static class General_element_partContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Introducer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTRODUCER() { return getToken(HanaParser.INTRODUCER, 0); }
		
		/**
		 * Char set name.
		 *
		 * @return the char set name context
		 */
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Function argument.
		 *
		 * @return the function argument context
		 */
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		
		/**
		 * Instantiates a new general element part context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGeneral_element_part(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGeneral_element_part(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGeneral_element_part(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * General element part.
	 *
	 * @return the general element part context
	 * @throws RecognitionException the recognition exception
	 */
	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5676);
				match(INTRODUCER);
				setState(5677);
				char_set_name();
				}
			}

			setState(5680);
			id_expression();
			setState(5685);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,732,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5681);
					match(PERIOD);
					setState(5682);
					id_expression();
					}
					} 
				}
				setState(5687);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,732,_ctx);
			}
			setState(5689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				{
				setState(5688);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Table_elementContext.
	 */
	public static class Table_elementContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the list
		 */
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		
		/**
		 * Id expression.
		 *
		 * @param i the i
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		
		/**
		 * Introducer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTRODUCER() { return getToken(HanaParser.INTRODUCER, 0); }
		
		/**
		 * Char set name.
		 *
		 * @return the char set name context
		 */
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		
		/**
		 * Period.
		 *
		 * @return the list
		 */
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		
		/**
		 * Period.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		
		/**
		 * Instantiates a new table element context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_table_element; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_element(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_element(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Table element.
	 *
	 * @return the table element context
	 * @throws RecognitionException the recognition exception
	 */
	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5691);
				match(INTRODUCER);
				setState(5692);
				char_set_name();
				}
			}

			setState(5695);
			id_expression();
			setState(5700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5696);
				match(PERIOD);
				setState(5697);
				id_expression();
				}
				}
				setState(5702);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class ConstantContext.
	 */
	public static class ConstantContext extends ParserRuleContext {
		
		/**
		 * Timestamp.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		
		/**
		 * Quoted string.
		 *
		 * @return the list
		 */
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		
		/**
		 * Quoted string.
		 *
		 * @param i the i
		 * @return the quoted string context
		 */
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		
		/**
		 * Bind variable.
		 *
		 * @return the list
		 */
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		
		/**
		 * Bind variable.
		 *
		 * @param i the i
		 * @return the bind variable context
		 */
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		
		/**
		 * At.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AT() { return getToken(HanaParser.AT, 0); }
		
		/**
		 * Time.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		
		/**
		 * Zone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ZONE() { return getToken(HanaParser.ZONE, 0); }
		
		/**
		 * Interval.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTERVAL() { return getToken(HanaParser.INTERVAL, 0); }
		
		/**
		 * Day.
		 *
		 * @return the list
		 */
		public List<TerminalNode> DAY() { return getTokens(HanaParser.DAY); }
		
		/**
		 * Day.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode DAY(int i) {
			return getToken(HanaParser.DAY, i);
		}
		
		/**
		 * Hour.
		 *
		 * @return the list
		 */
		public List<TerminalNode> HOUR() { return getTokens(HanaParser.HOUR); }
		
		/**
		 * Hour.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode HOUR(int i) {
			return getToken(HanaParser.HOUR, i);
		}
		
		/**
		 * Minute.
		 *
		 * @return the list
		 */
		public List<TerminalNode> MINUTE() { return getTokens(HanaParser.MINUTE); }
		
		/**
		 * Minute.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode MINUTE(int i) {
			return getToken(HanaParser.MINUTE, i);
		}
		
		/**
		 * Second.
		 *
		 * @return the list
		 */
		public List<TerminalNode> SECOND() { return getTokens(HanaParser.SECOND); }
		
		/**
		 * Second.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode SECOND(int i) {
			return getToken(HanaParser.SECOND, i);
		}
		
		/**
		 * General element part.
		 *
		 * @return the general element part context
		 */
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		
		/**
		 * Left paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		
		/**
		 * Left paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		
		/**
		 * Right paren.
		 *
		 * @return the list
		 */
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		
		/**
		 * Right paren.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		
		/**
		 * To.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		
		/**
		 * Unsigned integer.
		 *
		 * @return the list
		 */
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(HanaParser.UNSIGNED_INTEGER); }
		
		/**
		 * Unsigned integer.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(HanaParser.UNSIGNED_INTEGER, i);
		}
		
		/**
		 * Comma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the numeric context
		 */
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		
		/**
		 * Date.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DATE() { return getToken(HanaParser.DATE, 0); }
		
		/**
		 * Null.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		
		/**
		 * True.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRUE() { return getToken(HanaParser.TRUE, 0); }
		
		/**
		 * False.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FALSE() { return getToken(HanaParser.FALSE, 0); }
		
		/**
		 * Dbtimezone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DBTIMEZONE() { return getToken(HanaParser.DBTIMEZONE, 0); }
		
		/**
		 * Sessiontimezone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SESSIONTIMEZONE() { return getToken(HanaParser.SESSIONTIMEZONE, 0); }
		
		/**
		 * Minvalue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINVALUE() { return getToken(HanaParser.MINVALUE, 0); }
		
		/**
		 * Maxvalue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAXVALUE() { return getToken(HanaParser.MAXVALUE, 0); }
		
		/**
		 * Default.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		
		/**
		 * Instantiates a new constant context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_constant; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConstant(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConstant(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Constant.
	 *
	 * @return the constant context
	 * @throws RecognitionException the recognition exception
	 */
	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_constant);
		int _la;
		try {
			setState(5765);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5703);
				match(TIMESTAMP);
				setState(5706);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5704);
					quoted_string();
					}
					break;
				case T__5:
				case SQL_ERROR_CODE:
				case SQL_ERROR_MESSAGE:
				case BINDVAR:
				case COLON:
					{
					setState(5705);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5712);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(5708);
					match(AT);
					setState(5709);
					match(TIME);
					setState(5710);
					match(ZONE);
					setState(5711);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5714);
				match(INTERVAL);
				setState(5718);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5715);
					quoted_string();
					}
					break;
				case T__5:
				case SQL_ERROR_CODE:
				case SQL_ERROR_MESSAGE:
				case BINDVAR:
				case COLON:
					{
					setState(5716);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREAK:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE_REGEXPR:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TINYINT:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5717);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5720);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5734);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
				case 1:
					{
					setState(5721);
					match(LEFT_PAREN);
					setState(5724);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5722);
						match(UNSIGNED_INTEGER);
						}
						break;
					case T__5:
					case SQL_ERROR_CODE:
					case SQL_ERROR_MESSAGE:
					case BINDVAR:
					case COLON:
						{
						setState(5723);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5731);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5726);
						match(COMMA);
						setState(5729);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5727);
							match(UNSIGNED_INTEGER);
							}
							break;
						case T__5:
						case SQL_ERROR_CODE:
						case SQL_ERROR_MESSAGE:
						case BINDVAR:
						case COLON:
							{
							setState(5728);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5733);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					setState(5736);
					match(TO);
					setState(5749);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5737);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5738);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5739);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5740);
						match(SECOND);
						setState(5747);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
						case 1:
							{
							setState(5741);
							match(LEFT_PAREN);
							setState(5744);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5742);
								match(UNSIGNED_INTEGER);
								}
								break;
							case T__5:
							case SQL_ERROR_CODE:
							case SQL_ERROR_MESSAGE:
							case BINDVAR:
							case COLON:
								{
								setState(5743);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5746);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5753);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5754);
				match(DATE);
				setState(5755);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5756);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5757);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5758);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5759);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5760);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5761);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5762);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5763);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5764);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class NumericContext.
	 */
	public static class NumericContext extends ParserRuleContext {
		
		/**
		 * Unsigned integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNSIGNED_INTEGER() { return getToken(HanaParser.UNSIGNED_INTEGER, 0); }
		
		/**
		 * Approximate num lit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(HanaParser.APPROXIMATE_NUM_LIT, 0); }
		
		/**
		 * Instantiates a new numeric context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_numeric; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNumeric(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNumeric(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Numeric.
	 *
	 * @return the numeric context
	 * @throws RecognitionException the recognition exception
	 */
	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5767);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Numeric_negativeContext.
	 */
	public static class Numeric_negativeContext extends ParserRuleContext {
		
		/**
		 * Minus sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINUS_SIGN() { return getToken(HanaParser.MINUS_SIGN, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the numeric context
		 */
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		
		/**
		 * Instantiates a new numeric negative context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNumeric_negative(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNumeric_negative(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNumeric_negative(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Numeric negative.
	 *
	 * @return the numeric negative context
	 * @throws RecognitionException the recognition exception
	 */
	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5769);
			match(MINUS_SIGN);
			setState(5770);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Quoted_stringContext.
	 */
	public static class Quoted_stringContext extends ParserRuleContext {
		
		/**
		 * Char string.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		
		/**
		 * National char string lit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(HanaParser.NATIONAL_CHAR_STRING_LIT, 0); }
		
		/**
		 * Instantiates a new quoted string context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuoted_string(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuoted_string(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Quoted string.
	 *
	 * @return the quoted string context
	 * @throws RecognitionException the recognition exception
	 */
	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5772);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class IdContext.
	 */
	public static class IdContext extends ParserRuleContext {
		
		/**
		 * Id expression.
		 *
		 * @return the id expression context
		 */
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		
		/**
		 * Introducer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTRODUCER() { return getToken(HanaParser.INTRODUCER, 0); }
		
		/**
		 * Char set name.
		 *
		 * @return the char set name context
		 */
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		
		/**
		 * Instantiates a new id context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_id; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterId(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitId(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Id.
	 *
	 * @return the id context
	 * @throws RecognitionException the recognition exception
	 */
	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5774);
				match(INTRODUCER);
				setState(5775);
				char_set_name();
				}
			}

			setState(5778);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Id_expressionContext.
	 */
	public static class Id_expressionContext extends ParserRuleContext {
		
		/**
		 * Regular id.
		 *
		 * @return the regular id context
		 */
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		
		/**
		 * Delimited id.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DELIMITED_ID() { return getToken(HanaParser.DELIMITED_ID, 0); }
		
		/**
		 * Instantiates a new id expression context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_id_expression; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterId_expression(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitId_expression(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Id expression.
	 *
	 * @return the id expression context
	 * @throws RecognitionException the recognition exception
	 */
	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_id_expression);
		try {
			setState(5782);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREAK:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIKE_REGEXPR:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TINYINT:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5780);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5781);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Not_equal_opContext.
	 */
	public static class Not_equal_opContext extends ParserRuleContext {
		
		/**
		 * Less than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		
		/**
		 * Greater than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		
		/**
		 * Exclamation operator part.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCLAMATION_OPERATOR_PART() { return getToken(HanaParser.EXCLAMATION_OPERATOR_PART, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Carret operator part.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CARRET_OPERATOR_PART() { return getToken(HanaParser.CARRET_OPERATOR_PART, 0); }
		
		/**
		 * Instantiates a new not equal op context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNot_equal_op(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNot_equal_op(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Not equal op.
	 *
	 * @return the not equal op context
	 * @throws RecognitionException the recognition exception
	 */
	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_not_equal_op);
		try {
			setState(5794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__3:
				enterOuterAlt(_localctx, 1);
				{
				setState(5784);
				match(T__3);
				}
				break;
			case T__4:
				enterOuterAlt(_localctx, 2);
				{
				setState(5785);
				match(T__4);
				}
				break;
			case T__6:
				enterOuterAlt(_localctx, 3);
				{
				setState(5786);
				match(T__6);
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 4);
				{
				setState(5787);
				match(T__7);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(5788);
				match(LESS_THAN_OP);
				setState(5789);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 6);
				{
				setState(5790);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5791);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 7);
				{
				setState(5792);
				match(CARRET_OPERATOR_PART);
				setState(5793);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Greater_than_or_equals_opContext.
	 */
	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		
		/**
		 * Greater than or equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		
		/**
		 * Greater than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Instantiates a new greater than or equals op context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGreater_than_or_equals_op(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGreater_than_or_equals_op(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Greater than or equals op.
	 *
	 * @return the greater than or equals op context
	 * @throws RecognitionException the recognition exception
	 */
	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_greater_than_or_equals_op);
		try {
			setState(5799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5796);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5797);
				match(GREATER_THAN_OP);
				setState(5798);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Less_than_or_equals_opContext.
	 */
	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		
		/**
		 * Less than or equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0); }
		
		/**
		 * Less than op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		
		/**
		 * Equals op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		
		/**
		 * Instantiates a new less than or equals op context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLess_than_or_equals_op(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLess_than_or_equals_op(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Less than or equals op.
	 *
	 * @return the less than or equals op context
	 * @throws RecognitionException the recognition exception
	 */
	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_less_than_or_equals_op);
		try {
			setState(5804);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5801);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5802);
				match(LESS_THAN_OP);
				setState(5803);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Concatenation_opContext.
	 */
	public static class Concatenation_opContext extends ParserRuleContext {
		
		/**
		 * Concatenation op.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONCATENATION_OP() { return getToken(HanaParser.CONCATENATION_OP, 0); }
		
		/**
		 * Vertical bar.
		 *
		 * @return the list
		 */
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(HanaParser.VERTICAL_BAR); }
		
		/**
		 * Vertical bar.
		 *
		 * @param i the i
		 * @return the terminal node
		 */
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(HanaParser.VERTICAL_BAR, i);
		}
		
		/**
		 * Instantiates a new concatenation op context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConcatenation_op(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConcatenation_op(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Concatenation op.
	 *
	 * @return the concatenation op context
	 * @throws RecognitionException the recognition exception
	 */
	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_concatenation_op);
		try {
			setState(5809);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5806);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5807);
				match(VERTICAL_BAR);
				setState(5808);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Outer_join_signContext.
	 */
	public static class Outer_join_signContext extends ParserRuleContext {
		
		/**
		 * Left paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		
		/**
		 * Plus sign.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PLUS_SIGN() { return getToken(HanaParser.PLUS_SIGN, 0); }
		
		/**
		 * Right paren.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		
		/**
		 * Instantiates a new outer join sign context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOuter_join_sign(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOuter_join_sign(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Outer join sign.
	 *
	 * @return the outer join sign context
	 * @throws RecognitionException the recognition exception
	 */
	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5811);
			match(LEFT_PAREN);
			setState(5812);
			match(PLUS_SIGN);
			setState(5813);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * The Class Regular_idContext.
	 */
	public static class Regular_idContext extends ParserRuleContext {
		
		/**
		 * Regular id.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REGULAR_ID() { return getToken(HanaParser.REGULAR_ID, 0); }
		
		/**
		 * A letter.
		 *
		 * @return the terminal node
		 */
		public TerminalNode A_LETTER() { return getToken(HanaParser.A_LETTER, 0); }
		
		/**
		 * Adds the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ADD() { return getToken(HanaParser.ADD, 0); }
		
		/**
		 * After.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AFTER() { return getToken(HanaParser.AFTER, 0); }
		
		/**
		 * Agent.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AGENT() { return getToken(HanaParser.AGENT, 0); }
		
		/**
		 * Aggregate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AGGREGATE() { return getToken(HanaParser.AGGREGATE, 0); }
		
		/**
		 * Analyze.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ANALYZE() { return getToken(HanaParser.ANALYZE, 0); }
		
		/**
		 * Array.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ARRAY() { return getToken(HanaParser.ARRAY, 0); }
		
		/**
		 * Associate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ASSOCIATE() { return getToken(HanaParser.ASSOCIATE, 0); }
		
		/**
		 * At.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AT() { return getToken(HanaParser.AT, 0); }
		
		/**
		 * Attribute.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ATTRIBUTE() { return getToken(HanaParser.ATTRIBUTE, 0); }
		
		/**
		 * Audit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUDIT() { return getToken(HanaParser.AUDIT, 0); }
		
		/**
		 * Authid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTHID() { return getToken(HanaParser.AUTHID, 0); }
		
		/**
		 * Auto.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTO() { return getToken(HanaParser.AUTO, 0); }
		
		/**
		 * Automatic.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTOMATIC() { return getToken(HanaParser.AUTOMATIC, 0); }
		
		/**
		 * Autonomous transaction.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(HanaParser.AUTONOMOUS_TRANSACTION, 0); }
		
		/**
		 * Batch.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BATCH() { return getToken(HanaParser.BATCH, 0); }
		
		/**
		 * Before.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BEFORE() { return getToken(HanaParser.BEFORE, 0); }
		
		/**
		 * Bfile.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BFILE() { return getToken(HanaParser.BFILE, 0); }
		
		/**
		 * Binary double.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BINARY_DOUBLE() { return getToken(HanaParser.BINARY_DOUBLE, 0); }
		
		/**
		 * Binary float.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BINARY_FLOAT() { return getToken(HanaParser.BINARY_FLOAT, 0); }
		
		/**
		 * Binary integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BINARY_INTEGER() { return getToken(HanaParser.BINARY_INTEGER, 0); }
		
		/**
		 * Blob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BLOB() { return getToken(HanaParser.BLOB, 0); }
		
		/**
		 * Block.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BLOCK() { return getToken(HanaParser.BLOCK, 0); }
		
		/**
		 * Body.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BODY() { return getToken(HanaParser.BODY, 0); }
		
		/**
		 * Boolean.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BOOLEAN() { return getToken(HanaParser.BOOLEAN, 0); }
		
		/**
		 * Both.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BOTH() { return getToken(HanaParser.BOTH, 0); }
		
		/**
		 * Break.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BREAK() { return getToken(HanaParser.BREAK, 0); }
		
		/**
		 * Bulk.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BULK() { return getToken(HanaParser.BULK, 0); }
		
		/**
		 * Byte.
		 *
		 * @return the terminal node
		 */
		public TerminalNode BYTE() { return getToken(HanaParser.BYTE, 0); }
		
		/**
		 * C letter.
		 *
		 * @return the terminal node
		 */
		public TerminalNode C_LETTER() { return getToken(HanaParser.C_LETTER, 0); }
		
		/**
		 * Call.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CALL() { return getToken(HanaParser.CALL, 0); }
		
		/**
		 * Canonical.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CANONICAL() { return getToken(HanaParser.CANONICAL, 0); }
		
		/**
		 * Cascade.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CASCADE() { return getToken(HanaParser.CASCADE, 0); }
		
		/**
		 * Cast.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CAST() { return getToken(HanaParser.CAST, 0); }
		
		/**
		 * Char.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR() { return getToken(HanaParser.CHAR, 0); }
		
		/**
		 * Char cs.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHAR_CS() { return getToken(HanaParser.CHAR_CS, 0); }
		
		/**
		 * Character.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHARACTER() { return getToken(HanaParser.CHARACTER, 0); }
		
		/**
		 * Chr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CHR() { return getToken(HanaParser.CHR, 0); }
		
		/**
		 * Clob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CLOB() { return getToken(HanaParser.CLOB, 0); }
		
		/**
		 * Close.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CLOSE() { return getToken(HanaParser.CLOSE, 0); }
		
		/**
		 * Cluster.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CLUSTER() { return getToken(HanaParser.CLUSTER, 0); }
		
		/**
		 * Collect.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COLLECT() { return getToken(HanaParser.COLLECT, 0); }
		
		/**
		 * Columns.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COLUMNS() { return getToken(HanaParser.COLUMNS, 0); }
		
		/**
		 * Comment.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMENT() { return getToken(HanaParser.COMMENT, 0); }
		
		/**
		 * Commit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMIT() { return getToken(HanaParser.COMMIT, 0); }
		
		/**
		 * Committed.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMMITTED() { return getToken(HanaParser.COMMITTED, 0); }
		
		/**
		 * Compatibility.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMPATIBILITY() { return getToken(HanaParser.COMPATIBILITY, 0); }
		
		/**
		 * Compile.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMPILE() { return getToken(HanaParser.COMPILE, 0); }
		
		/**
		 * Compound.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COMPOUND() { return getToken(HanaParser.COMPOUND, 0); }
		
		/**
		 * Constant.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTANT() { return getToken(HanaParser.CONSTANT, 0); }
		
		/**
		 * Constraint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTRAINT() { return getToken(HanaParser.CONSTRAINT, 0); }
		
		/**
		 * Constraints.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTRAINTS() { return getToken(HanaParser.CONSTRAINTS, 0); }
		
		/**
		 * Constructor.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONSTRUCTOR() { return getToken(HanaParser.CONSTRUCTOR, 0); }
		
		/**
		 * Content.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONTENT() { return getToken(HanaParser.CONTENT, 0); }
		
		/**
		 * Context.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONTEXT() { return getToken(HanaParser.CONTEXT, 0); }
		
		/**
		 * Continue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONTINUE() { return getToken(HanaParser.CONTINUE, 0); }
		
		/**
		 * Convert.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CONVERT() { return getToken(HanaParser.CONVERT, 0); }
		
		/**
		 * Corrupt xid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CORRUPT_XID() { return getToken(HanaParser.CORRUPT_XID, 0); }
		
		/**
		 * Corrupt xid all.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CORRUPT_XID_ALL() { return getToken(HanaParser.CORRUPT_XID_ALL, 0); }
		
		/**
		 * Cost.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COST() { return getToken(HanaParser.COST, 0); }
		
		/**
		 * Count.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COUNT() { return getToken(HanaParser.COUNT, 0); }
		
		/**
		 * Creates the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CREATE() { return getToken(HanaParser.CREATE, 0); }
		
		/**
		 * Cross.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CROSS() { return getToken(HanaParser.CROSS, 0); }
		
		/**
		 * Cube.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CUBE() { return getToken(HanaParser.CUBE, 0); }
		
		/**
		 * Current user.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURRENT_USER() { return getToken(HanaParser.CURRENT_USER, 0); }
		
		/**
		 * Cursor.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		
		/**
		 * Customdatum.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CUSTOMDATUM() { return getToken(HanaParser.CUSTOMDATUM, 0); }
		
		/**
		 * Cycle.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CYCLE() { return getToken(HanaParser.CYCLE, 0); }
		
		/**
		 * Data.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DATA() { return getToken(HanaParser.DATA, 0); }
		
		/**
		 * Database.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DATABASE() { return getToken(HanaParser.DATABASE, 0); }
		
		/**
		 * Day.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DAY() { return getToken(HanaParser.DAY, 0); }
		
		/**
		 * Db role change.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DB_ROLE_CHANGE() { return getToken(HanaParser.DB_ROLE_CHANGE, 0); }
		
		/**
		 * Dbtimezone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DBTIMEZONE() { return getToken(HanaParser.DBTIMEZONE, 0); }
		
		/**
		 * Ddl.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DDL() { return getToken(HanaParser.DDL, 0); }
		
		/**
		 * Debug.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEBUG() { return getToken(HanaParser.DEBUG, 0); }
		
		/**
		 * Dec.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEC() { return getToken(HanaParser.DEC, 0); }
		
		/**
		 * Decimal.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECIMAL() { return getToken(HanaParser.DECIMAL, 0); }
		
		/**
		 * Decompose.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECOMPOSE() { return getToken(HanaParser.DECOMPOSE, 0); }
		
		/**
		 * Decrement.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DECREMENT() { return getToken(HanaParser.DECREMENT, 0); }
		
		/**
		 * Defaults.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFAULTS() { return getToken(HanaParser.DEFAULTS, 0); }
		
		/**
		 * Deferred.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFERRED() { return getToken(HanaParser.DEFERRED, 0); }
		
		/**
		 * Definer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DEFINER() { return getToken(HanaParser.DEFINER, 0); }
		
		/**
		 * Deterministic.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DETERMINISTIC() { return getToken(HanaParser.DETERMINISTIC, 0); }
		
		/**
		 * Dimension.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DIMENSION() { return getToken(HanaParser.DIMENSION, 0); }
		
		/**
		 * Disable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DISABLE() { return getToken(HanaParser.DISABLE, 0); }
		
		/**
		 * Disassociate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DISASSOCIATE() { return getToken(HanaParser.DISASSOCIATE, 0); }
		
		/**
		 * Document.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DOCUMENT() { return getToken(HanaParser.DOCUMENT, 0); }
		
		/**
		 * Double.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DOUBLE() { return getToken(HanaParser.DOUBLE, 0); }
		
		/**
		 * Dsinterval unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(HanaParser.DSINTERVAL_UNCONSTRAINED, 0); }
		
		/**
		 * Each.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EACH() { return getToken(HanaParser.EACH, 0); }
		
		/**
		 * Element.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ELEMENT() { return getToken(HanaParser.ELEMENT, 0); }
		
		/**
		 * Empty.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EMPTY() { return getToken(HanaParser.EMPTY, 0); }
		
		/**
		 * Enable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ENABLE() { return getToken(HanaParser.ENABLE, 0); }
		
		/**
		 * Encoding.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ENCODING() { return getToken(HanaParser.ENCODING, 0); }
		
		/**
		 * Entityescaping.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ENTITYESCAPING() { return getToken(HanaParser.ENTITYESCAPING, 0); }
		
		/**
		 * Errors.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ERRORS() { return getToken(HanaParser.ERRORS, 0); }
		
		/**
		 * Escape.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ESCAPE() { return getToken(HanaParser.ESCAPE, 0); }
		
		/**
		 * Evalname.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EVALNAME() { return getToken(HanaParser.EVALNAME, 0); }
		
		/**
		 * Exception init.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCEPTION_INIT() { return getToken(HanaParser.EXCEPTION_INIT, 0); }
		
		/**
		 * Exceptions.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCEPTIONS() { return getToken(HanaParser.EXCEPTIONS, 0); }
		
		/**
		 * Exclude.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXCLUDE() { return getToken(HanaParser.EXCLUDE, 0); }
		
		/**
		 * Execute.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXECUTE() { return getToken(HanaParser.EXECUTE, 0); }
		
		/**
		 * Exit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		
		/**
		 * Explain.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXPLAIN() { return getToken(HanaParser.EXPLAIN, 0); }
		
		/**
		 * External.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXTERNAL() { return getToken(HanaParser.EXTERNAL, 0); }
		
		/**
		 * Extract.
		 *
		 * @return the terminal node
		 */
		public TerminalNode EXTRACT() { return getToken(HanaParser.EXTRACT, 0); }
		
		/**
		 * Failure.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FAILURE() { return getToken(HanaParser.FAILURE, 0); }
		
		/**
		 * Final.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FINAL() { return getToken(HanaParser.FINAL, 0); }
		
		/**
		 * First.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		
		/**
		 * First value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FIRST_VALUE() { return getToken(HanaParser.FIRST_VALUE, 0); }
		
		/**
		 * Float.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FLOAT() { return getToken(HanaParser.FLOAT, 0); }
		
		/**
		 * Following.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOLLOWING() { return getToken(HanaParser.FOLLOWING, 0); }
		
		/**
		 * Follows.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FOLLOWS() { return getToken(HanaParser.FOLLOWS, 0); }
		
		/**
		 * Forall.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FORALL() { return getToken(HanaParser.FORALL, 0); }
		
		/**
		 * Force.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FORCE() { return getToken(HanaParser.FORCE, 0); }
		
		/**
		 * Full.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FULL() { return getToken(HanaParser.FULL, 0); }
		
		/**
		 * Function.
		 *
		 * @return the terminal node
		 */
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		
		/**
		 * Grouping.
		 *
		 * @return the terminal node
		 */
		public TerminalNode GROUPING() { return getToken(HanaParser.GROUPING, 0); }
		
		/**
		 * Hash.
		 *
		 * @return the terminal node
		 */
		public TerminalNode HASH() { return getToken(HanaParser.HASH, 0); }
		
		/**
		 * Hide.
		 *
		 * @return the terminal node
		 */
		public TerminalNode HIDE() { return getToken(HanaParser.HIDE, 0); }
		
		/**
		 * Hour.
		 *
		 * @return the terminal node
		 */
		public TerminalNode HOUR() { return getToken(HanaParser.HOUR, 0); }
		
		/**
		 * Ignore.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IGNORE() { return getToken(HanaParser.IGNORE, 0); }
		
		/**
		 * Immediate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode IMMEDIATE() { return getToken(HanaParser.IMMEDIATE, 0); }
		
		/**
		 * Include.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INCLUDE() { return getToken(HanaParser.INCLUDE, 0); }
		
		/**
		 * Including.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INCLUDING() { return getToken(HanaParser.INCLUDING, 0); }
		
		/**
		 * Increment.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INCREMENT() { return getToken(HanaParser.INCREMENT, 0); }
		
		/**
		 * Indent.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDENT() { return getToken(HanaParser.INDENT, 0); }
		
		/**
		 * Indexed.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDEXED() { return getToken(HanaParser.INDEXED, 0); }
		
		/**
		 * Indicator.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDICATOR() { return getToken(HanaParser.INDICATOR, 0); }
		
		/**
		 * Indices.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INDICES() { return getToken(HanaParser.INDICES, 0); }
		
		/**
		 * Infinite.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INFINITE() { return getToken(HanaParser.INFINITE, 0); }
		
		/**
		 * Inline.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INLINE() { return getToken(HanaParser.INLINE, 0); }
		
		/**
		 * Inner.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INNER() { return getToken(HanaParser.INNER, 0); }
		
		/**
		 * Inout.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INOUT() { return getToken(HanaParser.INOUT, 0); }
		
		/**
		 * Instantiable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INSTANTIABLE() { return getToken(HanaParser.INSTANTIABLE, 0); }
		
		/**
		 * Instead.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INSTEAD() { return getToken(HanaParser.INSTEAD, 0); }
		
		/**
		 * Int.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INT() { return getToken(HanaParser.INT, 0); }
		
		/**
		 * Integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTEGER() { return getToken(HanaParser.INTEGER, 0); }
		
		/**
		 * Interval.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INTERVAL() { return getToken(HanaParser.INTERVAL, 0); }
		
		/**
		 * Invalidate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode INVALIDATE() { return getToken(HanaParser.INVALIDATE, 0); }
		
		/**
		 * Isolation.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ISOLATION() { return getToken(HanaParser.ISOLATION, 0); }
		
		/**
		 * Iterate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ITERATE() { return getToken(HanaParser.ITERATE, 0); }
		
		/**
		 * Java.
		 *
		 * @return the terminal node
		 */
		public TerminalNode JAVA() { return getToken(HanaParser.JAVA, 0); }
		
		/**
		 * Join.
		 *
		 * @return the terminal node
		 */
		public TerminalNode JOIN() { return getToken(HanaParser.JOIN, 0); }
		
		/**
		 * Keep.
		 *
		 * @return the terminal node
		 */
		public TerminalNode KEEP() { return getToken(HanaParser.KEEP, 0); }
		
		/**
		 * Language.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		
		/**
		 * Last.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LAST() { return getToken(HanaParser.LAST, 0); }
		
		/**
		 * Last value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LAST_VALUE() { return getToken(HanaParser.LAST_VALUE, 0); }
		
		/**
		 * Leading.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEADING() { return getToken(HanaParser.LEADING, 0); }
		
		/**
		 * Left.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEFT() { return getToken(HanaParser.LEFT, 0); }
		
		/**
		 * Level.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEVEL() { return getToken(HanaParser.LEVEL, 0); }
		
		/**
		 * Library.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIBRARY() { return getToken(HanaParser.LIBRARY, 0); }
		
		/**
		 * Like2.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKE2() { return getToken(HanaParser.LIKE2, 0); }
		
		/**
		 * Like4.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKE4() { return getToken(HanaParser.LIKE4, 0); }
		
		/**
		 * Likec.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKEC() { return getToken(HanaParser.LIKEC, 0); }
		
		/**
		 * Like regexpr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIKE_REGEXPR() { return getToken(HanaParser.LIKE_REGEXPR, 0); }
		
		/**
		 * Limit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LIMIT() { return getToken(HanaParser.LIMIT, 0); }
		
		/**
		 * Local.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOCAL() { return getToken(HanaParser.LOCAL, 0); }
		
		/**
		 * Locked.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOCKED() { return getToken(HanaParser.LOCKED, 0); }
		
		/**
		 * Log.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOG() { return getToken(HanaParser.LOG, 0); }
		
		/**
		 * Logoff.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOGOFF() { return getToken(HanaParser.LOGOFF, 0); }
		
		/**
		 * Logon.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOGON() { return getToken(HanaParser.LOGON, 0); }
		
		/**
		 * Long.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LONG() { return getToken(HanaParser.LONG, 0); }
		
		/**
		 * Loop.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LOOP() { return getToken(HanaParser.LOOP, 0); }
		
		/**
		 * Main.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAIN() { return getToken(HanaParser.MAIN, 0); }
		
		/**
		 * Map.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAP() { return getToken(HanaParser.MAP, 0); }
		
		/**
		 * Matched.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MATCHED() { return getToken(HanaParser.MATCHED, 0); }
		
		/**
		 * Maxvalue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAXVALUE() { return getToken(HanaParser.MAXVALUE, 0); }
		
		/**
		 * Measures.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEASURES() { return getToken(HanaParser.MEASURES, 0); }
		
		/**
		 * Member.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		
		/**
		 * Merge.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MERGE() { return getToken(HanaParser.MERGE, 0); }
		
		/**
		 * Minute.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINUTE() { return getToken(HanaParser.MINUTE, 0); }
		
		/**
		 * Minvalue.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MINVALUE() { return getToken(HanaParser.MINVALUE, 0); }
		
		/**
		 * Mlslabel.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MLSLABEL() { return getToken(HanaParser.MLSLABEL, 0); }
		
		/**
		 * Mode.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MODE() { return getToken(HanaParser.MODE, 0); }
		
		/**
		 * Model.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MODEL() { return getToken(HanaParser.MODEL, 0); }
		
		/**
		 * Modify.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MODIFY() { return getToken(HanaParser.MODIFY, 0); }
		
		/**
		 * Month.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MONTH() { return getToken(HanaParser.MONTH, 0); }
		
		/**
		 * Multiset.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MULTISET() { return getToken(HanaParser.MULTISET, 0); }
		
		/**
		 * Name.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		
		/**
		 * Nan.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAN() { return getToken(HanaParser.NAN, 0); }
		
		/**
		 * Natural.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NATURAL() { return getToken(HanaParser.NATURAL, 0); }
		
		/**
		 * Naturaln.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NATURALN() { return getToken(HanaParser.NATURALN, 0); }
		
		/**
		 * Nav.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NAV() { return getToken(HanaParser.NAV, 0); }
		
		/**
		 * Nchar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NCHAR() { return getToken(HanaParser.NCHAR, 0); }
		
		/**
		 * Nchar cs.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NCHAR_CS() { return getToken(HanaParser.NCHAR_CS, 0); }
		
		/**
		 * Nclob.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NCLOB() { return getToken(HanaParser.NCLOB, 0); }
		
		/**
		 * Nested.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NESTED() { return getToken(HanaParser.NESTED, 0); }
		
		/**
		 * New.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NEW() { return getToken(HanaParser.NEW, 0); }
		
		/**
		 * No.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NO() { return getToken(HanaParser.NO, 0); }
		
		/**
		 * Noaudit.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOAUDIT() { return getToken(HanaParser.NOAUDIT, 0); }
		
		/**
		 * Nocopy.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOCOPY() { return getToken(HanaParser.NOCOPY, 0); }
		
		/**
		 * Nocycle.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOCYCLE() { return getToken(HanaParser.NOCYCLE, 0); }
		
		/**
		 * Noentityescaping.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOENTITYESCAPING() { return getToken(HanaParser.NOENTITYESCAPING, 0); }
		
		/**
		 * None.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NONE() { return getToken(HanaParser.NONE, 0); }
		
		/**
		 * Noschemacheck.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NOSCHEMACHECK() { return getToken(HanaParser.NOSCHEMACHECK, 0); }
		
		/**
		 * Nulls.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		
		/**
		 * Number.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NUMBER() { return getToken(HanaParser.NUMBER, 0); }
		
		/**
		 * Numeric.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NUMERIC() { return getToken(HanaParser.NUMERIC, 0); }
		
		/**
		 * Nvarchar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NVARCHAR() { return getToken(HanaParser.NVARCHAR, 0); }
		
		/**
		 * Object.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OBJECT() { return getToken(HanaParser.OBJECT, 0); }
		
		/**
		 * Off.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OFF() { return getToken(HanaParser.OFF, 0); }
		
		/**
		 * Oid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OID() { return getToken(HanaParser.OID, 0); }
		
		/**
		 * Old.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OLD() { return getToken(HanaParser.OLD, 0); }
		
		/**
		 * Only.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		
		/**
		 * Open.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OPEN() { return getToken(HanaParser.OPEN, 0); }
		
		/**
		 * Oradata.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORADATA() { return getToken(HanaParser.ORADATA, 0); }
		
		/**
		 * Ordinality.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ORDINALITY() { return getToken(HanaParser.ORDINALITY, 0); }
		
		/**
		 * Oserror.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OSERROR() { return getToken(HanaParser.OSERROR, 0); }
		
		/**
		 * Out.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		
		/**
		 * Outer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OUTER() { return getToken(HanaParser.OUTER, 0); }
		
		/**
		 * Over.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OVER() { return getToken(HanaParser.OVER, 0); }
		
		/**
		 * Overriding.
		 *
		 * @return the terminal node
		 */
		public TerminalNode OVERRIDING() { return getToken(HanaParser.OVERRIDING, 0); }
		
		/**
		 * Package.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PACKAGE() { return getToken(HanaParser.PACKAGE, 0); }
		
		/**
		 * Parallel enable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PARALLEL_ENABLE() { return getToken(HanaParser.PARALLEL_ENABLE, 0); }
		
		/**
		 * Parameters.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PARAMETERS() { return getToken(HanaParser.PARAMETERS, 0); }
		
		/**
		 * Parent.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PARENT() { return getToken(HanaParser.PARENT, 0); }
		
		/**
		 * Partition.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PARTITION() { return getToken(HanaParser.PARTITION, 0); }
		
		/**
		 * Passing.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PASSING() { return getToken(HanaParser.PASSING, 0); }
		
		/**
		 * Path.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PATH() { return getToken(HanaParser.PATH, 0); }
		
		/**
		 * Pipelined.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PIPELINED() { return getToken(HanaParser.PIPELINED, 0); }
		
		/**
		 * Plan.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PLAN() { return getToken(HanaParser.PLAN, 0); }
		
		/**
		 * Pls integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PLS_INTEGER() { return getToken(HanaParser.PLS_INTEGER, 0); }
		
		/**
		 * Positive.
		 *
		 * @return the terminal node
		 */
		public TerminalNode POSITIVE() { return getToken(HanaParser.POSITIVE, 0); }
		
		/**
		 * Positiven.
		 *
		 * @return the terminal node
		 */
		public TerminalNode POSITIVEN() { return getToken(HanaParser.POSITIVEN, 0); }
		
		/**
		 * Pragma.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRAGMA() { return getToken(HanaParser.PRAGMA, 0); }
		
		/**
		 * Preceding.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRECEDING() { return getToken(HanaParser.PRECEDING, 0); }
		
		/**
		 * Precision.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRECISION() { return getToken(HanaParser.PRECISION, 0); }
		
		/**
		 * Present.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PRESENT() { return getToken(HanaParser.PRESENT, 0); }
		
		/**
		 * Raise.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RAISE() { return getToken(HanaParser.RAISE, 0); }
		
		/**
		 * Range.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RANGE() { return getToken(HanaParser.RANGE, 0); }
		
		/**
		 * Raw.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RAW() { return getToken(HanaParser.RAW, 0); }
		
		/**
		 * Read.
		 *
		 * @return the terminal node
		 */
		public TerminalNode READ() { return getToken(HanaParser.READ, 0); }
		
		/**
		 * Real.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REAL() { return getToken(HanaParser.REAL, 0); }
		
		/**
		 * Record.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RECORD() { return getToken(HanaParser.RECORD, 0); }
		
		/**
		 * Ref.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REF() { return getToken(HanaParser.REF, 0); }
		
		/**
		 * Reference.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REFERENCE() { return getToken(HanaParser.REFERENCE, 0); }
		
		/**
		 * Referencing.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REFERENCING() { return getToken(HanaParser.REFERENCING, 0); }
		
		/**
		 * Reject.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REJECT() { return getToken(HanaParser.REJECT, 0); }
		
		/**
		 * Relies on.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RELIES_ON() { return getToken(HanaParser.RELIES_ON, 0); }
		
		/**
		 * Rename.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RENAME() { return getToken(HanaParser.RENAME, 0); }
		
		/**
		 * Replace.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REPLACE() { return getToken(HanaParser.REPLACE, 0); }
		
		/**
		 * Respect.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESPECT() { return getToken(HanaParser.RESPECT, 0); }
		
		/**
		 * Restrict references.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESTRICT_REFERENCES() { return getToken(HanaParser.RESTRICT_REFERENCES, 0); }
		
		/**
		 * Result.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		
		/**
		 * Result cache.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RESULT_CACHE() { return getToken(HanaParser.RESULT_CACHE, 0); }
		
		/**
		 * Return.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		
		/**
		 * Returns.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURNS() { return getToken(HanaParser.RETURNS, 0); }
		
		/**
		 * Returning.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RETURNING() { return getToken(HanaParser.RETURNING, 0); }
		
		/**
		 * Reuse.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REUSE() { return getToken(HanaParser.REUSE, 0); }
		
		/**
		 * Reverse.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REVERSE() { return getToken(HanaParser.REVERSE, 0); }
		
		/**
		 * Right.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RIGHT() { return getToken(HanaParser.RIGHT, 0); }
		
		/**
		 * Rollback.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		
		/**
		 * Rollup.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROLLUP() { return getToken(HanaParser.ROLLUP, 0); }
		
		/**
		 * Row.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROW() { return getToken(HanaParser.ROW, 0); }
		
		/**
		 * Rowid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROWID() { return getToken(HanaParser.ROWID, 0); }
		
		/**
		 * Rows.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROWS() { return getToken(HanaParser.ROWS, 0); }
		
		/**
		 * Rules.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RULES() { return getToken(HanaParser.RULES, 0); }
		
		/**
		 * Sample.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SAMPLE() { return getToken(HanaParser.SAMPLE, 0); }
		
		/**
		 * Save.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SAVE() { return getToken(HanaParser.SAVE, 0); }
		
		/**
		 * Savepoint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SAVEPOINT() { return getToken(HanaParser.SAVEPOINT, 0); }
		
		/**
		 * Schema.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SCHEMA() { return getToken(HanaParser.SCHEMA, 0); }
		
		/**
		 * Schemacheck.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SCHEMACHECK() { return getToken(HanaParser.SCHEMACHECK, 0); }
		
		/**
		 * Scn.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SCN() { return getToken(HanaParser.SCN, 0); }
		
		/**
		 * Second.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SECOND() { return getToken(HanaParser.SECOND, 0); }
		
		/**
		 * Seed.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEED() { return getToken(HanaParser.SEED, 0); }
		
		/**
		 * Segment.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEGMENT() { return getToken(HanaParser.SEGMENT, 0); }
		
		/**
		 * Self.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SELF() { return getToken(HanaParser.SELF, 0); }
		
		/**
		 * Sequential.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		
		/**
		 * Serializable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SERIALIZABLE() { return getToken(HanaParser.SERIALIZABLE, 0); }
		
		/**
		 * Serially reusable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SERIALLY_REUSABLE() { return getToken(HanaParser.SERIALLY_REUSABLE, 0); }
		
		/**
		 * Servererror.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SERVERERROR() { return getToken(HanaParser.SERVERERROR, 0); }
		
		/**
		 * Sessiontimezone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SESSIONTIMEZONE() { return getToken(HanaParser.SESSIONTIMEZONE, 0); }
		
		/**
		 * Sets the.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		
		/**
		 * Sets.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SETS() { return getToken(HanaParser.SETS, 0); }
		
		/**
		 * Settings.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SETTINGS() { return getToken(HanaParser.SETTINGS, 0); }
		
		/**
		 * Show.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SHOW() { return getToken(HanaParser.SHOW, 0); }
		
		/**
		 * Shutdown.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SHUTDOWN() { return getToken(HanaParser.SHUTDOWN, 0); }
		
		/**
		 * Siblings.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIBLINGS() { return getToken(HanaParser.SIBLINGS, 0); }
		
		/**
		 * Signtype.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIGNTYPE() { return getToken(HanaParser.SIGNTYPE, 0); }
		
		/**
		 * Simple integer.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIMPLE_INTEGER() { return getToken(HanaParser.SIMPLE_INTEGER, 0); }
		
		/**
		 * Single.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SINGLE() { return getToken(HanaParser.SINGLE, 0); }
		
		/**
		 * Size.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SIZE() { return getToken(HanaParser.SIZE, 0); }
		
		/**
		 * Skip.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SKIP_() { return getToken(HanaParser.SKIP_, 0); }
		
		/**
		 * Smallint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SMALLINT() { return getToken(HanaParser.SMALLINT, 0); }
		
		/**
		 * Snapshot.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SNAPSHOT() { return getToken(HanaParser.SNAPSHOT, 0); }
		
		/**
		 * Some.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SOME() { return getToken(HanaParser.SOME, 0); }
		
		/**
		 * Specification.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SPECIFICATION() { return getToken(HanaParser.SPECIFICATION, 0); }
		
		/**
		 * Sqldata.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQLDATA() { return getToken(HanaParser.SQLDATA, 0); }
		
		/**
		 * Sqlerror.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SQLERROR() { return getToken(HanaParser.SQLERROR, 0); }
		
		/**
		 * Standalone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STANDALONE() { return getToken(HanaParser.STANDALONE, 0); }
		
		/**
		 * Startup.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STARTUP() { return getToken(HanaParser.STARTUP, 0); }
		
		/**
		 * Statement.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STATEMENT() { return getToken(HanaParser.STATEMENT, 0); }
		
		/**
		 * Statement id.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STATEMENT_ID() { return getToken(HanaParser.STATEMENT_ID, 0); }
		
		/**
		 * Static.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STATIC() { return getToken(HanaParser.STATIC, 0); }
		
		/**
		 * Statistics.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STATISTICS() { return getToken(HanaParser.STATISTICS, 0); }
		
		/**
		 * String.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STRING() { return getToken(HanaParser.STRING, 0); }
		
		/**
		 * Submultiset.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUBMULTISET() { return getToken(HanaParser.SUBMULTISET, 0); }
		
		/**
		 * Subpartition.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUBPARTITION() { return getToken(HanaParser.SUBPARTITION, 0); }
		
		/**
		 * Substitutable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUBSTITUTABLE() { return getToken(HanaParser.SUBSTITUTABLE, 0); }
		
		/**
		 * Subtype.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUBTYPE() { return getToken(HanaParser.SUBTYPE, 0); }
		
		/**
		 * Success.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUCCESS() { return getToken(HanaParser.SUCCESS, 0); }
		
		/**
		 * Suspend.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUSPEND() { return getToken(HanaParser.SUSPEND, 0); }
		
		/**
		 * Temporary.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TEMPORARY() { return getToken(HanaParser.TEMPORARY, 0); }
		
		/**
		 * Time.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		
		/**
		 * Timestamp.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		
		/**
		 * Timestamp ltz unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		
		/**
		 * Timestamp tz unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		
		/**
		 * Timestamp unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_UNCONSTRAINED, 0); }
		
		/**
		 * Timezone abbr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMEZONE_ABBR() { return getToken(HanaParser.TIMEZONE_ABBR, 0); }
		
		/**
		 * Timezone hour.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMEZONE_HOUR() { return getToken(HanaParser.TIMEZONE_HOUR, 0); }
		
		/**
		 * Timezone minute.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMEZONE_MINUTE() { return getToken(HanaParser.TIMEZONE_MINUTE, 0); }
		
		/**
		 * Timezone region.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TIMEZONE_REGION() { return getToken(HanaParser.TIMEZONE_REGION, 0); }
		
		/**
		 * Tinyint.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TINYINT() { return getToken(HanaParser.TINYINT, 0); }
		
		/**
		 * Trailing.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRAILING() { return getToken(HanaParser.TRAILING, 0); }
		
		/**
		 * Transaction.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRANSACTION() { return getToken(HanaParser.TRANSACTION, 0); }
		
		/**
		 * Translate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRANSLATE() { return getToken(HanaParser.TRANSLATE, 0); }
		
		/**
		 * Treat.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TREAT() { return getToken(HanaParser.TREAT, 0); }
		
		/**
		 * Trigger.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRIGGER() { return getToken(HanaParser.TRIGGER, 0); }
		
		/**
		 * Trim.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRIM() { return getToken(HanaParser.TRIM, 0); }
		
		/**
		 * Truncate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TRUNCATE() { return getToken(HanaParser.TRUNCATE, 0); }
		
		/**
		 * Type.
		 *
		 * @return the terminal node
		 */
		public TerminalNode TYPE() { return getToken(HanaParser.TYPE, 0); }
		
		/**
		 * Unbounded.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNBOUNDED() { return getToken(HanaParser.UNBOUNDED, 0); }
		
		/**
		 * Under.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNDER() { return getToken(HanaParser.UNDER, 0); }
		
		/**
		 * Unlimited.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNLIMITED() { return getToken(HanaParser.UNLIMITED, 0); }
		
		/**
		 * Until.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UNTIL() { return getToken(HanaParser.UNTIL, 0); }
		
		/**
		 * Updated.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPDATED() { return getToken(HanaParser.UPDATED, 0); }
		
		/**
		 * Upsert.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UPSERT() { return getToken(HanaParser.UPSERT, 0); }
		
		/**
		 * Urowid.
		 *
		 * @return the terminal node
		 */
		public TerminalNode UROWID() { return getToken(HanaParser.UROWID, 0); }
		
		/**
		 * Use.
		 *
		 * @return the terminal node
		 */
		public TerminalNode USE() { return getToken(HanaParser.USE, 0); }
		
		/**
		 * Validate.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALIDATE() { return getToken(HanaParser.VALIDATE, 0); }
		
		/**
		 * Value.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		
		/**
		 * Varchar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARCHAR() { return getToken(HanaParser.VARCHAR, 0); }
		
		/**
		 * Varchar2.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARCHAR2() { return getToken(HanaParser.VARCHAR2, 0); }
		
		/**
		 * Variable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARIABLE() { return getToken(HanaParser.VARIABLE, 0); }
		
		/**
		 * Varray.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARRAY() { return getToken(HanaParser.VARRAY, 0); }
		
		/**
		 * Varying.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARYING() { return getToken(HanaParser.VARYING, 0); }
		
		/**
		 * Version.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VERSION() { return getToken(HanaParser.VERSION, 0); }
		
		/**
		 * Versions.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VERSIONS() { return getToken(HanaParser.VERSIONS, 0); }
		
		/**
		 * Wait.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WAIT() { return getToken(HanaParser.WAIT, 0); }
		
		/**
		 * Warning.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WARNING() { return getToken(HanaParser.WARNING, 0); }
		
		/**
		 * Wellformed.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WELLFORMED() { return getToken(HanaParser.WELLFORMED, 0); }
		
		/**
		 * Whenever.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHENEVER() { return getToken(HanaParser.WHENEVER, 0); }
		
		/**
		 * While.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WHILE() { return getToken(HanaParser.WHILE, 0); }
		
		/**
		 * Within.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WITHIN() { return getToken(HanaParser.WITHIN, 0); }
		
		/**
		 * Work.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WORK() { return getToken(HanaParser.WORK, 0); }
		
		/**
		 * Write.
		 *
		 * @return the terminal node
		 */
		public TerminalNode WRITE() { return getToken(HanaParser.WRITE, 0); }
		
		/**
		 * Xml.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XML() { return getToken(HanaParser.XML, 0); }
		
		/**
		 * Xmlagg.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLAGG() { return getToken(HanaParser.XMLAGG, 0); }
		
		/**
		 * Xmlattributes.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLATTRIBUTES() { return getToken(HanaParser.XMLATTRIBUTES, 0); }
		
		/**
		 * Xmlcast.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLCAST() { return getToken(HanaParser.XMLCAST, 0); }
		
		/**
		 * Xmlcolattval.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLCOLATTVAL() { return getToken(HanaParser.XMLCOLATTVAL, 0); }
		
		/**
		 * Xmlelement.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLELEMENT() { return getToken(HanaParser.XMLELEMENT, 0); }
		
		/**
		 * Xmlexists.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLEXISTS() { return getToken(HanaParser.XMLEXISTS, 0); }
		
		/**
		 * Xmlforest.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLFOREST() { return getToken(HanaParser.XMLFOREST, 0); }
		
		/**
		 * Xmlnamespaces.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLNAMESPACES() { return getToken(HanaParser.XMLNAMESPACES, 0); }
		
		/**
		 * Xmlparse.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLPARSE() { return getToken(HanaParser.XMLPARSE, 0); }
		
		/**
		 * Xmlpi.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLPI() { return getToken(HanaParser.XMLPI, 0); }
		
		/**
		 * Xmlquery.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLQUERY() { return getToken(HanaParser.XMLQUERY, 0); }
		
		/**
		 * Xmlroot.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLROOT() { return getToken(HanaParser.XMLROOT, 0); }
		
		/**
		 * Xmlserialize.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLSERIALIZE() { return getToken(HanaParser.XMLSERIALIZE, 0); }
		
		/**
		 * Xmltable.
		 *
		 * @return the terminal node
		 */
		public TerminalNode XMLTABLE() { return getToken(HanaParser.XMLTABLE, 0); }
		
		/**
		 * Year.
		 *
		 * @return the terminal node
		 */
		public TerminalNode YEAR() { return getToken(HanaParser.YEAR, 0); }
		
		/**
		 * Yes.
		 *
		 * @return the terminal node
		 */
		public TerminalNode YES() { return getToken(HanaParser.YES, 0); }
		
		/**
		 * Yminterval unconstrained.
		 *
		 * @return the terminal node
		 */
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(HanaParser.YMINTERVAL_UNCONSTRAINED, 0); }
		
		/**
		 * Zone.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ZONE() { return getToken(HanaParser.ZONE, 0); }
		
		/**
		 * Prediction.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION() { return getToken(HanaParser.PREDICTION, 0); }
		
		/**
		 * Prediction bounds.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_BOUNDS() { return getToken(HanaParser.PREDICTION_BOUNDS, 0); }
		
		/**
		 * Prediction cost.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_COST() { return getToken(HanaParser.PREDICTION_COST, 0); }
		
		/**
		 * Prediction details.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_DETAILS() { return getToken(HanaParser.PREDICTION_DETAILS, 0); }
		
		/**
		 * Prediction probability.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(HanaParser.PREDICTION_PROBABILITY, 0); }
		
		/**
		 * Prediction set.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PREDICTION_SET() { return getToken(HanaParser.PREDICTION_SET, 0); }
		
		/**
		 * Cume dist.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CUME_DIST() { return getToken(HanaParser.CUME_DIST, 0); }
		
		/**
		 * Dense rank.
		 *
		 * @return the terminal node
		 */
		public TerminalNode DENSE_RANK() { return getToken(HanaParser.DENSE_RANK, 0); }
		
		/**
		 * Listagg.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LISTAGG() { return getToken(HanaParser.LISTAGG, 0); }
		
		/**
		 * Percent rank.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENT_RANK() { return getToken(HanaParser.PERCENT_RANK, 0); }
		
		/**
		 * Percentile cont.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENTILE_CONT() { return getToken(HanaParser.PERCENTILE_CONT, 0); }
		
		/**
		 * Percentile disc.
		 *
		 * @return the terminal node
		 */
		public TerminalNode PERCENTILE_DISC() { return getToken(HanaParser.PERCENTILE_DISC, 0); }
		
		/**
		 * Rank.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RANK() { return getToken(HanaParser.RANK, 0); }
		
		/**
		 * Avg.
		 *
		 * @return the terminal node
		 */
		public TerminalNode AVG() { return getToken(HanaParser.AVG, 0); }
		
		/**
		 * Corr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode CORR() { return getToken(HanaParser.CORR, 0); }
		
		/**
		 * Lag.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LAG() { return getToken(HanaParser.LAG, 0); }
		
		/**
		 * Lead.
		 *
		 * @return the terminal node
		 */
		public TerminalNode LEAD() { return getToken(HanaParser.LEAD, 0); }
		
		/**
		 * Max.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MAX() { return getToken(HanaParser.MAX, 0); }
		
		/**
		 * Median.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MEDIAN() { return getToken(HanaParser.MEDIAN, 0); }
		
		/**
		 * Min.
		 *
		 * @return the terminal node
		 */
		public TerminalNode MIN() { return getToken(HanaParser.MIN, 0); }
		
		/**
		 * Ntile.
		 *
		 * @return the terminal node
		 */
		public TerminalNode NTILE() { return getToken(HanaParser.NTILE, 0); }
		
		/**
		 * Ratio to report.
		 *
		 * @return the terminal node
		 */
		public TerminalNode RATIO_TO_REPORT() { return getToken(HanaParser.RATIO_TO_REPORT, 0); }
		
		/**
		 * Row number.
		 *
		 * @return the terminal node
		 */
		public TerminalNode ROW_NUMBER() { return getToken(HanaParser.ROW_NUMBER, 0); }
		
		/**
		 * Sum.
		 *
		 * @return the terminal node
		 */
		public TerminalNode SUM() { return getToken(HanaParser.SUM, 0); }
		
		/**
		 * Variance.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VARIANCE() { return getToken(HanaParser.VARIANCE, 0); }
		
		/**
		 * Regr.
		 *
		 * @return the terminal node
		 */
		public TerminalNode REGR_() { return getToken(HanaParser.REGR_, 0); }
		
		/**
		 * Stddev.
		 *
		 * @return the terminal node
		 */
		public TerminalNode STDDEV() { return getToken(HanaParser.STDDEV, 0); }
		
		/**
		 * Var.
		 *
		 * @return the terminal node
		 */
		public TerminalNode VAR_() { return getToken(HanaParser.VAR_, 0); }
		
		/**
		 * Covar.
		 *
		 * @return the terminal node
		 */
		public TerminalNode COVAR_() { return getToken(HanaParser.COVAR_, 0); }
		
		/**
		 * Instantiates a new regular id context.
		 *
		 * @param parent the parent
		 * @param invokingState the invoking state
		 */
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		
		/**
		 * Gets the rule index.
		 *
		 * @return the rule index
		 */
		@Override public int getRuleIndex() { return RULE_regular_id; }
		
		/**
		 * Enter rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRegular_id(this);
		}
		
		/**
		 * Exit rule.
		 *
		 * @param listener the listener
		 */
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRegular_id(this);
		}
		
		/**
		 * Accept.
		 *
		 * @param <T> the generic type
		 * @param visitor the visitor
		 * @return the t
		 */
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	/**
	 * Regular id.
	 *
	 * @return the regular id context
	 * @throws RecognitionException the recognition exception
	 */
	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5815);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREAK) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE_REGEXPR - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TEMPORARY - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (WHILE - 449)) | (1L << (WITHIN - 449)) | (1L << (WORK - 449)) | (1L << (WRITE - 449)) | (1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (LEAD - 513)) | (1L << (MAX - 513)) | (1L << (MEDIAN - 513)) | (1L << (MIN - 513)) | (1L << (NTILE - 513)) | (1L << (RATIO_TO_REPORT - 513)) | (1L << (ROW_NUMBER - 513)) | (1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/**
	 * Sempred.
	 *
	 * @param _localctx the localctx
	 * @param ruleIndex the rule index
	 * @param predIndex the pred index
	 * @return true, if successful
	 */
	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 284:
			return condition__sempred((Condition_Context)_localctx, predIndex);
		case 294:
			return expression__sempred((Expression_Context)_localctx, predIndex);
		}
		return true;
	}
	
	/**
	 * Condition sempred.
	 *
	 * @param _localctx the localctx
	 * @param predIndex the pred index
	 * @return true, if successful
	 */
	private boolean condition__sempred(Condition_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 5);
		case 1:
			return precpred(_ctx, 4);
		}
		return true;
	}
	
	/**
	 * Expression sempred.
	 *
	 * @param _localctx the localctx
	 * @param predIndex the pred index
	 * @return true, if successful
	 */
	private boolean expression__sempred(Expression_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 4);
		}
		return true;
	}

	/** The Constant _serializedATNSegment0. */
	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0239\u16ba\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0001\u0000\u0004\u0000\u0370\b\u0000\u000b"+
		"\u0000\f\u0000\u0371\u0001\u0001\u0005\u0001\u0375\b\u0001\n\u0001\f\u0001"+
		"\u0378\t\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0005\u0002\u037d\b"+
		"\u0002\n\u0002\f\u0002\u0380\t\u0002\u0001\u0002\u0001\u0002\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003"+
		"\u038a\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006"+
		"\u0003\u0006\u0397\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006"+
		"\u039c\b\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u03a0\b\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u03a5\b\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0003\u0006\u03aa\b\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u03b3"+
		"\b\u0006\u0003\u0006\u03b5\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0003\u0006\u03bb\b\u0006\u0001\u0006\u0003\u0006\u03be\b"+
		"\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u03c2\b\u0006\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u03c7\b\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u03cd\b\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0003\u0007\u03d2\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u03d7\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03e0\b\u0007\u0003\u0007\u03e2"+
		"\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03e8"+
		"\b\u0007\u0001\u0007\u0003\u0007\u03eb\b\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\b\u0001\b\u0001\t\u0001\t\u0003\t\u03f4\b\t\u0001\n"+
		"\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u03fc"+
		"\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u040c\b\f\u0001"+
		"\f\u0001\f\u0003\f\u0410\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0001\f\u0001\f\u0003\f\u041a\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0003\f\u0421\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u0428"+
		"\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u042f\b\f\u0001\f"+
		"\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003"+
		"\f\u043a\b\f\u0003\f\u043c\b\f\u0001\r\u0001\r\u0001\r\u0003\r\u0441\b"+
		"\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0005\u000f\u044c\b\u000f\n\u000f\f\u000f"+
		"\u044f\t\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0003\u0012\u045e\b\u0012\u0001\u0012\u0003\u0012"+
		"\u0461\b\u0012\u0001\u0013\u0003\u0013\u0464\b\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0003\u0013\u0469\b\u0013\u0001\u0014\u0001\u0014\u0003"+
		"\u0014\u046d\b\u0014\u0001\u0014\u0001\u0014\u0005\u0014\u0471\b\u0014"+
		"\n\u0014\f\u0014\u0474\t\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001"+
		"\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0018\u0001"+
		"\u0018\u0001\u0019\u0001\u0019\u0005\u0019\u0482\b\u0019\n\u0019\f\u0019"+
		"\u0485\t\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0003\u001b\u048f\b\u001b\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0493\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u0497\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u049b\b\u001c\u0001"+
		"\u001c\u0003\u001c\u049e\b\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0003"+
		"\u001d\u04a3\b\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u04a8"+
		"\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u04ae"+
		"\b\u001f\u0001 \u0001 \u0001 \u0001 \u0001 \u0005 \u04b5\b \n \f \u04b8"+
		"\t \u0001 \u0001 \u0001!\u0001!\u0001!\u0001\"\u0001\"\u0001\"\u0003\""+
		"\u04c2\b\"\u0001\"\u0001\"\u0001\"\u0001#\u0001#\u0001#\u0005#\u04ca\b"+
		"#\n#\f#\u04cd\t#\u0001$\u0001$\u0001$\u0005$\u04d2\b$\n$\f$\u04d5\t$\u0001"+
		"$\u0001$\u0001$\u0001$\u0003$\u04db\b$\u0001%\u0001%\u0001&\u0001&\u0001"+
		"&\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0003"+
		"\'\u04ea\b\'\u0001(\u0001(\u0001(\u0003(\u04ef\b(\u0001)\u0004)\u04f2"+
		"\b)\u000b)\f)\u04f3\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"+\u0001+\u0001+\u0005+\u0500\b+\n+\f+\u0503\t+\u0001,\u0001,\u0001,\u0001"+
		",\u0003,\u0509\b,\u0001-\u0004-\u050c\b-\u000b-\f-\u050d\u0001.\u0004"+
		".\u0511\b.\u000b.\f.\u0512\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001"+
		"/\u0001/\u0001/\u0001/\u0001/\u0001/\u0003/\u0521\b/\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00030\u0535\b0\u00011\u00011\u0001"+
		"1\u00011\u00031\u053b\b1\u00011\u00011\u00031\u053f\b1\u00011\u00031\u0542"+
		"\b1\u00011\u00031\u0545\b1\u00011\u00031\u0548\b1\u00012\u00012\u0001"+
		"2\u00032\u054d\b2\u00013\u00013\u00014\u00014\u00014\u00014\u00015\u0001"+
		"5\u00015\u00015\u00015\u00015\u00015\u00016\u00016\u00016\u00016\u0001"+
		"6\u00016\u00016\u00016\u00017\u00017\u00017\u00017\u00037\u0568\b7\u0001"+
		"7\u00017\u00017\u00017\u00017\u00037\u056f\b7\u00017\u00017\u00037\u0573"+
		"\b7\u00017\u00017\u00017\u00017\u00018\u00018\u00018\u00019\u00019\u0001"+
		"9\u0001:\u0001:\u0001:\u0001;\u0001;\u0001;\u0003;\u0585\b;\u0001;\u0001"+
		";\u0001<\u0001<\u0003<\u058b\b<\u0001<\u0003<\u058e\b<\u0001<\u0001<\u0001"+
		"=\u0001=\u0003=\u0594\b=\u0001>\u0001>\u0001?\u0001?\u0001?\u0001?\u0001"+
		"?\u0001?\u0001?\u0001?\u0003?\u05a0\b?\u0001@\u0001@\u0001A\u0001A\u0001"+
		"A\u0001A\u0001A\u0005A\u05a9\bA\nA\fA\u05ac\tA\u0001A\u0003A\u05af\bA"+
		"\u0001A\u0003A\u05b2\bA\u0001A\u0003A\u05b5\bA\u0001A\u0003A\u05b8\bA"+
		"\u0001A\u0003A\u05bb\bA\u0001A\u0003A\u05be\bA\u0001A\u0001A\u0001A\u0001"+
		"A\u0001B\u0001B\u0001B\u0001B\u0001B\u0005B\u05c9\bB\nB\fB\u05cc\tB\u0001"+
		"B\u0003B\u05cf\bB\u0001B\u0003B\u05d2\bB\u0001B\u0003B\u05d5\bB\u0001"+
		"B\u0003B\u05d8\bB\u0001C\u0001C\u0001C\u0005C\u05dd\bC\nC\fC\u05e0\tC"+
		"\u0001C\u0003C\u05e3\bC\u0001C\u0003C\u05e6\bC\u0001C\u0003C\u05e9\bC"+
		"\u0001D\u0001D\u0003D\u05ed\bD\u0001D\u0003D\u05f0\bD\u0001D\u0003D\u05f3"+
		"\bD\u0001D\u0003D\u05f6\bD\u0001D\u0003D\u05f9\bD\u0001D\u0001D\u0001"+
		"D\u0001E\u0001E\u0001E\u0001E\u0001E\u0003E\u0603\bE\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0003E\u060a\bE\u0003E\u060c\bE\u0001F\u0001F\u0001F\u0001"+
		"F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001"+
		"F\u0001F\u0001F\u0001F\u0001F\u0003F\u0620\bF\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0003G\u063b\bG\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0003"+
		"H\u0643\bH\u0001H\u0003H\u0646\bH\u0001H\u0001H\u0001I\u0001I\u0001I\u0003"+
		"I\u064d\bI\u0001I\u0001I\u0001J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001"+
		"K\u0001K\u0001K\u0005K\u065a\bK\nK\fK\u065d\tK\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0005L\u0666\bL\nL\fL\u0669\tL\u0001L\u0001L\u0001"+
		"M\u0001M\u0001M\u0005M\u0670\bM\nM\fM\u0673\tM\u0001N\u0001N\u0001N\u0003"+
		"N\u0678\bN\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001"+
		"O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001"+
		"O\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u0692\bO\u0001P\u0003P\u0695"+
		"\bP\u0001P\u0003P\u0698\bP\u0001P\u0001P\u0001Q\u0001Q\u0001R\u0001R\u0001"+
		"S\u0001S\u0001T\u0001T\u0001T\u0001T\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0005U\u06ad\bU\nU\fU\u06b0\tU\u0001U\u0001U\u0003U\u06b4"+
		"\bU\u0001V\u0001V\u0003V\u06b8\bV\u0001W\u0001W\u0001W\u0001W\u0001W\u0001"+
		"W\u0003W\u06c0\bW\u0001X\u0001X\u0001X\u0001X\u0001X\u0001X\u0003X\u06c8"+
		"\bX\u0001X\u0001X\u0001X\u0003X\u06cd\bX\u0001X\u0003X\u06d0\bX\u0003"+
		"X\u06d2\bX\u0001Y\u0003Y\u06d5\bY\u0001Y\u0001Y\u0001Y\u0001Y\u0001Z\u0001"+
		"Z\u0001Z\u0003Z\u06de\bZ\u0001Z\u0003Z\u06e1\bZ\u0001[\u0003[\u06e4\b"+
		"[\u0001[\u0001[\u0003[\u06e8\b[\u0001[\u0003[\u06eb\b[\u0001[\u0001[\u0001"+
		"[\u0001[\u0005[\u06f1\b[\n[\f[\u06f4\t[\u0001[\u0001[\u0003[\u06f8\b["+
		"\u0001[\u0005[\u06fb\b[\n[\f[\u06fe\t[\u0001\\\u0001\\\u0001\\\u0001\\"+
		"\u0003\\\u0704\b\\\u0001]\u0001]\u0001]\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0003^\u070e\b^\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001"+
		"_\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0005`\u071e\b`\n`\f`\u0721"+
		"\t`\u0001`\u0001`\u0001a\u0001a\u0003a\u0727\ba\u0001b\u0001b\u0001b\u0001"+
		"b\u0001c\u0001c\u0001c\u0001c\u0003c\u0731\bc\u0001d\u0001d\u0001d\u0001"+
		"d\u0001d\u0001d\u0005d\u0739\bd\nd\fd\u073c\td\u0001d\u0001d\u0001d\u0001"+
		"d\u0003d\u0742\bd\u0001d\u0005d\u0745\bd\nd\fd\u0748\td\u0001d\u0001d"+
		"\u0001d\u0003d\u074d\bd\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0005"+
		"e\u0755\be\ne\fe\u0758\te\u0001e\u0001e\u0003e\u075c\be\u0001e\u0001e"+
		"\u0001e\u0001e\u0001e\u0003e\u0763\be\u0001e\u0005e\u0766\be\ne\fe\u0769"+
		"\te\u0001e\u0001e\u0001e\u0003e\u076e\be\u0001f\u0003f\u0771\bf\u0001"+
		"f\u0003f\u0774\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0001"+
		"f\u0001f\u0001f\u0001f\u0001f\u0001f\u0005f\u0783\bf\nf\ff\u0786\tf\u0001"+
		"f\u0001f\u0003f\u078a\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0001"+
		"f\u0003f\u0793\bf\u0001f\u0005f\u0796\bf\nf\ff\u0799\tf\u0001f\u0001f"+
		"\u0001f\u0003f\u079e\bf\u0001g\u0003g\u07a1\bg\u0001g\u0001g\u0001h\u0001"+
		"h\u0001h\u0003h\u07a8\bh\u0001h\u0003h\u07ab\bh\u0001i\u0001i\u0001i\u0001"+
		"i\u0001j\u0003j\u07b2\bj\u0001j\u0004j\u07b5\bj\u000bj\fj\u07b6\u0001"+
		"j\u0001j\u0003j\u07bb\bj\u0001k\u0001k\u0001k\u0003k\u07c0\bk\u0001l\u0001"+
		"l\u0001l\u0003l\u07c5\bl\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0005"+
		"m\u07cd\bm\nm\fm\u07d0\tm\u0001m\u0001m\u0001m\u0003m\u07d5\bm\u0001n"+
		"\u0001n\u0001n\u0001n\u0001n\u0001n\u0005n\u07dd\bn\nn\fn\u07e0\tn\u0001"+
		"n\u0001n\u0003n\u07e4\bn\u0001n\u0001n\u0001n\u0001n\u0001n\u0003n\u07eb"+
		"\bn\u0001n\u0001n\u0001n\u0001n\u0003n\u07f1\bn\u0001n\u0001n\u0003n\u07f5"+
		"\bn\u0001o\u0003o\u07f8\bo\u0001o\u0003o\u07fb\bo\u0001o\u0001o\u0001"+
		"o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001"+
		"o\u0005o\u080a\bo\no\fo\u080d\to\u0001o\u0001o\u0003o\u0811\bo\u0001o"+
		"\u0001o\u0001o\u0001o\u0001o\u0001o\u0003o\u0819\bo\u0001p\u0001p\u0001"+
		"p\u0001p\u0001q\u0001q\u0001q\u0001q\u0001q\u0001q\u0005q\u0825\bq\nq"+
		"\fq\u0828\tq\u0001q\u0001q\u0001r\u0001r\u0003r\u082e\br\u0001s\u0001"+
		"s\u0001s\u0001t\u0001t\u0001t\u0001t\u0001t\u0005t\u0838\bt\nt\ft\u083b"+
		"\tt\u0001t\u0001t\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001"+
		"u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0003u\u084f"+
		"\bu\u0001v\u0001v\u0001v\u0001v\u0001w\u0001w\u0001w\u0001x\u0001x\u0001"+
		"x\u0001x\u0001y\u0001y\u0001y\u0003y\u085f\by\u0001z\u0001z\u0001z\u0001"+
		"z\u0001{\u0001{\u0001{\u0003{\u0868\b{\u0001{\u0001{\u0001{\u0003{\u086d"+
		"\b{\u0001{\u0001{\u0003{\u0871\b{\u0001{\u0003{\u0874\b{\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0005|\u087c\b|\n|\f|\u087f\t|\u0001|\u0001"+
		"|\u0001}\u0001}\u0001}\u0001}\u0001}\u0005}\u0888\b}\n}\f}\u088b\t}\u0001"+
		"}\u0001}\u0001}\u0003}\u0890\b}\u0001}\u0001}\u0001~\u0001~\u0001~\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0003\u007f\u089f\b\u007f\u0001\u0080\u0001\u0080\u0003"+
		"\u0080\u08a3\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u08a8"+
		"\b\u0080\u0001\u0080\u0003\u0080\u08ab\b\u0080\u0001\u0080\u0001\u0080"+
		"\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081"+
		"\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u08b8\b\u0081\u0001\u0081"+
		"\u0001\u0081\u0003\u0081\u08bc\b\u0081\u0001\u0081\u0001\u0081\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0005\u0082"+
		"\u08c6\b\u0082\n\u0082\f\u0082\u08c9\t\u0082\u0001\u0082\u0001\u0082\u0003"+
		"\u0082\u08cd\b\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u08d1\b\u0082"+
		"\u0001\u0082\u0001\u0082\u0003\u0082\u08d5\b\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0083\u0001\u0083\u0003\u0083\u08db\b\u0083\u0001\u0083\u0003\u0083"+
		"\u08de\b\u0083\u0001\u0083\u0003\u0083\u08e1\b\u0083\u0001\u0084\u0001"+
		"\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0003"+
		"\u0085\u08fc\b\u0085\u0001\u0085\u0001\u0085\u0004\u0085\u0900\b\u0085"+
		"\u000b\u0085\f\u0085\u0901\u0001\u0085\u0001\u0085\u0003\u0085\u0906\b"+
		"\u0085\u0001\u0085\u0001\u0085\u0001\u0086\u0001\u0086\u0003\u0086\u090c"+
		"\b\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0005\u0087\u0916\b\u0087\n\u0087\f\u0087"+
		"\u0919\t\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0003\u0087\u0921\b\u0087\u0003\u0087\u0923\b\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0088\u0001\u0088\u0003\u0088\u0929\b\u0088\u0001"+
		"\u0088\u0001\u0088\u0003\u0088\u092d\b\u0088\u0001\u0088\u0003\u0088\u0930"+
		"\b\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u008a\u0001\u008a\u0003\u008a\u0939\b\u008a\u0001\u008a\u0001\u008a\u0001"+
		"\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001"+
		"\u008b\u0003\u008b\u0944\b\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0948"+
		"\b\u008b\u0001\u008b\u0003\u008b\u094b\b\u008b\u0001\u008c\u0001\u008c"+
		"\u0003\u008c\u094f\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0003\u008d\u0957\b\u008d\u0001\u008d\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008d"+
		"\u0960\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008f\u0001\u008f"+
		"\u0001\u008f\u0001\u008f\u0004\u008f\u0969\b\u008f\u000b\u008f\f\u008f"+
		"\u096a\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001"+
		"\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001"+
		"\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001"+
		"\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003"+
		"\u0091\u098a\b\u0091\u0001\u0092\u0001\u0092\u0003\u0092\u098e\b\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0001\u0093\u0003\u0093"+
		"\u0995\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0999\b\u0093\u0001"+
		"\u0094\u0001\u0094\u0003\u0094\u099d\b\u0094\u0001\u0094\u0001\u0094\u0003"+
		"\u0094\u09a1\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0096\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0005\u0096\u09ab\b\u0096\n"+
		"\u0096\f\u0096\u09ae\t\u0096\u0001\u0096\u0003\u0096\u09b1\b\u0096\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0001"+
		"\u0097\u0001\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0099\u0003"+
		"\u0099\u09bf\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003"+
		"\u0099\u09c5\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0003\u0099\u09cc\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0003"+
		"\u009a\u09d1\b\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001"+
		"\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a\u09db\b\u009a\u0001"+
		"\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a\u09e1\b\u009a\u0003"+
		"\u009a\u09e3\b\u009a\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u09ec\b\u009b\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0003\u009c\u09f6\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0003"+
		"\u009c\u09fb\b\u009c\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001"+
		"\u009d\u0001\u009e\u0001\u009e\u0001\u009f\u0001\u009f\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0a0a\b\u00a1\u0001\u00a2\u0001"+
		"\u00a2\u0003\u00a2\u0a0e\b\u00a2\u0001\u00a2\u0001\u00a2\u0003\u00a2\u0a12"+
		"\b\u00a2\u0001\u00a3\u0003\u00a3\u0a15\b\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0003\u00a3\u0a19\b\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4"+
		"\u0a1e\b\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4\u0a22\b\u00a4\u0001"+
		"\u00a5\u0001\u00a5\u0004\u00a5\u0a26\b\u00a5\u000b\u00a5\f\u00a5\u0a27"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0005\u00a6\u0a2e\b\u00a6"+
		"\n\u00a6\f\u00a6\u0a31\t\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001"+
		"\u00a7\u0003\u00a7\u0a37\b\u00a7\u0001\u00a7\u0004\u00a7\u0a3a\b\u00a7"+
		"\u000b\u00a7\f\u00a7\u0a3b\u0003\u00a7\u0a3e\b\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a8\u0003\u00a8\u0a43\b\u00a8\u0001\u00a8\u0004\u00a8\u0a46"+
		"\b\u00a8\u000b\u00a8\f\u00a8\u0a47\u0001\u00a8\u0001\u00a8\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0a50\b\u00a9\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0a57\b\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0a5b\b\u00aa\u0001\u00aa\u0003\u00aa"+
		"\u0a5e\b\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0003\u00ac\u0a6c\b\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ad"+
		"\u0001\u00ad\u0003\u00ad\u0a72\b\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0001\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u0a7a\b\u00af\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0005\u00b0"+
		"\u0a82\b\u00b0\n\u00b0\f\u00b0\u0a85\t\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0005\u00b0\u0a8d\b\u00b0\n"+
		"\u00b0\f\u00b0\u0a90\t\u00b0\u0003\u00b0\u0a92\b\u00b0\u0001\u00b1\u0001"+
		"\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0003\u00b1\u0a99\b\u00b1\u0001"+
		"\u00b1\u0003\u00b1\u0a9c\b\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0003\u00b2\u0aa3\b\u00b2\u0001\u00b3\u0001\u00b3\u0001"+
		"\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001"+
		"\u00b3\u0003\u00b3\u0aae\b\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001"+
		"\u00b3\u0003\u00b3\u0ab4\b\u00b3\u0001\u00b3\u0001\u00b3\u0003\u00b3\u0ab8"+
		"\b\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001"+
		"\u00b4\u0005\u00b4\u0ac0\b\u00b4\n\u00b4\f\u00b4\u0ac3\t\u00b4\u0003\u00b4"+
		"\u0ac5\b\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b5\u0001\u00b5\u0003\u00b5"+
		"\u0acb\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0ad6\b\u00b5"+
		"\u0003\u00b5\u0ad8\b\u00b5\u0003\u00b5\u0ada\b\u00b5\u0001\u00b5\u0003"+
		"\u00b5\u0add\b\u00b5\u0001\u00b6\u0001\u00b6\u0003\u00b6\u0ae1\b\u00b6"+
		"\u0001\u00b6\u0003\u00b6\u0ae4\b\u00b6\u0001\u00b7\u0001\u00b7\u0003\u00b7"+
		"\u0ae8\b\u00b7\u0001\u00b7\u0001\u00b7\u0003\u00b7\u0aec\b\u00b7\u0001"+
		"\u00b7\u0001\u00b7\u0001\u00b7\u0003\u00b7\u0af1\b\u00b7\u0001\u00b8\u0001"+
		"\u00b8\u0001\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0003\u00b9\u0afc\b\u00b9\u0001\u00b9\u0001\u00b9\u0003"+
		"\u00b9\u0b00\b\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0003\u00b9\u0b08\b\u00b9\u0001\u00ba\u0003\u00ba\u0b0b"+
		"\b\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0005\u00ba\u0b10\b\u00ba"+
		"\n\u00ba\f\u00ba\u0b13\t\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001"+
		"\u00bb\u0005\u00bb\u0b19\b\u00bb\n\u00bb\f\u00bb\u0b1c\t\u00bb\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0005\u00bc\u0b23\b\u00bc"+
		"\n\u00bc\f\u00bc\u0b26\t\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc\u0b2a"+
		"\b\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc\u0b30"+
		"\b\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc\u0b34\b\u00bc\u0001\u00bc"+
		"\u0003\u00bc\u0b37\b\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0b3f\b\u00bd\u0001\u00bd\u0003\u00bd"+
		"\u0b42\b\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0b46\b\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u0b4a\b\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0003\u00bd\u0b4f\b\u00bd\u0001\u00bd\u0003\u00bd\u0b52\b\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0b56\b\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0003\u00bd\u0b5a\b\u00bd\u0005\u00bd\u0b5c\b\u00bd\n\u00bd\f\u00bd\u0b5f"+
		"\t\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0005\u00be\u0b68\b\u00be\n\u00be\f\u00be\u0b6b\t\u00be"+
		"\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be"+
		"\u0001\u00be\u0001\u00bf\u0001\u00bf\u0005\u00bf\u0b76\b\u00bf\n\u00bf"+
		"\f\u00bf\u0b79\t\u00bf\u0001\u00c0\u0001\u00c0\u0003\u00c0\u0b7d\b\u00c0"+
		"\u0001\u00c0\u0001\u00c0\u0003\u00c0\u0b81\b\u00c0\u0001\u00c0\u0001\u00c0"+
		"\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0003\u00c1"+
		"\u0b8a\b\u00c1\u0001\u00c2\u0001\u00c2\u0003\u00c2\u0b8e\b\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0003\u00c2\u0b92\b\u00c2\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0005\u00c2\u0b98\b\u00c2\n\u00c2\f\u00c2\u0b9b\t\u00c2"+
		"\u0003\u00c2\u0b9d\b\u00c2\u0001\u00c2\u0003\u00c2\u0ba0\b\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0003\u00c2\u0ba4\b\u00c2\u0001\u00c2\u0003\u00c2\u0ba7"+
		"\b\u00c2\u0001\u00c2\u0003\u00c2\u0baa\b\u00c2\u0001\u00c2\u0003\u00c2"+
		"\u0bad\b\u00c2\u0001\u00c2\u0003\u00c2\u0bb0\b\u00c2\u0001\u00c2\u0003"+
		"\u00c2\u0bb3\b\u00c2\u0001\u00c2\u0003\u00c2\u0bb6\b\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0003\u00c2\u0bbb\b\u00c2\u0003\u00c2\u0bbd\b"+
		"\u00c2\u0001\u00c3\u0001\u00c3\u0003\u00c3\u0bc1\b\u00c3\u0001\u00c4\u0001"+
		"\u00c4\u0001\u00c4\u0003\u00c4\u0bc6\b\u00c4\u0001\u00c5\u0001\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003"+
		"\u00c5\u0bd0\b\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0005\u00c6\u0bd5"+
		"\b\u00c6\n\u00c6\f\u00c6\u0bd8\t\u00c6\u0001\u00c7\u0001\u00c7\u0005\u00c7"+
		"\u0bdc\b\u00c7\n\u00c7\f\u00c7\u0bdf\t\u00c7\u0001\u00c7\u0001\u00c7\u0003"+
		"\u00c7\u0be3\b\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0be8"+
		"\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0005\u00c8\u0bed\b\u00c8"+
		"\n\u00c8\f\u00c8\u0bf0\t\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003"+
		"\u00c8\u0bf5\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0bff\b\u00c8\u0003"+
		"\u00c8\u0c01\b\u00c8\u0001\u00c8\u0005\u00c8\u0c04\b\u00c8\n\u00c8\f\u00c8"+
		"\u0c07\t\u00c8\u0001\u00c8\u0003\u00c8\u0c0a\b\u00c8\u0001\u00c8\u0003"+
		"\u00c8\u0c0d\b\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0c11\b\u00c8"+
		"\u0001\u00c8\u0003\u00c8\u0c14\b\u00c8\u0003\u00c8\u0c16\b\u00c8\u0001"+
		"\u00c9\u0003\u00c9\u0c19\b\u00c9\u0001\u00c9\u0003\u00c9\u0c1c\b\u00c9"+
		"\u0001\u00c9\u0001\u00c9\u0003\u00c9\u0c20\b\u00c9\u0001\u00c9\u0001\u00c9"+
		"\u0001\u00c9\u0003\u00c9\u0c25\b\u00c9\u0001\u00c9\u0001\u00c9\u0005\u00c9"+
		"\u0c29\b\u00c9\n\u00c9\f\u00c9\u0c2c\t\u00c9\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0005"+
		"\u00cb\u0c36\b\u00cb\n\u00cb\f\u00cb\u0c39\t\u00cb\u0001\u00cb\u0001\u00cb"+
		"\u0001\u00cc\u0001\u00cc\u0003\u00cc\u0c3f\b\u00cc\u0001\u00cd\u0001\u00cd"+
		"\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd"+
		"\u0001\u00cd\u0001\u00cd\u0005\u00cd\u0c4b\b\u00cd\n\u00cd\f\u00cd\u0c4e"+
		"\t\u00cd\u0003\u00cd\u0c50\b\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce"+
		"\u0c5a\b\u00ce\u0001\u00cf\u0001\u00cf\u0003\u00cf\u0c5e\b\u00cf\u0001"+
		"\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf\u0c64\b\u00cf\n"+
		"\u00cf\f\u00cf\u0c67\t\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003"+
		"\u00d0\u0c72\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001"+
		"\u00d1\u0001\u00d1\u0005\u00d1\u0c7a\b\u00d1\n\u00d1\f\u00d1\u0c7d\t\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0003\u00d1\u0c81\b\u00d1\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u0c89\b\u00d2"+
		"\n\u00d2\f\u00d2\u0c8c\t\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005"+
		"\u00d2\u0c91\b\u00d2\n\u00d2\f\u00d2\u0c94\t\u00d2\u0003\u00d2\u0c96\b"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d3\u0001\u00d3\u0003\u00d3\u0c9c"+
		"\b\u00d3\u0001\u00d4\u0001\u00d4\u0003\u00d4\u0ca0\b\u00d4\u0001\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0003\u00d5\u0ca5\b\u00d5\u0001\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0005\u00d5\u0cad\b\u00d5"+
		"\n\u00d5\f\u00d5\u0cb0\t\u00d5\u0001\u00d5\u0001\u00d5\u0003\u00d5\u0cb4"+
		"\b\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d6\u0001"+
		"\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0005\u00d6\u0cbf\b\u00d6\n"+
		"\u00d6\f\u00d6\u0cc2\t\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0005\u00d7\u0ccb\b\u00d7\n"+
		"\u00d7\f\u00d7\u0cce\t\u00d7\u0001\u00d7\u0001\u00d7\u0003\u00d7\u0cd2"+
		"\b\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0005\u00d7\u0cda\b\u00d7\n\u00d7\f\u00d7\u0cdd\t\u00d7\u0001\u00d7"+
		"\u0001\u00d7\u0003\u00d7\u0ce1\b\u00d7\u0003\u00d7\u0ce3\b\u00d7\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u0ce8\b\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0003\u00d8\u0cec\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0003\u00d8\u0cf2\b\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u0cf6"+
		"\b\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00da\u0001"+
		"\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0005\u00da\u0d01\b\u00da\n"+
		"\u00da\f\u00da\u0d04\t\u00da\u0001\u00da\u0003\u00da\u0d07\b\u00da\u0001"+
		"\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0005"+
		"\u00da\u0d0f\b\u00da\n\u00da\f\u00da\u0d12\t\u00da\u0003\u00da\u0d14\b"+
		"\u00da\u0003\u00da\u0d16\b\u00da\u0001\u00db\u0001\u00db\u0001\u00db\u0003"+
		"\u00db\u0d1b\b\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0005\u00dc\u0d22\b\u00dc\n\u00dc\f\u00dc\u0d25\t\u00dc\u0001\u00dc"+
		"\u0001\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0005\u00dd\u0d2f\b\u00dd\n\u00dd\f\u00dd\u0d32\t\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00de\u0001\u00de\u0001\u00de\u0003\u00de\u0d39"+
		"\b\u00de\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00e0\u0001\u00e0\u0005"+
		"\u00e0\u0d40\b\u00e0\n\u00e0\f\u00e0\u0d43\t\u00e0\u0001\u00e0\u0003\u00e0"+
		"\u0d46\b\u00e0\u0001\u00e0\u0005\u00e0\u0d49\b\u00e0\n\u00e0\f\u00e0\u0d4c"+
		"\t\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u0d56\b\u00e1\u0003\u00e1\u0d58"+
		"\b\u00e1\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0005\u00e3\u0d66\b\u00e3\n\u00e3\f\u00e3\u0d69\t\u00e3\u0001\u00e4"+
		"\u0001\u00e4\u0003\u00e4\u0d6d\b\u00e4\u0001\u00e4\u0001\u00e4\u0005\u00e4"+
		"\u0d71\b\u00e4\n\u00e4\f\u00e4\u0d74\t\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e5\u0003\u00e5\u0d79\b\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001"+
		"\u00e6\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0005\u00e7\u0d89"+
		"\b\u00e7\n\u00e7\f\u00e7\u0d8c\t\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e8"+
		"\u0001\u00e8\u0003\u00e8\u0d92\b\u00e8\u0001\u00e9\u0003\u00e9\u0d95\b"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0005\u00e9\u0d9b"+
		"\b\u00e9\n\u00e9\f\u00e9\u0d9e\t\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00ea"+
		"\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0003\u00ea\u0da6\b\u00ea\u0003\u00ea"+
		"\u0da8\b\u00ea\u0001\u00ea\u0001\u00ea\u0003\u00ea\u0dac\b\u00ea\u0001"+
		"\u00ea\u0003\u00ea\u0daf\b\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0003"+
		"\u00eb\u0db4\b\u00eb\u0003\u00eb\u0db6\b\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0003\u00eb\u0dba\b\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00ec"+
		"\u0001\u00ec\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0003\u00ed\u0dc6\b\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ef\u0001\u00ef\u0003\u00ef\u0dcf\b\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0005\u00ef\u0dd5\b\u00ef\n\u00ef"+
		"\f\u00ef\u0dd8\t\u00ef\u0001\u00f0\u0001\u00f0\u0003\u00f0\u0ddc\b\u00f0"+
		"\u0001\u00f0\u0001\u00f0\u0003\u00f0\u0de0\b\u00f0\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0003\u00f1\u0de5\b\u00f1\u0001\u00f1\u0003\u00f1\u0de8\b"+
		"\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0005\u00f2\u0dee"+
		"\b\u00f2\n\u00f2\f\u00f2\u0df1\t\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0003\u00f3\u0df8\b\u00f3\u0001\u00f4\u0001\u00f4"+
		"\u0001\u00f4\u0001\u00f4\u0003\u00f4\u0dfe\b\u00f4\u0001\u00f4\u0003\u00f4"+
		"\u0e01\b\u00f4\u0001\u00f4\u0003\u00f4\u0e04\b\u00f4\u0001\u00f5\u0001"+
		"\u00f5\u0001\u00f5\u0001\u00f5\u0005\u00f5\u0e0a\b\u00f5\n\u00f5\f\u00f5"+
		"\u0e0d\t\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f5\u0003\u00f5\u0e16\b\u00f5\u0001\u00f6\u0001\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6"+
		"\u0005\u00f6\u0e20\b\u00f6\n\u00f6\f\u00f6\u0e23\t\u00f6\u0001\u00f6\u0001"+
		"\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u0e29\b\u00f6\u0001\u00f7\u0001"+
		"\u00f7\u0003\u00f7\u0e2d\b\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u0e31"+
		"\b\u00f7\u0001\u00f7\u0003\u00f7\u0e34\b\u00f7\u0001\u00f7\u0003\u00f7"+
		"\u0e37\b\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0003\u00f8\u0e3c\b"+
		"\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u0e41\b\u00f9\u0001"+
		"\u00f9\u0003\u00f9\u0e44\b\u00f9\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001"+
		"\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fb\u0001\u00fb\u0003"+
		"\u00fb\u0e4f\b\u00fb\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u0e54"+
		"\b\u00fc\u0001\u00fc\u0003\u00fc\u0e57\b\u00fc\u0001\u00fc\u0003\u00fc"+
		"\u0e5a\b\u00fc\u0001\u00fd\u0001\u00fd\u0004\u00fd\u0e5e\b\u00fd\u000b"+
		"\u00fd\f\u00fd\u0e5f\u0001\u00fd\u0003\u00fd\u0e63\b\u00fd\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fe\u0001\u00fe\u0003\u00fe\u0e69\b\u00fe\u0001\u00fe"+
		"\u0003\u00fe\u0e6c\b\u00fe\u0001\u00ff\u0003\u00ff\u0e6f\b\u00ff\u0001"+
		"\u00ff\u0004\u00ff\u0e72\b\u00ff\u000b\u00ff\f\u00ff\u0e73\u0001\u00ff"+
		"\u0003\u00ff\u0e77\b\u00ff\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0004\u0100\u0e7d\b\u0100\u000b\u0100\f\u0100\u0e7e\u0001\u0101\u0001"+
		"\u0101\u0004\u0101\u0e83\b\u0101\u000b\u0101\f\u0101\u0e84\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0005\u0102"+
		"\u0e8d\b\u0102\n\u0102\f\u0102\u0e90\t\u0102\u0001\u0102\u0001\u0102\u0003"+
		"\u0102\u0e94\b\u0102\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0104\u0001"+
		"\u0104\u0001\u0104\u0001\u0104\u0003\u0104\u0e9d\b\u0104\u0001\u0104\u0001"+
		"\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001"+
		"\u0104\u0003\u0104\u0ea7\b\u0104\u0001\u0104\u0001\u0104\u0003\u0104\u0eab"+
		"\b\u0104\u0003\u0104\u0ead\b\u0104\u0001\u0104\u0003\u0104\u0eb0\b\u0104"+
		"\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105"+
		"\u0001\u0105\u0001\u0105\u0005\u0105\u0eba\b\u0105\n\u0105\f\u0105\u0ebd"+
		"\t\u0105\u0001\u0105\u0003\u0105\u0ec0\b\u0105\u0001\u0105\u0003\u0105"+
		"\u0ec3\b\u0105\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0107"+
		"\u0001\u0107\u0001\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0005\u0108"+
		"\u0ed5\b\u0108\n\u0108\f\u0108\u0ed8\t\u0108\u0001\u0108\u0001\u0108\u0003"+
		"\u0108\u0edc\b\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0003\u0108\u0ee1"+
		"\b\u0108\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0003"+
		"\u0109\u0ee8\b\u0109\u0001\u0109\u0003\u0109\u0eeb\b\u0109\u0001\u010a"+
		"\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0005\u010a\u0ef2\b\u010a"+
		"\n\u010a\f\u010a\u0ef5\t\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0003\u010a\u0efb\b\u010a\u0001\u010b\u0001\u010b\u0001\u010b\u0003"+
		"\u010b\u0f00\b\u010b\u0001\u010c\u0001\u010c\u0003\u010c\u0f04\b\u010c"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0003\u010d\u0f0c\b\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0003\u010d\u0f12\b\u010d\u0001\u010e\u0001\u010e\u0001\u010e\u0001\u010e"+
		"\u0001\u010e\u0001\u010e\u0003\u010e\u0f1a\b\u010e\u0001\u010e\u0003\u010e"+
		"\u0f1d\b\u010e\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0005\u010f"+
		"\u0f23\b\u010f\n\u010f\f\u010f\u0f26\t\u010f\u0001\u010f\u0001\u010f\u0001"+
		"\u0110\u0001\u0110\u0001\u0110\u0003\u0110\u0f2d\b\u0110\u0001\u0110\u0003"+
		"\u0110\u0f30\b\u0110\u0001\u0110\u0003\u0110\u0f33\b\u0110\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112"+
		"\u0003\u0112\u0f3c\b\u0112\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113"+
		"\u0003\u0113\u0f42\b\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113"+
		"\u0003\u0113\u0f48\b\u0113\u0003\u0113\u0f4a\b\u0113\u0001\u0113\u0001"+
		"\u0113\u0003\u0113\u0f4e\b\u0113\u0003\u0113\u0f50\b\u0113\u0001\u0114"+
		"\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114"+
		"\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0003\u0114\u0f5d\b\u0114"+
		"\u0003\u0114\u0f5f\b\u0114\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115"+
		"\u0001\u0115\u0001\u0115\u0001\u0115\u0003\u0115\u0f68\b\u0115\u0003\u0115"+
		"\u0f6a\b\u0115\u0001\u0116\u0001\u0116\u0003\u0116\u0f6e\b\u0116\u0001"+
		"\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0003\u0116\u0f74\b\u0116\u0001"+
		"\u0116\u0001\u0116\u0003\u0116\u0f78\b\u0116\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0118\u0001\u0118\u0001\u0118\u0001"+
		"\u0118\u0001\u0118\u0001\u0119\u0001\u0119\u0003\u0119\u0f86\b\u0119\u0001"+
		"\u0119\u0001\u0119\u0005\u0119\u0f8a\b\u0119\n\u0119\f\u0119\u0f8d\t\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u011a\u0001\u011a\u0001\u011b\u0001\u011b"+
		"\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c"+
		"\u0001\u011c\u0001\u011c\u0003\u011c\u0f9d\b\u011c\u0001\u011c\u0001\u011c"+
		"\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0005\u011c\u0fa5\b\u011c"+
		"\n\u011c\f\u011c\u0fa8\t\u011c\u0001\u011d\u0001\u011d\u0001\u011d\u0001"+
		"\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u0fb0\b\u011d\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0003\u011e\u0fb5\b\u011e\u0001\u011e\u0001\u011e\u0003"+
		"\u011e\u0fb9\b\u011e\u0001\u011f\u0001\u011f\u0001\u0120\u0001\u0120\u0003"+
		"\u0120\u0fbf\b\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0001"+
		"\u0120\u0001\u0121\u0001\u0121\u0003\u0121\u0fc8\b\u0121\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0003\u0121\u0fcd\b\u0121\u0001\u0122\u0003\u0122\u0fd0"+
		"\b\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001"+
		"\u0123\u0001\u0123\u0003\u0123\u0fd9\b\u0123\u0001\u0123\u0001\u0123\u0001"+
		"\u0123\u0001\u0123\u0003\u0123\u0fdf\b\u0123\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0003\u0124\u0fe4\b\u0124\u0001\u0124\u0001\u0124\u0001\u0125\u0001"+
		"\u0125\u0001\u0125\u0005\u0125\u0feb\b\u0125\n\u0125\f\u0125\u0fee\t\u0125"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0003\u0126\u1003\b\u0126\u0001\u0126\u0003\u0126\u1006\b"+
		"\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0005\u0126\u100c"+
		"\b\u0126\n\u0126\f\u0126\u100f\t\u0126\u0001\u0127\u0001\u0127\u0001\u0128"+
		"\u0001\u0128\u0001\u0129\u0001\u0129\u0003\u0129\u1017\b\u0129\u0001\u012a"+
		"\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a"+
		"\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0005\u012a\u1024\b\u012a"+
		"\n\u012a\f\u012a\u1027\t\u012a\u0001\u012a\u0001\u012a\u0003\u012a\u102b"+
		"\b\u012a\u0001\u012a\u0001\u012a\u0001\u012b\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0005\u012b\u1039\b\u012b\n\u012b\f\u012b\u103c\t\u012b\u0001\u012b"+
		"\u0001\u012b\u0003\u012b\u1040\b\u012b\u0001\u012b\u0001\u012b\u0001\u012c"+
		"\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0005\u012c\u1049\b\u012c"+
		"\n\u012c\f\u012c\u104c\t\u012c\u0001\u012c\u0001\u012c\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0003"+
		"\u012d\u105d\b\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u1067\b\u012d\u0001"+
		"\u012d\u0003\u012d\u106a\b\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u106e"+
		"\b\u012d\u0001\u012e\u0001\u012e\u0001\u012f\u0001\u012f\u0003\u012f\u1074"+
		"\b\u012f\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0003\u0130\u107a"+
		"\b\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0003\u0130\u1080"+
		"\b\u0130\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0005\u0131\u1086"+
		"\b\u0131\n\u0131\f\u0131\u1089\t\u0131\u0001\u0131\u0003\u0131\u108c\b"+
		"\u0131\u0001\u0132\u0001\u0132\u0003\u0132\u1090\b\u0132\u0001\u0132\u0001"+
		"\u0132\u0001\u0132\u0001\u0132\u0001\u0132\u0003\u0132\u1097\b\u0132\u0001"+
		"\u0133\u0001\u0133\u0001\u0133\u0005\u0133\u109c\b\u0133\n\u0133\f\u0133"+
		"\u109f\t\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u10a4\b"+
		"\u0134\u0001\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u10a9\b\u0135\u0001"+
		"\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u10b4\b\u0135\u0001\u0135\u0001"+
		"\u0135\u0003\u0135\u10b8\b\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0005"+
		"\u0135\u10bd\b\u0135\n\u0135\f\u0135\u10c0\t\u0135\u0001\u0135\u0001\u0135"+
		"\u0003\u0135\u10c4\b\u0135\u0005\u0135\u10c6\b\u0135\n\u0135\f\u0135\u10c9"+
		"\t\u0135\u0001\u0136\u0001\u0136\u0001\u0136\u0003\u0136\u10ce\b\u0136"+
		"\u0001\u0136\u0001\u0136\u0003\u0136\u10d2\b\u0136\u0001\u0137\u0001\u0137"+
		"\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0005\u0138\u10da\b\u0138"+
		"\n\u0138\f\u0138\u10dd\t\u0138\u0001\u0139\u0001\u0139\u0001\u0139\u0001"+
		"\u0139\u0001\u0139\u0001\u0139\u0003\u0139\u10e5\b\u0139\u0001\u013a\u0001"+
		"\u013a\u0003\u013a\u10e9\b\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001"+
		"\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0003\u013a\u10f2\b\u013a\u0003"+
		"\u013a\u10f4\b\u013a\u0003\u013a\u10f6\b\u013a\u0001\u013b\u0001\u013b"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013d\u0001\u013d\u0001\u013d"+
		"\u0001\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0005\u013d"+
		"\u1105\b\u013d\n\u013d\f\u013d\u1108\t\u013d\u0001\u013d\u0001\u013d\u0001"+
		"\u013d\u0001\u013d\u0001\u013d\u0003\u013d\u110f\b\u013d\u0001\u013e\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0001\u013f\u0001\u013f\u0001\u013f\u0001"+
		"\u013f\u0005\u013f\u1119\b\u013f\n\u013f\f\u013f\u111c\t\u013f\u0001\u0140"+
		"\u0001\u0140\u0001\u0141\u0001\u0141\u0001\u0141\u0005\u0141\u1123\b\u0141"+
		"\n\u0141\f\u0141\u1126\t\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0005"+
		"\u0142\u112b\b\u0142\n\u0142\f\u0142\u112e\t\u0142\u0001\u0143\u0001\u0143"+
		"\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0003\u0143\u1136\b\u0143"+
		"\u0001\u0143\u0003\u0143\u1139\b\u0143\u0001\u0144\u0001\u0144\u0001\u0144"+
		"\u0001\u0144\u0001\u0144\u0003\u0144\u1140\b\u0144\u0001\u0144\u0001\u0144"+
		"\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0003\u0144\u1148\b\u0144"+
		"\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0003\u0144"+
		"\u114f\b\u0144\u0001\u0144\u0001\u0144\u0003\u0144\u1153\b\u0144\u0001"+
		"\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u115a"+
		"\b\u0145\u0001\u0146\u0001\u0146\u0003\u0146\u115e\b\u0146\u0001\u0146"+
		"\u0001\u0146\u0001\u0146\u0003\u0146\u1163\b\u0146\u0005\u0146\u1165\b"+
		"\u0146\n\u0146\f\u0146\u1168\t\u0146\u0001\u0146\u0001\u0146\u0001\u0146"+
		"\u0005\u0146\u116d\b\u0146\n\u0146\f\u0146\u1170\t\u0146\u0001\u0146\u0003"+
		"\u0146\u1173\b\u0146\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0003\u0147\u117a\b\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0003\u0147\u1183\b\u0147\u0001"+
		"\u0148\u0001\u0148\u0001\u0148\u0001\u0149\u0001\u0149\u0001\u014a\u0001"+
		"\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0005\u014a\u118f\b\u014a\n"+
		"\u014a\f\u014a\u1192\t\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001"+
		"\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0005\u014a\u119c"+
		"\b\u014a\n\u014a\f\u014a\u119f\t\u014a\u0001\u014a\u0001\u014a\u0003\u014a"+
		"\u11a3\b\u014a\u0001\u014a\u0001\u014a\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b\u11b9\b\u014b\u0001\u014c"+
		"\u0001\u014c\u0003\u014c\u11bd\b\u014c\u0001\u014d\u0003\u014d\u11c0\b"+
		"\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0004\u014d\u11c5\b\u014d\u000b"+
		"\u014d\f\u014d\u11c6\u0001\u014d\u0003\u014d\u11ca\b\u014d\u0001\u014d"+
		"\u0001\u014d\u0003\u014d\u11ce\b\u014d\u0001\u014d\u0003\u014d\u11d1\b"+
		"\u014d\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003"+
		"\u014e\u11d8\b\u014e\u0001\u014f\u0003\u014f\u11db\b\u014f\u0001\u014f"+
		"\u0001\u014f\u0004\u014f\u11df\b\u014f\u000b\u014f\f\u014f\u11e0\u0001"+
		"\u014f\u0003\u014f\u11e4\b\u014f\u0001\u014f\u0001\u014f\u0003\u014f\u11e8"+
		"\b\u014f\u0001\u014f\u0003\u014f\u11eb\b\u014f\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u11f2\b\u0150\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0003\u0151\u11f7\b\u0151\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0001\u0152\u0005\u0152\u1203\b\u0152\n\u0152\f\u0152\u1206"+
		"\t\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0003\u0152\u120b\b\u0152"+
		"\u0003\u0152\u120d\b\u0152\u0001\u0153\u0001\u0153\u0003\u0153\u1211\b"+
		"\u0153\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0005\u0154\u1217"+
		"\b\u0154\n\u0154\f\u0154\u121a\t\u0154\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0003\u0155\u1225\b\u0155\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156"+
		"\u122a\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u122f\b"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u1235"+
		"\b\u0156\u0001\u0156\u0003\u0156\u1238\b\u0156\u0001\u0156\u0001\u0156"+
		"\u0003\u0156\u123c\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156"+
		"\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u1246\b\u0156"+
		"\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156"+
		"\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156"+
		"\u0001\u0156\u0001\u0156\u0003\u0156\u1256\b\u0156\u0001\u0156\u0001\u0156"+
		"\u0003\u0156\u125a\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156"+
		"\u0001\u0156\u0004\u0156\u1261\b\u0156\u000b\u0156\f\u0156\u1262\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u1269\b\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003"+
		"\u0156\u1277\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0005\u0156\u1280\b\u0156\n\u0156\f\u0156"+
		"\u1283\t\u0156\u0001\u0156\u0003\u0156\u1286\b\u0156\u0001\u0156\u0003"+
		"\u0156\u1289\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u1292\b\u0156\u0001\u0156\u0001"+
		"\u0156\u0005\u0156\u1296\b\u0156\n\u0156\f\u0156\u1299\t\u0156\u0001\u0156"+
		"\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156"+
		"\u0003\u0156\u12a2\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156"+
		"\u0001\u0156\u0001\u0156\u0003\u0156\u12aa\b\u0156\u0001\u0156\u0003\u0156"+
		"\u12ad\b\u0156\u0001\u0156\u0003\u0156\u12b0\b\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003"+
		"\u0156\u12b9\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u12be"+
		"\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0005"+
		"\u0156\u12c5\b\u0156\n\u0156\f\u0156\u12c8\t\u0156\u0001\u0156\u0001\u0156"+
		"\u0001\u0156\u0003\u0156\u12cd\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156"+
		"\u0003\u0156\u12d2\b\u0156\u0001\u0156\u0003\u0156\u12d5\b\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u12da\b\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0003\u0156\u12df\b\u0156\u0005\u0156\u12e1\b\u0156"+
		"\n\u0156\f\u0156\u12e4\t\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003"+
		"\u0156\u12e9\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003"+
		"\u0156\u12ef\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u12f8\b\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0003\u0156\u12fd\b\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u1305\b\u0156\u0001"+
		"\u0156\u0001\u0156\u0003\u0156\u1309\b\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0003\u0156\u130e\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0003\u0156\u1314\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0003\u0156\u131b\b\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0003\u0156\u1320\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0003\u0156\u1327\b\u0156\u0001\u0156\u0001\u0156\u0003"+
		"\u0156\u132b\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u1330"+
		"\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0003\u0156\u1338\b\u0156\u0001\u0156\u0003\u0156\u133b\b\u0156"+
		"\u0001\u0156\u0003\u0156\u133e\b\u0156\u0001\u0156\u0003\u0156\u1341\b"+
		"\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u1345\b\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0003\u0156\u134a\b\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0003\u0156\u134f\b\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u1353"+
		"\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003"+
		"\u0156\u135a\b\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0003\u0156\u135f"+
		"\b\u0156\u0003\u0156\u1361\b\u0156\u0001\u0157\u0001\u0157\u0001\u0158"+
		"\u0001\u0158\u0001\u0159\u0001\u0159\u0001\u015a\u0001\u015a\u0001\u015a"+
		"\u0003\u015a\u136c\b\u015a\u0001\u015a\u0001\u015a\u0003\u015a\u1370\b"+
		"\u015a\u0003\u015a\u1372\b\u015a\u0001\u015a\u0001\u015a\u0001\u015b\u0001"+
		"\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0003"+
		"\u015b\u137d\b\u015b\u0001\u015c\u0001\u015c\u0001\u015d\u0001\u015d\u0001"+
		"\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u1388"+
		"\b\u015d\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0005"+
		"\u015e\u138f\b\u015e\n\u015e\f\u015e\u1392\t\u015e\u0003\u015e\u1394\b"+
		"\u015e\u0001\u015f\u0001\u015f\u0003\u015f\u1398\b\u015f\u0001\u015f\u0003"+
		"\u015f\u139b\b\u015f\u0001\u015f\u0001\u015f\u0003\u015f\u139f\b\u015f"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0161\u0001\u0161"+
		"\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0003\u0161"+
		"\u13ac\b\u0161\u0001\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u13b1\b"+
		"\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0005\u0162\u13b7"+
		"\b\u0162\n\u0162\f\u0162\u13ba\t\u0162\u0001\u0162\u0001\u0162\u0001\u0162"+
		"\u0001\u0162\u0003\u0162\u13c0\b\u0162\u0001\u0163\u0001\u0163\u0001\u0163"+
		"\u0003\u0163\u13c5\b\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u13c9\b"+
		"\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u13ce\b\u0163\u0001"+
		"\u0164\u0001\u0164\u0001\u0164\u0003\u0164\u13d3\b\u0164\u0001\u0164\u0003"+
		"\u0164\u13d6\b\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0005\u0164\u13db"+
		"\b\u0164\n\u0164\f\u0164\u13de\t\u0164\u0001\u0164\u0001\u0164\u0001\u0165"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0003\u0165\u13e7\b\u0165"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0005\u0165\u13ed\b\u0165"+
		"\n\u0165\f\u0165\u13f0\t\u0165\u0001\u0165\u0003\u0165\u13f3\b\u0165\u0001"+
		"\u0165\u0001\u0165\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001"+
		"\u0166\u0001\u0166\u0003\u0166\u13fd\b\u0166\u0001\u0166\u0003\u0166\u1400"+
		"\b\u0166\u0003\u0166\u1402\b\u0166\u0001\u0167\u0001\u0167\u0001\u0167"+
		"\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0003\u0168"+
		"\u140c\b\u0168\u0003\u0168\u140e\b\u0168\u0001\u0169\u0001\u0169\u0001"+
		"\u0169\u0001\u0169\u0003\u0169\u1414\b\u0169\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0003\u016a\u141a\b\u016a\u0003\u016a\u141c\b\u016a"+
		"\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016c\u0001\u016c\u0001\u016c"+
		"\u0001\u016d\u0001\u016d\u0001\u016d\u0001\u016d\u0001\u016d\u0001\u016d"+
		"\u0003\u016d\u142a\b\u016d\u0003\u016d\u142c\b\u016d\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0003\u016e\u1433\b\u016e\u0001"+
		"\u016e\u0003\u016e\u1436\b\u016e\u0001\u016f\u0001\u016f\u0001\u016f\u0001"+
		"\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0003\u016f\u143f\b\u016f\u0001"+
		"\u0170\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170\u0001"+
		"\u0170\u0003\u0170\u1448\b\u0170\u0001\u0171\u0001\u0171\u0001\u0172\u0001"+
		"\u0172\u0001\u0173\u0001\u0173\u0003\u0173\u1450\b\u0173\u0001\u0173\u0001"+
		"\u0173\u0001\u0174\u0003\u0174\u1455\b\u0174\u0001\u0174\u0001\u0174\u0003"+
		"\u0174\u1459\b\u0174\u0001\u0174\u0003\u0174\u145c\b\u0174\u0001\u0175"+
		"\u0001\u0175\u0003\u0175\u1460\b\u0175\u0001\u0176\u0001\u0176\u0001\u0177"+
		"\u0001\u0177\u0001\u0177\u0003\u0177\u1467\b\u0177\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179"+
		"\u0005\u0179\u1471\b\u0179\n\u0179\f\u0179\u1474\t\u0179\u0001\u0179\u0001"+
		"\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0005\u0179\u147c"+
		"\b\u0179\n\u0179\f\u0179\u147f\t\u0179\u0003\u0179\u1481\b\u0179\u0001"+
		"\u017a\u0001\u017a\u0003\u017a\u1485\b\u017a\u0001\u017b\u0001\u017b\u0001"+
		"\u017c\u0001\u017c\u0001\u017d\u0001\u017d\u0001\u017e\u0001\u017e\u0001"+
		"\u017f\u0001\u017f\u0001\u0180\u0001\u0180\u0001\u0181\u0001\u0181\u0001"+
		"\u0181\u0005\u0181\u1496\b\u0181\n\u0181\f\u0181\u1499\t\u0181\u0001\u0181"+
		"\u0001\u0181\u0003\u0181\u149d\b\u0181\u0001\u0182\u0001\u0182\u0001\u0183"+
		"\u0001\u0183\u0001\u0183\u0003\u0183\u14a4\b\u0183\u0001\u0184\u0001\u0184"+
		"\u0001\u0185\u0001\u0185\u0001\u0186\u0001\u0186\u0001\u0186\u0005\u0186"+
		"\u14ad\b\u0186\n\u0186\f\u0186\u14b0\t\u0186\u0001\u0187\u0001\u0187\u0001"+
		"\u0188\u0001\u0188\u0001\u0188\u0005\u0188\u14b7\b\u0188\n\u0188\f\u0188"+
		"\u14ba\t\u0188\u0001\u0188\u0001\u0188\u0003\u0188\u14be\b\u0188\u0001"+
		"\u0189\u0001\u0189\u0001\u018a\u0001\u018a\u0001\u018a\u0005\u018a\u14c5"+
		"\b\u018a\n\u018a\f\u018a\u14c8\t\u018a\u0001\u018b\u0001\u018b\u0001\u018b"+
		"\u0005\u018b\u14cd\b\u018b\n\u018b\f\u018b\u14d0\t\u018b\u0001\u018c\u0001"+
		"\u018c\u0001\u018c\u0005\u018c\u14d5\b\u018c\n\u018c\f\u018c\u14d8\t\u018c"+
		"\u0001\u018d\u0001\u018d\u0001\u018d\u0003\u018d\u14dd\b\u018d\u0001\u018e"+
		"\u0001\u018e\u0001\u018e\u0003\u018e\u14e2\b\u018e\u0001\u018e\u0001\u018e"+
		"\u0001\u018f\u0001\u018f\u0001\u018f\u0003\u018f\u14e9\b\u018f\u0001\u0190"+
		"\u0001\u0190\u0003\u0190\u14ed\b\u0190\u0001\u0190\u0001\u0190\u0001\u0190"+
		"\u0003\u0190\u14f2\b\u0190\u0001\u0190\u0003\u0190\u14f5\b\u0190\u0001"+
		"\u0191\u0001\u0191\u0001\u0192\u0001\u0192\u0003\u0192\u14fb\b\u0192\u0001"+
		"\u0193\u0001\u0193\u0003\u0193\u14ff\b\u0193\u0001\u0194\u0001\u0194\u0001"+
		"\u0194\u0003\u0194\u1504\b\u0194\u0001\u0195\u0001\u0195\u0001\u0196\u0001"+
		"\u0196\u0001\u0196\u0005\u0196\u150b\b\u0196\n\u0196\f\u0196\u150e\t\u0196"+
		"\u0001\u0197\u0001\u0197\u0001\u0197\u0003\u0197\u1513\b\u0197\u0001\u0197"+
		"\u0001\u0197\u0001\u0197\u0003\u0197\u1518\b\u0197\u0001\u0198\u0001\u0198"+
		"\u0001\u0198\u0005\u0198\u151d\b\u0198\n\u0198\f\u0198\u1520\t\u0198\u0001"+
		"\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001"+
		"\u0199\u0003\u0199\u1529\b\u0199\u0001\u019a\u0001\u019a\u0003\u019a\u152d"+
		"\b\u019a\u0001\u019a\u0001\u019a\u0005\u019a\u1531\b\u019a\n\u019a\f\u019a"+
		"\u1534\t\u019a\u0001\u019a\u0001\u019a\u0003\u019a\u1538\b\u019a\u0001"+
		"\u019b\u0001\u019b\u0001\u019b\u0003\u019b\u153d\b\u019b\u0003\u019b\u153f"+
		"\b\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0003\u019b\u1544\b\u019b"+
		"\u0005\u019b\u1546\b\u019b\n\u019b\f\u019b\u1549\t\u019b\u0001\u019b\u0001"+
		"\u019b\u0003\u019b\u154d\b\u019b\u0001\u019c\u0001\u019c\u0001\u019c\u0001"+
		"\u019c\u0001\u019c\u0003\u019c\u1554\b\u019c\u0001\u019c\u0001\u019c\u0001"+
		"\u019c\u0003\u019c\u1559\b\u019c\u0003\u019c\u155b\b\u019c\u0003\u019c"+
		"\u155d\b\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019c"+
		"\u0001\u019c\u0001\u019c\u0001\u019c\u0003\u019c\u1567\b\u019c\u0001\u019c"+
		"\u0001\u019c\u0001\u019c\u0003\u019c\u156c\b\u019c\u0005\u019c\u156e\b"+
		"\u019c\n\u019c\f\u019c\u1571\t\u019c\u0003\u019c\u1573\b\u019c\u0001\u019c"+
		"\u0001\u019c\u0003\u019c\u1577\b\u019c\u0001\u019d\u0001\u019d\u0001\u019d"+
		"\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0003\u019e\u1580\b\u019e"+
		"\u0001\u019e\u0001\u019e\u0003\u019e\u1584\b\u019e\u0001\u019f\u0001\u019f"+
		"\u0003\u019f\u1588\b\u019f\u0001\u019f\u0001\u019f\u0003\u019f\u158c\b"+
		"\u019f\u0003\u019f\u158e\b\u019f\u0001\u01a0\u0001\u01a0\u0003\u01a0\u1592"+
		"\b\u01a0\u0001\u01a0\u0001\u01a0\u0003\u01a0\u1596\b\u01a0\u0001\u01a0"+
		"\u0001\u01a0\u0003\u01a0\u159a\b\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0"+
		"\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0003\u01a0\u15a2\b\u01a0\u0001\u01a0"+
		"\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0003\u01a0"+
		"\u15aa\b\u01a0\u0003\u01a0\u15ac\b\u01a0\u0001\u01a1\u0001\u01a1\u0001"+
		"\u01a1\u0001\u01a1\u0003\u01a1\u15b2\b\u01a1\u0001\u01a1\u0003\u01a1\u15b5"+
		"\b\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0003\u01a2\u15cf\b\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0003\u01a2\u15d6\b\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0003\u01a2\u15f7"+
		"\b\u01a2\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3\u15fc\b\u01a3"+
		"\u0001\u01a3\u0003\u01a3\u15ff\b\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0003\u01a3\u1604\b\u01a3\u0003\u01a3\u1606\b\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0005\u01a3\u160a\b\u01a3\n\u01a3\f\u01a3\u160d\t\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3\u1613\b\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3\u1619\b\u01a3\u0001\u01a4"+
		"\u0001\u01a4\u0001\u01a4\u0001\u01a5\u0001\u01a5\u0001\u01a6\u0001\u01a6"+
		"\u0001\u01a6\u0001\u01a7\u0001\u01a7\u0001\u01a8\u0001\u01a8\u0001\u01a8"+
		"\u0005\u01a8\u1628\b\u01a8\n\u01a8\f\u01a8\u162b\t\u01a8\u0001\u01a9\u0001"+
		"\u01a9\u0003\u01a9\u162f\b\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0005"+
		"\u01a9\u1634\b\u01a9\n\u01a9\f\u01a9\u1637\t\u01a9\u0001\u01a9\u0003\u01a9"+
		"\u163a\b\u01a9\u0001\u01aa\u0001\u01aa\u0003\u01aa\u163e\b\u01aa\u0001"+
		"\u01aa\u0001\u01aa\u0001\u01aa\u0005\u01aa\u1643\b\u01aa\n\u01aa\f\u01aa"+
		"\u1646\t\u01aa\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u164b\b"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u1651"+
		"\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u1657"+
		"\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u165d"+
		"\b\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u1662\b\u01ab"+
		"\u0003\u01ab\u1664\b\u01ab\u0001\u01ab\u0003\u01ab\u1667\b\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0003\u01ab\u1671\b\u01ab\u0001\u01ab\u0003\u01ab\u1674"+
		"\b\u01ab\u0003\u01ab\u1676\b\u01ab\u0003\u01ab\u1678\b\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab"+
		"\u1686\b\u01ab\u0001\u01ac\u0001\u01ac\u0001\u01ad\u0001\u01ad\u0001\u01ad"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01af\u0001\u01af\u0003\u01af\u1691\b\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01b0\u0001\u01b0\u0003\u01b0\u1697\b\u01b0"+
		"\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1"+
		"\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0003\u01b1\u16a3\b\u01b1"+
		"\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0003\u01b2\u16a8\b\u01b2\u0001\u01b3"+
		"\u0001\u01b3\u0001\u01b3\u0003\u01b3\u16ad\b\u01b3\u0001\u01b4\u0001\u01b4"+
		"\u0001\u01b4\u0003\u01b4\u16b2\b\u01b4\u0001\u01b5\u0001\u01b5\u0001\u01b5"+
		"\u0001\u01b5\u0001\u01b6\u0001\u01b6\u0001\u01b6\u0000\u0002\u0238\u024c"+
		"\u01b7\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018"+
		"\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308"+
		"\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320"+
		"\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338"+
		"\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350"+
		"\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368"+
		"\u036a\u036c\u0000M\u0001\u0000\u0225\u0225\u0003\u0000\u00af\u00af\u00bb"+
		"\u00bb\u011b\u011b\u0002\u0000\u017c\u017c\u0239\u0239\u0002\u0000oo\u00c5"+
		"\u00c5\u0003\u0000ll\u0222\u0222\u0230\u0230\u0003\u0000\n\nzz\u00ee\u00ee"+
		"\u0002\u0000\u0015\u0015\u00c6\u00c6\u0003\u0000]]\u0117\u0117\u0179\u0179"+
		"\u0002\u0000\u00e2\u00e2\u0118\u0118\u0002\u0000\u00e6\u00e6\u0182\u0182"+
		"\u0003\u0000\u0097\u0097\u00bd\u00bd\u011e\u011e\u0002\u0000[[oo\u0002"+
		"\u0000ll\u0222\u0222\u0001\u0000\u0126\u0127\u0001\u0001\u0225\u0225\u0002"+
		"\u0000\u0146\u0146\u0148\u0148\u0002\u0000\u0113\u0113\u01c5\u01c5\u0001"+
		"\u0000LM\u0002\u0000nn\u00ae\u00ae\u0002\u0000\u0107\u0107\u01bb\u01bb"+
		"\u0002\u0000\u001f\u001f\u00ae\u00ae\u0002\u0000--qq\u0003\u0000\u000e"+
		"\u000eww\u01a6\u01a6\u0002\u0000XX\u00f3\u00f3\u0003\u0000\u00a1\u00a1"+
		"\u00d0\u00d0\u014c\u014c\u0002\u0000\u0158\u0158\u0190\u0190\u0003\u0000"+
		"\u0158\u0158\u0175\u0175\u0190\u0190\u0002\u0000\u008c\u008c\u00b0\u00b0"+
		"\u0002\u0000YY\u014e\u014e\u0002\u0000\u00ad\u00ad\u00cb\u00cb\u0002\u0000"+
		"\u000e\u000e\u01ab\u01ab\u0002\u0000\u001d\u001d\u0162\u0162\u0002\u0000"+
		"\u0016\u0016rr\u0002\u0000\u0098\u0098\u00cd\u00cd\u0002\u0000\u000e\u000e"+
		"\u0098\u0098\u0002\u0000\u018b\u018b\u018d\u018d\u0003\u0000\u000e\u000e"+
		"\u0013\u0013\u0176\u0176\u0004\u0000\u0004\u0005\u0226\u0228\u022d\u022d"+
		"\u0230\u0230\b\u0000\u0004\u0005\u0012\u0012\u0116\u0116\u021c\u021e\u0220"+
		"\u0220\u0226\u0228\u022d\u022e\u0230\u0230\u0002\u0000\u000e\u000eww\u0006"+
		"\u0000VV\u01eb\u01f0\u01fe\u01ff\u0202\u0204\u0208\u0208\u020b\u020b\u0002"+
		"\u0000\u00e6\u00e6\u0185\u0185\u0001\u0000\u00d3\u00d7\u0001\u0000\u021d"+
		"\u021e\u0002\u0000\u021c\u021c\u0220\u0220\u0002\u0000kk\u00b2\u00b2\u0004"+
		"\u0000\u000e\u000e\u0013\u0013\u008f\u008f\u0176\u0176\u0002\u000088\u01c9"+
		"\u01c9\u0002\u0000ww\u01a6\u01a6\u0002\u000055FF\u0002\u0000\u0099\u0099"+
		"\u00ce\u00ce\u0002\u0000::\u00f7\u00f7\u0003\u0000,,\u00cf\u00cf\u019a"+
		"\u019a\u0002\u0000\u01ca\u01ca\u01cd\u01cd\u0002\u0000\u0084\u0084\u0100"+
		"\u0100\u0002\u0000\u0087\u0087\u00f1\u00f1\u0002\u0000OOxx\u0002\u0000"+
		"\u00aa\u00aa\u016b\u016b\u0001\u0000\u01fe\u020d\u0001\u0000\u01f7\u01fd"+
		"\u0001\u0000\u01f1\u01f6\u0002\u0000\u0135\u0135\u0151\u0151\u0002\u0000"+
		"\u009b\u009b\u012f\u012f\u0002\u0000\u0105\u0105\u0157\u0157\u0002\u0000"+
		"\u011a\u011a\u017a\u017a\u0003\u0000\u0094\u0094\u0189\u0189\u01bc\u01bc"+
		"\u0002\u0000DD\u014d\u014d\u0003\u0000DD\u0103\u0103\u014d\u014d\u0002"+
		"\u0000\u0123\u0123\u0186\u0186\u0002\u0000\u00ad\u00ad\u0142\u0142\u0002"+
		"\u0000bb\u01d5\u01d5\u0002\u0000\u00ef\u00ef\u015a\u015a\u0002\u00001"+
		"199\u0004\u0000bb\u00ab\u00ab\u00e9\u00e9\u015a\u015a\u0001\u0000\u0213"+
		"\u0214\u0002\u0000\u020e\u020e\u0215\u0215L\u0000\t\r\u0011\u0011\u0014"+
		"\u0014\u0017 #&(,./12468;=HKY[`bhjkmosvxy{}\u0080\u0082\u0084\u0087\u008a"+
		"\u008c\u008e\u008e\u0090\u0094\u0097\u009c\u009e\u009f\u00a1\u00a2\u00a6"+
		"\u00a7\u00aa\u00ab\u00ad\u00ae\u00b0\u00b3\u00b5\u00bb\u00bd\u00c0\u00c2"+
		"\u00c2\u00c4\u00c4\u00c7\u00d2\u00d4\u00d9\u00db\u00e7\u00e9\u00fc\u00fe"+
		"\u0100\u0103\u0103\u0105\u0105\u0109\u010d\u010f\u0111\u0113\u0114\u0117"+
		"\u0117\u0119\u0125\u0128\u0128\u012a\u0131\u0134\u0137\u0139\u014a\u014c"+
		"\u0158\u015a\u015a\u015d\u015e\u0160\u0160\u0162\u0169\u016b\u0173\u0175"+
		"\u0177\u0179\u017a\u017d\u017d\u017f\u018a\u018c\u018c\u018f\u0198\u019a"+
		"\u019f\u01a1\u01a4\u01a7\u01a7\u01a9\u01a9\u01ab\u01ae\u01b0\u01b1\u01b3"+
		"\u01b9\u01bb\u01bd\u01bf\u01bf\u01c1\u01c1\u01c3\u01d8\u01f1\u020d\u0238"+
		"\u0238\u1919\u0000\u036f\u0001\u0000\u0000\u0000\u0002\u0376\u0001\u0000"+
		"\u0000\u0000\u0004\u037e\u0001\u0000\u0000\u0000\u0006\u0389\u0001\u0000"+
		"\u0000\u0000\b\u038b\u0001\u0000\u0000\u0000\n\u0390\u0001\u0000\u0000"+
		"\u0000\f\u0396\u0001\u0000\u0000\u0000\u000e\u03c3\u0001\u0000\u0000\u0000"+
		"\u0010\u03ef\u0001\u0000\u0000\u0000\u0012\u03f3\u0001\u0000\u0000\u0000"+
		"\u0014\u03f5\u0001\u0000\u0000\u0000\u0016\u03fb\u0001\u0000\u0000\u0000"+
		"\u0018\u043b\u0001\u0000\u0000\u0000\u001a\u0440\u0001\u0000\u0000\u0000"+
		"\u001c\u0444\u0001\u0000\u0000\u0000\u001e\u0447\u0001\u0000\u0000\u0000"+
		" \u0452\u0001\u0000\u0000\u0000\"\u0455\u0001\u0000\u0000\u0000$\u0460"+
		"\u0001\u0000\u0000\u0000&\u0463\u0001\u0000\u0000\u0000(\u046a\u0001\u0000"+
		"\u0000\u0000*\u0477\u0001\u0000\u0000\u0000,\u0479\u0001\u0000\u0000\u0000"+
		".\u047b\u0001\u0000\u0000\u00000\u047d\u0001\u0000\u0000\u00002\u047f"+
		"\u0001\u0000\u0000\u00004\u0486\u0001\u0000\u0000\u00006\u048e\u0001\u0000"+
		"\u0000\u00008\u0490\u0001\u0000\u0000\u0000:\u049f\u0001\u0000\u0000\u0000"+
		"<\u04a4\u0001\u0000\u0000\u0000>\u04a9\u0001\u0000\u0000\u0000@\u04af"+
		"\u0001\u0000\u0000\u0000B\u04bb\u0001\u0000\u0000\u0000D\u04be\u0001\u0000"+
		"\u0000\u0000F\u04c6\u0001\u0000\u0000\u0000H\u04ce\u0001\u0000\u0000\u0000"+
		"J\u04dc\u0001\u0000\u0000\u0000L\u04de\u0001\u0000\u0000\u0000N\u04e9"+
		"\u0001\u0000\u0000\u0000P\u04ee\u0001\u0000\u0000\u0000R\u04f1\u0001\u0000"+
		"\u0000\u0000T\u04f5\u0001\u0000\u0000\u0000V\u04fc\u0001\u0000\u0000\u0000"+
		"X\u0508\u0001\u0000\u0000\u0000Z\u050b\u0001\u0000\u0000\u0000\\\u0510"+
		"\u0001\u0000\u0000\u0000^\u0520\u0001\u0000\u0000\u0000`\u0534\u0001\u0000"+
		"\u0000\u0000b\u0536\u0001\u0000\u0000\u0000d\u0549\u0001\u0000\u0000\u0000"+
		"f\u054e\u0001\u0000\u0000\u0000h\u0550\u0001\u0000\u0000\u0000j\u0554"+
		"\u0001\u0000\u0000\u0000l\u055b\u0001\u0000\u0000\u0000n\u0563\u0001\u0000"+
		"\u0000\u0000p\u0578\u0001\u0000\u0000\u0000r\u057b\u0001\u0000\u0000\u0000"+
		"t\u057e\u0001\u0000\u0000\u0000v\u0581\u0001\u0000\u0000\u0000x\u0588"+
		"\u0001\u0000\u0000\u0000z\u0593\u0001\u0000\u0000\u0000|\u0595\u0001\u0000"+
		"\u0000\u0000~\u0597\u0001\u0000\u0000\u0000\u0080\u05a1\u0001\u0000\u0000"+
		"\u0000\u0082\u05a3\u0001\u0000\u0000\u0000\u0084\u05c3\u0001\u0000\u0000"+
		"\u0000\u0086\u05d9\u0001\u0000\u0000\u0000\u0088\u05ea\u0001\u0000\u0000"+
		"\u0000\u008a\u060b\u0001\u0000\u0000\u0000\u008c\u061f\u0001\u0000\u0000"+
		"\u0000\u008e\u063a\u0001\u0000\u0000\u0000\u0090\u063c\u0001\u0000\u0000"+
		"\u0000\u0092\u064c\u0001\u0000\u0000\u0000\u0094\u0650\u0001\u0000\u0000"+
		"\u0000\u0096\u0656\u0001\u0000\u0000\u0000\u0098\u065e\u0001\u0000\u0000"+
		"\u0000\u009a\u066c\u0001\u0000\u0000\u0000\u009c\u0677\u0001\u0000\u0000"+
		"\u0000\u009e\u0691\u0001\u0000\u0000\u0000\u00a0\u0694\u0001\u0000\u0000"+
		"\u0000\u00a2\u069b\u0001\u0000\u0000\u0000\u00a4\u069d\u0001\u0000\u0000"+
		"\u0000\u00a6\u069f\u0001\u0000\u0000\u0000\u00a8\u06a1\u0001\u0000\u0000"+
		"\u0000\u00aa\u06a5\u0001\u0000\u0000\u0000\u00ac\u06b5\u0001\u0000\u0000"+
		"\u0000\u00ae\u06b9\u0001\u0000\u0000\u0000\u00b0\u06d1\u0001\u0000\u0000"+
		"\u0000\u00b2\u06d4\u0001\u0000\u0000\u0000\u00b4\u06da\u0001\u0000\u0000"+
		"\u0000\u00b6\u06e3\u0001\u0000\u0000\u0000\u00b8\u06ff\u0001\u0000\u0000"+
		"\u0000\u00ba\u0705\u0001\u0000\u0000\u0000\u00bc\u0708\u0001\u0000\u0000"+
		"\u0000\u00be\u070f\u0001\u0000\u0000\u0000\u00c0\u0717\u0001\u0000\u0000"+
		"\u0000\u00c2\u0726\u0001\u0000\u0000\u0000\u00c4\u0728\u0001\u0000\u0000"+
		"\u0000\u00c6\u072c\u0001\u0000\u0000\u0000\u00c8\u0732\u0001\u0000\u0000"+
		"\u0000\u00ca\u074e\u0001\u0000\u0000\u0000\u00cc\u0770\u0001\u0000\u0000"+
		"\u0000\u00ce\u07a0\u0001\u0000\u0000\u0000\u00d0\u07aa\u0001\u0000\u0000"+
		"\u0000\u00d2\u07ac\u0001\u0000\u0000\u0000\u00d4\u07b1\u0001\u0000\u0000"+
		"\u0000\u00d6\u07bf\u0001\u0000\u0000\u0000\u00d8\u07c1\u0001\u0000\u0000"+
		"\u0000\u00da\u07c6\u0001\u0000\u0000\u0000\u00dc\u07d6\u0001\u0000\u0000"+
		"\u0000\u00de\u07f7\u0001\u0000\u0000\u0000\u00e0\u081a\u0001\u0000\u0000"+
		"\u0000\u00e2\u081e\u0001\u0000\u0000\u0000\u00e4\u082d\u0001\u0000\u0000"+
		"\u0000\u00e6\u082f\u0001\u0000\u0000\u0000\u00e8\u0832\u0001\u0000\u0000"+
		"\u0000\u00ea\u084e\u0001\u0000\u0000\u0000\u00ec\u0850\u0001\u0000\u0000"+
		"\u0000\u00ee\u0854\u0001\u0000\u0000\u0000\u00f0\u0857\u0001\u0000\u0000"+
		"\u0000\u00f2\u085b\u0001\u0000\u0000\u0000\u00f4\u0860\u0001\u0000\u0000"+
		"\u0000\u00f6\u0864\u0001\u0000\u0000\u0000\u00f8\u0875\u0001\u0000\u0000"+
		"\u0000\u00fa\u0882\u0001\u0000\u0000\u0000\u00fc\u0893\u0001\u0000\u0000"+
		"\u0000\u00fe\u089e\u0001\u0000\u0000\u0000\u0100\u08a0\u0001\u0000\u0000"+
		"\u0000\u0102\u08ae\u0001\u0000\u0000\u0000\u0104\u08bf\u0001\u0000\u0000"+
		"\u0000\u0106\u08d8\u0001\u0000\u0000\u0000\u0108\u08e2\u0001\u0000\u0000"+
		"\u0000\u010a\u08e6\u0001\u0000\u0000\u0000\u010c\u090b\u0001\u0000\u0000"+
		"\u0000\u010e\u090d\u0001\u0000\u0000\u0000\u0110\u0926\u0001\u0000\u0000"+
		"\u0000\u0112\u0931\u0001\u0000\u0000\u0000\u0114\u0938\u0001\u0000\u0000"+
		"\u0000\u0116\u093c\u0001\u0000\u0000\u0000\u0118\u094e\u0001\u0000\u0000"+
		"\u0000\u011a\u0956\u0001\u0000\u0000\u0000\u011c\u0961\u0001\u0000\u0000"+
		"\u0000\u011e\u0968\u0001\u0000\u0000\u0000\u0120\u096c\u0001\u0000\u0000"+
		"\u0000\u0122\u0989\u0001\u0000\u0000\u0000\u0124\u098d\u0001\u0000\u0000"+
		"\u0000\u0126\u0992\u0001\u0000\u0000\u0000\u0128\u099a\u0001\u0000\u0000"+
		"\u0000\u012a\u09a2\u0001\u0000\u0000\u0000\u012c\u09a5\u0001\u0000\u0000"+
		"\u0000\u012e\u09b5\u0001\u0000\u0000\u0000\u0130\u09ba\u0001\u0000\u0000"+
		"\u0000\u0132\u09be\u0001\u0000\u0000\u0000\u0134\u09e2\u0001\u0000\u0000"+
		"\u0000\u0136\u09e4\u0001\u0000\u0000\u0000\u0138\u09fa\u0001\u0000\u0000"+
		"\u0000\u013a\u09fc\u0001\u0000\u0000\u0000\u013c\u0a01\u0001\u0000\u0000"+
		"\u0000\u013e\u0a03\u0001\u0000\u0000\u0000\u0140\u0a05\u0001\u0000\u0000"+
		"\u0000\u0142\u0a07\u0001\u0000\u0000\u0000\u0144\u0a11\u0001\u0000\u0000"+
		"\u0000\u0146\u0a14\u0001\u0000\u0000\u0000\u0148\u0a1a\u0001\u0000\u0000"+
		"\u0000\u014a\u0a23\u0001\u0000\u0000\u0000\u014c\u0a29\u0001\u0000\u0000"+
		"\u0000\u014e\u0a3d\u0001\u0000\u0000\u0000\u0150\u0a42\u0001\u0000\u0000"+
		"\u0000\u0152\u0a4f\u0001\u0000\u0000\u0000\u0154\u0a51\u0001\u0000\u0000"+
		"\u0000\u0156\u0a5f\u0001\u0000\u0000\u0000\u0158\u0a6b\u0001\u0000\u0000"+
		"\u0000\u015a\u0a71\u0001\u0000\u0000\u0000\u015c\u0a73\u0001\u0000\u0000"+
		"\u0000\u015e\u0a76\u0001\u0000\u0000\u0000\u0160\u0a7b\u0001\u0000\u0000"+
		"\u0000\u0162\u0a93\u0001\u0000\u0000\u0000\u0164\u0aa2\u0001\u0000\u0000"+
		"\u0000\u0166\u0aa4\u0001\u0000\u0000\u0000\u0168\u0ab9\u0001\u0000\u0000"+
		"\u0000\u016a\u0ac8\u0001\u0000\u0000\u0000\u016c\u0ade\u0001\u0000\u0000"+
		"\u0000\u016e\u0ae5\u0001\u0000\u0000\u0000\u0170\u0af2\u0001\u0000\u0000"+
		"\u0000\u0172\u0af5\u0001\u0000\u0000\u0000\u0174\u0b0a\u0001\u0000\u0000"+
		"\u0000\u0176\u0b14\u0001\u0000\u0000\u0000\u0178\u0b1d\u0001\u0000\u0000"+
		"\u0000\u017a\u0b38\u0001\u0000\u0000\u0000\u017c\u0b63\u0001\u0000\u0000"+
		"\u0000\u017e\u0b73\u0001\u0000\u0000\u0000\u0180\u0b80\u0001\u0000\u0000"+
		"\u0000\u0182\u0b89\u0001\u0000\u0000\u0000\u0184\u0b8b\u0001\u0000\u0000"+
		"\u0000\u0186\u0bbe\u0001\u0000\u0000\u0000\u0188\u0bc2\u0001\u0000\u0000"+
		"\u0000\u018a\u0bcf\u0001\u0000\u0000\u0000\u018c\u0bd1\u0001\u0000\u0000"+
		"\u0000\u018e\u0bd9\u0001\u0000\u0000\u0000\u0190\u0c15\u0001\u0000\u0000"+
		"\u0000\u0192\u0c18\u0001\u0000\u0000\u0000\u0194\u0c2d\u0001\u0000\u0000"+
		"\u0000\u0196\u0c30\u0001\u0000\u0000\u0000\u0198\u0c3c\u0001\u0000\u0000"+
		"\u0000\u019a\u0c40\u0001\u0000\u0000\u0000\u019c\u0c59\u0001\u0000\u0000"+
		"\u0000\u019e\u0c5b\u0001\u0000\u0000\u0000\u01a0\u0c6c\u0001\u0000\u0000"+
		"\u0000\u01a2\u0c73\u0001\u0000\u0000\u0000\u01a4\u0c82\u0001\u0000\u0000"+
		"\u0000\u01a6\u0c99\u0001\u0000\u0000\u0000\u01a8\u0c9f\u0001\u0000\u0000"+
		"\u0000\u01aa\u0ca1\u0001\u0000\u0000\u0000\u01ac\u0cb9\u0001\u0000\u0000"+
		"\u0000\u01ae\u0cd1\u0001\u0000\u0000\u0000\u01b0\u0cf5\u0001\u0000\u0000"+
		"\u0000\u01b2\u0cf7\u0001\u0000\u0000\u0000\u01b4\u0d15\u0001\u0000\u0000"+
		"\u0000\u01b6\u0d1a\u0001\u0000\u0000\u0000\u01b8\u0d1c\u0001\u0000\u0000"+
		"\u0000\u01ba\u0d28\u0001\u0000\u0000\u0000\u01bc\u0d38\u0001\u0000\u0000"+
		"\u0000\u01be\u0d3a\u0001\u0000\u0000\u0000\u01c0\u0d3d\u0001\u0000\u0000"+
		"\u0000\u01c2\u0d57\u0001\u0000\u0000\u0000\u01c4\u0d59\u0001\u0000\u0000"+
		"\u0000\u01c6\u0d5d\u0001\u0000\u0000\u0000\u01c8\u0d6c\u0001\u0000\u0000"+
		"\u0000\u01ca\u0d78\u0001\u0000\u0000\u0000\u01cc\u0d80\u0001\u0000\u0000"+
		"\u0000\u01ce\u0d84\u0001\u0000\u0000\u0000\u01d0\u0d8f\u0001\u0000\u0000"+
		"\u0000\u01d2\u0d94\u0001\u0000\u0000\u0000\u01d4\u0da1\u0001\u0000\u0000"+
		"\u0000\u01d6\u0db5\u0001\u0000\u0000\u0000\u01d8\u0dbe\u0001\u0000\u0000"+
		"\u0000\u01da\u0dc0\u0001\u0000\u0000\u0000\u01dc\u0dc7\u0001\u0000\u0000"+
		"\u0000\u01de\u0dcc\u0001\u0000\u0000\u0000\u01e0\u0dd9\u0001\u0000\u0000"+
		"\u0000\u01e2\u0de1\u0001\u0000\u0000\u0000\u01e4\u0de9\u0001\u0000\u0000"+
		"\u0000\u01e6\u0df7\u0001\u0000\u0000\u0000\u01e8\u0df9\u0001\u0000\u0000"+
		"\u0000\u01ea\u0e05\u0001\u0000\u0000\u0000\u01ec\u0e28\u0001\u0000\u0000"+
		"\u0000\u01ee\u0e2a\u0001\u0000\u0000\u0000\u01f0\u0e38\u0001\u0000\u0000"+
		"\u0000\u01f2\u0e3d\u0001\u0000\u0000\u0000\u01f4\u0e45\u0001\u0000\u0000"+
		"\u0000\u01f6\u0e4e\u0001\u0000\u0000\u0000\u01f8\u0e50\u0001\u0000\u0000"+
		"\u0000\u01fa\u0e62\u0001\u0000\u0000\u0000\u01fc\u0e66\u0001\u0000\u0000"+
		"\u0000\u01fe\u0e6e\u0001\u0000\u0000\u0000\u0200\u0e78\u0001\u0000\u0000"+
		"\u0000\u0202\u0e80\u0001\u0000\u0000\u0000\u0204\u0e86\u0001\u0000\u0000"+
		"\u0000\u0206\u0e95\u0001\u0000\u0000\u0000\u0208\u0e98\u0001\u0000\u0000"+
		"\u0000\u020a\u0eb1\u0001\u0000\u0000\u0000\u020c\u0ec4\u0001\u0000\u0000"+
		"\u0000\u020e\u0ec8\u0001\u0000\u0000\u0000\u0210\u0ecb\u0001\u0000\u0000"+
		"\u0000\u0212\u0ee7\u0001\u0000\u0000\u0000\u0214\u0eec\u0001\u0000\u0000"+
		"\u0000\u0216\u0eff\u0001\u0000\u0000\u0000\u0218\u0f01\u0001\u0000\u0000"+
		"\u0000\u021a\u0f11\u0001\u0000\u0000\u0000\u021c\u0f19\u0001\u0000\u0000"+
		"\u0000\u021e\u0f1e\u0001\u0000\u0000\u0000\u0220\u0f29\u0001\u0000\u0000"+
		"\u0000\u0222\u0f34\u0001\u0000\u0000\u0000\u0224\u0f37\u0001\u0000\u0000"+
		"\u0000\u0226\u0f4f\u0001\u0000\u0000\u0000\u0228\u0f51\u0001\u0000\u0000"+
		"\u0000\u022a\u0f60\u0001\u0000\u0000\u0000\u022c\u0f6b\u0001\u0000\u0000"+
		"\u0000\u022e\u0f79\u0001\u0000\u0000\u0000\u0230\u0f7e\u0001\u0000\u0000"+
		"\u0000\u0232\u0f83\u0001\u0000\u0000\u0000\u0234\u0f90\u0001\u0000\u0000"+
		"\u0000\u0236\u0f92\u0001\u0000\u0000\u0000\u0238\u0f9c\u0001\u0000\u0000"+
		"\u0000\u023a\u0faf\u0001\u0000\u0000\u0000\u023c\u0fb1\u0001\u0000\u0000"+
		"\u0000\u023e\u0fba\u0001\u0000\u0000\u0000\u0240\u0fbc\u0001\u0000\u0000"+
		"\u0000\u0242\u0fc5\u0001\u0000\u0000\u0000\u0244\u0fcf\u0001\u0000\u0000"+
		"\u0000\u0246\u0fd6\u0001\u0000\u0000\u0000\u0248\u0fe0\u0001\u0000\u0000"+
		"\u0000\u024a\u0fe7\u0001\u0000\u0000\u0000\u024c\u1005\u0001\u0000\u0000"+
		"\u0000\u024e\u1010\u0001\u0000\u0000\u0000\u0250\u1012\u0001\u0000\u0000"+
		"\u0000\u0252\u1016\u0001\u0000\u0000\u0000\u0254\u1018\u0001\u0000\u0000"+
		"\u0000\u0256\u102e\u0001\u0000\u0000\u0000\u0258\u1043\u0001\u0000\u0000"+
		"\u0000\u025a\u106d\u0001\u0000\u0000\u0000\u025c\u106f\u0001\u0000\u0000"+
		"\u0000\u025e\u1073\u0001\u0000\u0000\u0000\u0260\u1075\u0001\u0000\u0000"+
		"\u0000\u0262\u108b\u0001\u0000\u0000\u0000\u0264\u1096\u0001\u0000\u0000"+
		"\u0000\u0266\u1098\u0001\u0000\u0000\u0000\u0268\u10a3\u0001\u0000\u0000"+
		"\u0000\u026a\u10a5\u0001\u0000\u0000\u0000\u026c\u10ca\u0001\u0000\u0000"+
		"\u0000\u026e\u10d3\u0001\u0000\u0000\u0000\u0270\u10d5\u0001\u0000\u0000"+
		"\u0000\u0272\u10e4\u0001\u0000\u0000\u0000\u0274\u10e6\u0001\u0000\u0000"+
		"\u0000\u0276\u10f7\u0001\u0000\u0000\u0000\u0278\u10f9\u0001\u0000\u0000"+
		"\u0000\u027a\u110e\u0001\u0000\u0000\u0000\u027c\u1110\u0001\u0000\u0000"+
		"\u0000\u027e\u1114\u0001\u0000\u0000\u0000\u0280\u111d\u0001\u0000\u0000"+
		"\u0000\u0282\u111f\u0001\u0000\u0000\u0000\u0284\u1127\u0001\u0000\u0000"+
		"\u0000\u0286\u112f\u0001\u0000\u0000\u0000\u0288\u1152\u0001\u0000\u0000"+
		"\u0000\u028a\u1154\u0001\u0000\u0000\u0000\u028c\u1172\u0001\u0000\u0000"+
		"\u0000\u028e\u1174\u0001\u0000\u0000\u0000\u0290\u1184\u0001\u0000\u0000"+
		"\u0000\u0292\u1187\u0001\u0000\u0000\u0000\u0294\u1189\u0001\u0000\u0000"+
		"\u0000\u0296\u11b8\u0001\u0000\u0000\u0000\u0298\u11bc\u0001\u0000\u0000"+
		"\u0000\u029a\u11bf\u0001\u0000\u0000\u0000\u029c\u11d2\u0001\u0000\u0000"+
		"\u0000\u029e\u11da\u0001\u0000\u0000\u0000\u02a0\u11ec\u0001\u0000\u0000"+
		"\u0000\u02a2\u11f3\u0001\u0000\u0000\u0000\u02a4\u120c\u0001\u0000\u0000"+
		"\u0000\u02a6\u120e\u0001\u0000\u0000\u0000\u02a8\u1212\u0001\u0000\u0000"+
		"\u0000\u02aa\u121b\u0001\u0000\u0000\u0000\u02ac\u1360\u0001\u0000\u0000"+
		"\u0000\u02ae\u1362\u0001\u0000\u0000\u0000\u02b0\u1364\u0001\u0000\u0000"+
		"\u0000\u02b2\u1366\u0001\u0000\u0000\u0000\u02b4\u1368\u0001\u0000\u0000"+
		"\u0000\u02b6\u1375\u0001\u0000\u0000\u0000\u02b8\u137e\u0001\u0000\u0000"+
		"\u0000\u02ba\u1387\u0001\u0000\u0000\u0000\u02bc\u1389\u0001\u0000\u0000"+
		"\u0000\u02be\u139a\u0001\u0000\u0000\u0000\u02c0\u13a0\u0001\u0000\u0000"+
		"\u0000\u02c2\u13ab\u0001\u0000\u0000\u0000\u02c4\u13ad\u0001\u0000\u0000"+
		"\u0000\u02c6\u13c1\u0001\u0000\u0000\u0000\u02c8\u13cf\u0001\u0000\u0000"+
		"\u0000\u02ca\u13e1\u0001\u0000\u0000\u0000\u02cc\u13f6\u0001\u0000\u0000"+
		"\u0000\u02ce\u1403\u0001\u0000\u0000\u0000\u02d0\u1406\u0001\u0000\u0000"+
		"\u0000\u02d2\u140f\u0001\u0000\u0000\u0000\u02d4\u1415\u0001\u0000\u0000"+
		"\u0000\u02d6\u141d\u0001\u0000\u0000\u0000\u02d8\u1420\u0001\u0000\u0000"+
		"\u0000\u02da\u142b\u0001\u0000\u0000\u0000\u02dc\u1432\u0001\u0000\u0000"+
		"\u0000\u02de\u1437\u0001\u0000\u0000\u0000\u02e0\u1440\u0001\u0000\u0000"+
		"\u0000\u02e2\u1449\u0001\u0000\u0000\u0000\u02e4\u144b\u0001\u0000\u0000"+
		"\u0000\u02e6\u144d\u0001\u0000\u0000\u0000\u02e8\u145b\u0001\u0000\u0000"+
		"\u0000\u02ea\u145f\u0001\u0000\u0000\u0000\u02ec\u1461\u0001\u0000\u0000"+
		"\u0000\u02ee\u1463\u0001\u0000\u0000\u0000\u02f0\u1468\u0001\u0000\u0000"+
		"\u0000\u02f2\u1480\u0001\u0000\u0000\u0000\u02f4\u1484\u0001\u0000\u0000"+
		"\u0000\u02f6\u1486\u0001\u0000\u0000\u0000\u02f8\u1488\u0001\u0000\u0000"+
		"\u0000\u02fa\u148a\u0001\u0000\u0000\u0000\u02fc\u148c\u0001\u0000\u0000"+
		"\u0000\u02fe\u148e\u0001\u0000\u0000\u0000\u0300\u1490\u0001\u0000\u0000"+
		"\u0000\u0302\u1492\u0001\u0000\u0000\u0000\u0304\u149e\u0001\u0000\u0000"+
		"\u0000\u0306\u14a0\u0001\u0000\u0000\u0000\u0308\u14a5\u0001\u0000\u0000"+
		"\u0000\u030a\u14a7\u0001\u0000\u0000\u0000\u030c\u14a9\u0001\u0000\u0000"+
		"\u0000\u030e\u14b1\u0001\u0000\u0000\u0000\u0310\u14b3\u0001\u0000\u0000"+
		"\u0000\u0312\u14bf\u0001\u0000\u0000\u0000\u0314\u14c1\u0001\u0000\u0000"+
		"\u0000\u0316\u14c9\u0001\u0000\u0000\u0000\u0318\u14d1\u0001\u0000\u0000"+
		"\u0000\u031a\u14d9\u0001\u0000\u0000\u0000\u031c\u14e1\u0001\u0000\u0000"+
		"\u0000\u031e\u14e5\u0001\u0000\u0000\u0000\u0320\u14f4\u0001\u0000\u0000"+
		"\u0000\u0322\u14f6\u0001\u0000\u0000\u0000\u0324\u14fa\u0001\u0000\u0000"+
		"\u0000\u0326\u14fe\u0001\u0000\u0000\u0000\u0328\u1500\u0001\u0000\u0000"+
		"\u0000\u032a\u1505\u0001\u0000\u0000\u0000\u032c\u1507\u0001\u0000\u0000"+
		"\u0000\u032e\u150f\u0001\u0000\u0000\u0000\u0330\u1519\u0001\u0000\u0000"+
		"\u0000\u0332\u1521\u0001\u0000\u0000\u0000\u0334\u152a\u0001\u0000\u0000"+
		"\u0000\u0336\u1539\u0001\u0000\u0000\u0000\u0338\u154e\u0001\u0000\u0000"+
		"\u0000\u033a\u1578\u0001\u0000\u0000\u0000\u033c\u1583\u0001\u0000\u0000"+
		"\u0000\u033e\u158d\u0001\u0000\u0000\u0000\u0340\u15ab\u0001\u0000\u0000"+
		"\u0000\u0342\u15ad\u0001\u0000\u0000\u0000\u0344\u15f6\u0001\u0000\u0000"+
		"\u0000\u0346\u1618\u0001\u0000\u0000\u0000\u0348\u161a\u0001\u0000\u0000"+
		"\u0000\u034a\u161d\u0001\u0000\u0000\u0000\u034c\u161f\u0001\u0000\u0000"+
		"\u0000\u034e\u1622\u0001\u0000\u0000\u0000\u0350\u1624\u0001\u0000\u0000"+
		"\u0000\u0352\u162e\u0001\u0000\u0000\u0000\u0354\u163d\u0001\u0000\u0000"+
		"\u0000\u0356\u1685\u0001\u0000\u0000\u0000\u0358\u1687\u0001\u0000\u0000"+
		"\u0000\u035a\u1689\u0001\u0000\u0000\u0000\u035c\u168c\u0001\u0000\u0000"+
		"\u0000\u035e\u1690\u0001\u0000\u0000\u0000\u0360\u1696\u0001\u0000\u0000"+
		"\u0000\u0362\u16a2\u0001\u0000\u0000\u0000\u0364\u16a7\u0001\u0000\u0000"+
		"\u0000\u0366\u16ac\u0001\u0000\u0000\u0000\u0368\u16b1\u0001\u0000\u0000"+
		"\u0000\u036a\u16b3\u0001\u0000\u0000\u0000\u036c\u16b7\u0001\u0000\u0000"+
		"\u0000\u036e\u0370\b\u0000\u0000\u0000\u036f\u036e\u0001\u0000\u0000\u0000"+
		"\u0370\u0371\u0001\u0000\u0000\u0000\u0371\u036f\u0001\u0000\u0000\u0000"+
		"\u0371\u0372\u0001\u0000\u0000\u0000\u0372\u0001\u0001\u0000\u0000\u0000"+
		"\u0373\u0375\u0003\u0006\u0003\u0000\u0374\u0373\u0001\u0000\u0000\u0000"+
		"\u0375\u0378\u0001\u0000\u0000\u0000\u0376\u0374\u0001\u0000\u0000\u0000"+
		"\u0376\u0377\u0001\u0000\u0000\u0000\u0377\u0379\u0001\u0000\u0000\u0000"+
		"\u0378\u0376\u0001\u0000\u0000\u0000\u0379\u037a\u0005\u0000\u0000\u0001"+
		"\u037a\u0003\u0001\u0000\u0000\u0000\u037b\u037d\u0003\u0006\u0003\u0000"+
		"\u037c\u037b\u0001\u0000\u0000\u0000\u037d\u0380\u0001\u0000\u0000\u0000"+
		"\u037e\u037c\u0001\u0000\u0000\u0000\u037e\u037f\u0001\u0000\u0000\u0000"+
		"\u037f\u0381\u0001\u0000\u0000\u0000\u0380\u037e\u0001\u0000\u0000\u0000"+
		"\u0381\u0382\u0005\u0000\u0000\u0001\u0382\u0005\u0001\u0000\u0000\u0000"+
		"\u0383\u038a\u0003\b\u0004\u0000\u0384\u038a\u0003\u000e\u0007\u0000\u0385"+
		"\u038a\u0003\f\u0006\u0000\u0386\u038a\u0003\u00e8t\u0000\u0387\u038a"+
		"\u0003\n\u0005\u0000\u0388\u038a\u0003\u0158\u00ac\u0000\u0389\u0383\u0001"+
		"\u0000\u0000\u0000\u0389\u0384\u0001\u0000\u0000\u0000\u0389\u0385\u0001"+
		"\u0000\u0000\u0000\u0389\u0386\u0001\u0000\u0000\u0000\u0389\u0387\u0001"+
		"\u0000\u0000\u0000\u0389\u0388\u0001\u0000\u0000\u0000\u038a\u0007\u0001"+
		"\u0000\u0000\u0000\u038b\u038c\u0005\u0167\u0000\u0000\u038c\u038d\u0005"+
		"\u0156\u0000\u0000\u038d\u038e\u0003\u0300\u0180\u0000\u038e\u038f\u0005"+
		"\u0225\u0000\u0000\u038f\t\u0001\u0000\u0000\u0000\u0390\u0391\u0005z"+
		"\u0000\u0000\u0391\u0392\u0005\u0133\u0000\u0000\u0392\u0393\u0003\u031c"+
		"\u018e\u0000\u0393\u0394\u0005\u0225\u0000\u0000\u0394\u000b\u0001\u0000"+
		"\u0000\u0000\u0395\u0397\u0005W\u0000\u0000\u0396\u0395\u0001\u0000\u0000"+
		"\u0000\u0396\u0397\u0001\u0000\u0000\u0000\u0397\u0398\u0001\u0000\u0000"+
		"\u0000\u0398\u0399\u0005\u0133\u0000\u0000\u0399\u039b\u0003\u031c\u018e"+
		"\u0000\u039a\u039c\u0003(\u0014\u0000\u039b\u039a\u0001\u0000\u0000\u0000"+
		"\u039b\u039c\u0001\u0000\u0000\u0000\u039c\u039f\u0001\u0000\u0000\u0000"+
		"\u039d\u039e\u0005\u00cc\u0000\u0000\u039e\u03a0\u0003*\u0015\u0000\u039f"+
		"\u039d\u0001\u0000\u0000\u0000\u039f\u03a0\u0001\u0000\u0000\u0000\u03a0"+
		"\u03a4\u0001\u0000\u0000\u0000\u03a1\u03a2\u0005\u0178\u0000\u0000\u03a2"+
		"\u03a3\u0005\u015c\u0000\u0000\u03a3\u03a5\u0003,\u0016\u0000\u03a4\u03a1"+
		"\u0001\u0000\u0000\u0000\u03a4\u03a5\u0001\u0000\u0000\u0000\u03a5\u03a9"+
		"\u0001\u0000\u0000\u0000\u03a6\u03a7\u0005l\u0000\u0000\u03a7\u03a8\u0005"+
		"\u0156\u0000\u0000\u03a8\u03aa\u0003.\u0017\u0000\u03a9\u03a6\u0001\u0000"+
		"\u0000\u0000\u03a9\u03aa\u0001\u0000\u0000\u0000\u03aa\u03b4\u0001\u0000"+
		"\u0000\u0000\u03ab\u03ac\u0005\u0138\u0000\u0000\u03ac\u03ad\u0005\u0178"+
		"\u0000\u0000\u03ad\u03b2\u0005_\u0000\u0000\u03ae\u03af\u0005\u01c2\u0000"+
		"\u0000\u03af\u03b0\u0005\u0144\u0000\u0000\u03b0\u03b1\u0005\u01ba\u0000"+
		"\u0000\u03b1\u03b3\u00030\u0018\u0000\u03b2\u03ae\u0001\u0000\u0000\u0000"+
		"\u03b2\u03b3\u0001\u0000\u0000\u0000\u03b3\u03b5\u0001\u0000\u0000\u0000"+
		"\u03b4\u03ab\u0001\u0000\u0000\u0000\u03b4\u03b5\u0001\u0000\u0000\u0000"+
		"\u03b5\u03b6\u0001\u0000\u0000\u0000\u03b6\u03b7\u0005\u0015\u0000\u0000"+
		"\u03b7\u03ba\u0005!\u0000\u0000\u03b8\u03b9\u0005\u0162\u0000\u0000\u03b9"+
		"\u03bb\u0005\u01de\u0000\u0000\u03ba\u03b8\u0001\u0000\u0000\u0000\u03ba"+
		"\u03bb\u0001\u0000\u0000\u0000\u03bb\u03bd\u0001\u0000\u0000\u0000\u03bc"+
		"\u03be\u0003\u00a0P\u0000\u03bd\u03bc\u0001\u0000\u0000\u0000\u03bd\u03be"+
		"\u0001\u0000\u0000\u0000\u03be\u03bf\u0001\u0000\u0000\u0000\u03bf\u03c1"+
		"\u0005\u0083\u0000\u0000\u03c0\u03c2\u0005\u0225\u0000\u0000\u03c1\u03c0"+
		"\u0001\u0000\u0000\u0000\u03c1\u03c2\u0001\u0000\u0000\u0000\u03c2\r\u0001"+
		"\u0000\u0000\u0000\u03c3\u03c4\u0005\u00a2\u0000\u0000\u03c4\u03c6\u0003"+
		"\u031c\u018e\u0000\u03c5\u03c7\u0003(\u0014\u0000\u03c6\u03c5\u0001\u0000"+
		"\u0000\u0000\u03c6\u03c7\u0001\u0000\u0000\u0000\u03c7\u03c8\u0001\u0000"+
		"\u0000\u0000\u03c8\u03c9\u0005\u0147\u0000\u0000\u03c9\u03cc\u0003\u0012"+
		"\t\u0000\u03ca\u03cb\u0005\u00cc\u0000\u0000\u03cb\u03cd\u0003*\u0015"+
		"\u0000\u03cc\u03ca\u0001\u0000\u0000\u0000\u03cc\u03cd\u0001\u0000\u0000"+
		"\u0000\u03cd\u03d1\u0001\u0000\u0000\u0000\u03ce\u03cf\u0005\u0178\u0000"+
		"\u0000\u03cf\u03d0\u0005\u015c\u0000\u0000\u03d0\u03d2\u0003,\u0016\u0000"+
		"\u03d1\u03ce\u0001\u0000\u0000\u0000\u03d1\u03d2\u0001\u0000\u0000\u0000"+
		"\u03d2\u03d6\u0001\u0000\u0000\u0000\u03d3\u03d4\u0005l\u0000\u0000\u03d4"+
		"\u03d5\u0005\u0156\u0000\u0000\u03d5\u03d7\u0003.\u0017\u0000\u03d6\u03d3"+
		"\u0001\u0000\u0000\u0000\u03d6\u03d7\u0001\u0000\u0000\u0000\u03d7\u03e1"+
		"\u0001\u0000\u0000\u0000\u03d8\u03d9\u0005\u0138\u0000\u0000\u03d9\u03da"+
		"\u0005\u0178\u0000\u0000\u03da\u03df\u0005_\u0000\u0000\u03db\u03dc\u0005"+
		"\u01c2\u0000\u0000\u03dc\u03dd\u0005\u0144\u0000\u0000\u03dd\u03de\u0005"+
		"\u01ba\u0000\u0000\u03de\u03e0\u00030\u0018\u0000\u03df\u03db\u0001\u0000"+
		"\u0000\u0000\u03df\u03e0\u0001\u0000\u0000\u0000\u03e0\u03e2\u0001\u0000"+
		"\u0000\u0000\u03e1\u03d8\u0001\u0000\u0000\u0000\u03e1\u03e2\u0001\u0000"+
		"\u0000\u0000\u03e2\u03e3\u0001\u0000\u0000\u0000\u03e3\u03e4\u0005\u0015"+
		"\u0000\u0000\u03e4\u03e7\u0005!\u0000\u0000\u03e5\u03e6\u0005\u0162\u0000"+
		"\u0000\u03e6\u03e8\u0005\u01de\u0000\u0000\u03e7\u03e5\u0001\u0000\u0000"+
		"\u0000\u03e7\u03e8\u0001\u0000\u0000\u0000\u03e8\u03ea\u0001\u0000\u0000"+
		"\u0000\u03e9\u03eb\u0003\u00a0P\u0000\u03ea\u03e9\u0001\u0000\u0000\u0000"+
		"\u03ea\u03eb\u0001\u0000\u0000\u0000\u03eb\u03ec\u0001\u0000\u0000\u0000"+
		"\u03ec\u03ed\u0005\u0083\u0000\u0000\u03ed\u03ee\u0005\u0225\u0000\u0000"+
		"\u03ee\u000f\u0001\u0000\u0000\u0000\u03ef\u03f0\u0003\u0360\u01b0\u0000"+
		"\u03f0\u0011\u0001\u0000\u0000\u0000\u03f1\u03f4\u0003\u009aM\u0000\u03f2"+
		"\u03f4\u0003\u0014\n\u0000\u03f3\u03f1\u0001\u0000\u0000\u0000\u03f3\u03f2"+
		"\u0001\u0000\u0000\u0000\u03f4\u0013\u0001\u0000\u0000\u0000\u03f5\u03f6"+
		"\u0005\u018b\u0000\u0000\u03f6\u03f7\u0003\u001e\u000f\u0000\u03f7\u0015"+
		"\u0001\u0000\u0000\u0000\u03f8\u03fc\u0003\u0018\f\u0000\u03f9\u03fc\u0003"+
		"\u001a\r\u0000\u03fa\u03fc\u0003\u001c\u000e\u0000\u03fb\u03f8\u0001\u0000"+
		"\u0000\u0000\u03fb\u03f9\u0001\u0000\u0000\u0000\u03fb\u03fa\u0001\u0000"+
		"\u0000\u0000\u03fc\u0017\u0001\u0000\u0000\u0000\u03fd\u043c\u0005a\u0000"+
		"\u0000\u03fe\u043c\u0005\u018f\u0000\u0000\u03ff\u043c\u0005\u0190\u0000"+
		"\u0000\u0400\u043c\u0005\u015b\u0000\u0000\u0401\u043c\u0005\u0198\u0000"+
		"\u0000\u0402\u043c\u0005\u0173\u0000\u0000\u0403\u043c\u0005\u00c0\u0000"+
		"\u0000\u0404\u043c\u0005\u00bf\u0000\u0000\u0405\u043c\u0005\'\u0000\u0000"+
		"\u0406\u040f\u0005h\u0000\u0000\u0407\u0408\u0005\u0219\u0000\u0000\u0408"+
		"\u040b\u0003\u0358\u01ac\u0000\u0409\u040a\u0005\u021f\u0000\u0000\u040a"+
		"\u040c\u0003\u0358\u01ac\u0000\u040b\u0409\u0001\u0000\u0000\u0000\u040b"+
		"\u040c\u0001\u0000\u0000\u0000\u040c\u040d\u0001\u0000\u0000\u0000\u040d"+
		"\u040e\u0005\u021a\u0000\u0000\u040e\u0410\u0001\u0000\u0000\u0000\u040f"+
		"\u0407\u0001\u0000\u0000\u0000\u040f\u0410\u0001\u0000\u0000\u0000\u0410"+
		"\u043c\u0001\u0000\u0000\u0000\u0411\u043c\u0005\u0174\u0000\u0000\u0412"+
		"\u043c\u0005\u0139\u0000\u0000\u0413\u043c\u0005y\u0000\u0000\u0414\u0419"+
		"\u0005\u01b3\u0000\u0000\u0415\u0416\u0005\u0219\u0000\u0000\u0416\u0417"+
		"\u0003\u0358\u01ac\u0000\u0417\u0418\u0005\u021a\u0000\u0000\u0418\u041a"+
		"\u0001\u0000\u0000\u0000\u0419\u0415\u0001\u0000\u0000\u0000\u0419\u041a"+
		"\u0001\u0000\u0000\u0000\u041a\u043c\u0001\u0000\u0000\u0000\u041b\u0420"+
		"\u0005\u010c\u0000\u0000\u041c\u041d\u0005\u0219\u0000\u0000\u041d\u041e"+
		"\u0003\u0358\u01ac\u0000\u041e\u041f\u0005\u021a\u0000\u0000\u041f\u0421"+
		"\u0001\u0000\u0000\u0000\u0420\u041c\u0001\u0000\u0000\u0000\u0420\u0421"+
		"\u0001\u0000\u0000\u0000\u0421\u043c\u0001\u0000\u0000\u0000\u0422\u0427"+
		"\u0005\u0010\u0000\u0000\u0423\u0424\u0005\u0219\u0000\u0000\u0424\u0425"+
		"\u0003\u0358\u01ac\u0000\u0425\u0426\u0005\u021a\u0000\u0000\u0426\u0428"+
		"\u0001\u0000\u0000\u0000\u0427\u0423\u0001\u0000\u0000\u0000\u0427\u0428"+
		"\u0001\u0000\u0000\u0000\u0428\u043c\u0001\u0000\u0000\u0000\u0429\u042e"+
		"\u0005\u01e9\u0000\u0000\u042a\u042b\u0005\u0219\u0000\u0000\u042b\u042c"+
		"\u0003\u0358\u01ac\u0000\u042c\u042d\u0005\u021a\u0000\u0000\u042d\u042f"+
		"\u0001\u0000\u0000\u0000\u042e\u042a\u0001\u0000\u0000\u0000\u042e\u042f"+
		"\u0001\u0000\u0000\u0000\u042f\u043c\u0001\u0000\u0000\u0000\u0430\u043c"+
		"\u0005(\u0000\u0000\u0431\u043c\u0005>\u0000\u0000\u0432\u043c\u0005\u00f8"+
		"\u0000\u0000\u0433\u043c\u0005\u0184\u0000\u0000\u0434\u0439\u00059\u0000"+
		"\u0000\u0435\u0436\u0005\u0219\u0000\u0000\u0436\u0437\u0003\u0358\u01ac"+
		"\u0000\u0437\u0438\u0005\u021a\u0000\u0000\u0438\u043a\u0001\u0000\u0000"+
		"\u0000\u0439\u0435\u0001\u0000\u0000\u0000\u0439\u043a\u0001\u0000\u0000"+
		"\u0000\u043a\u043c\u0001\u0000\u0000\u0000\u043b\u03fd\u0001\u0000\u0000"+
		"\u0000\u043b\u03fe\u0001\u0000\u0000\u0000\u043b\u03ff\u0001\u0000\u0000"+
		"\u0000\u043b\u0400\u0001\u0000\u0000\u0000\u043b\u0401\u0001\u0000\u0000"+
		"\u0000\u043b\u0402\u0001\u0000\u0000\u0000\u043b\u0403\u0001\u0000\u0000"+
		"\u0000\u043b\u0404\u0001\u0000\u0000\u0000\u043b\u0405\u0001\u0000\u0000"+
		"\u0000\u043b\u0406\u0001\u0000\u0000\u0000\u043b\u0411\u0001\u0000\u0000"+
		"\u0000\u043b\u0412\u0001\u0000\u0000\u0000\u043b\u0413\u0001\u0000\u0000"+
		"\u0000\u043b\u0414\u0001\u0000\u0000\u0000\u043b\u041b\u0001\u0000\u0000"+
		"\u0000\u043b\u0422\u0001\u0000\u0000\u0000\u043b\u0429\u0001\u0000\u0000"+
		"\u0000\u043b\u0430\u0001\u0000\u0000\u0000\u043b\u0431\u0001\u0000\u0000"+
		"\u0000\u043b\u0432\u0001\u0000\u0000\u0000\u043b\u0433\u0001\u0000\u0000"+
		"\u0000\u043b\u0434\u0001\u0000\u0000\u0000\u043c\u0019\u0001\u0000\u0000"+
		"\u0000\u043d\u043e\u0003\u0300\u0180\u0000\u043e\u043f\u0005\u0212\u0000"+
		"\u0000\u043f\u0441\u0001\u0000\u0000\u0000\u0440\u043d\u0001\u0000\u0000"+
		"\u0000\u0440\u0441\u0001\u0000\u0000\u0000\u0441\u0442\u0001\u0000\u0000"+
		"\u0000\u0442\u0443\u0003\u0360\u01b0\u0000\u0443\u001b\u0001\u0000\u0000"+
		"\u0000\u0444\u0445\u0005\u018b\u0000\u0000\u0445\u0446\u0003\u001e\u000f"+
		"\u0000\u0446\u001d\u0001\u0000\u0000\u0000\u0447\u0448\u0005\u0219\u0000"+
		"\u0000\u0448\u044d\u0003 \u0010\u0000\u0449\u044a\u0005\u021f\u0000\u0000"+
		"\u044a\u044c\u0003 \u0010\u0000\u044b\u0449\u0001\u0000\u0000\u0000\u044c"+
		"\u044f\u0001\u0000\u0000\u0000\u044d\u044b\u0001\u0000\u0000\u0000\u044d"+
		"\u044e\u0001\u0000\u0000\u0000\u044e\u0450\u0001\u0000\u0000\u0000\u044f"+
		"\u044d\u0001\u0000\u0000\u0000\u0450\u0451\u0005\u021a\u0000\u0000\u0451"+
		"\u001f\u0001\u0000\u0000\u0000\u0452\u0453\u0003\"\u0011\u0000\u0453\u0454"+
		"\u0003$\u0012\u0000\u0454!\u0001\u0000\u0000\u0000\u0455\u0456\u0003\u0262"+
		"\u0131\u0000\u0456#\u0001\u0000\u0000\u0000\u0457\u0461\u0003\u0018\f"+
		"\u0000\u0458\u045d\u0005\u01e2\u0000\u0000\u0459\u045a\u0005\u0219\u0000"+
		"\u0000\u045a\u045b\u0003\u0358\u01ac\u0000\u045b\u045c\u0005\u021a\u0000"+
		"\u0000\u045c\u045e\u0001\u0000\u0000\u0000\u045d\u0459\u0001\u0000\u0000"+
		"\u0000\u045d\u045e\u0001\u0000\u0000\u0000\u045e\u0461\u0001\u0000\u0000"+
		"\u0000\u045f\u0461\u0005\u01e7\u0000\u0000\u0460\u0457\u0001\u0000\u0000"+
		"\u0000\u0460\u0458\u0001\u0000\u0000\u0000\u0460\u045f\u0001\u0000\u0000"+
		"\u0000\u0461%\u0001\u0000\u0000\u0000\u0462\u0464\u0007\u0001\u0000\u0000"+
		"\u0463\u0462\u0001\u0000\u0000\u0000\u0463\u0464\u0001\u0000\u0000\u0000"+
		"\u0464\u0465\u0001\u0000\u0000\u0000\u0465\u0466\u0003\u0010\b\u0000\u0466"+
		"\u0468\u0003\u0016\u000b\u0000\u0467\u0469\u0003\u00fc~\u0000\u0468\u0467"+
		"\u0001\u0000\u0000\u0000\u0468\u0469\u0001\u0000\u0000\u0000\u0469\'\u0001"+
		"\u0000\u0000\u0000\u046a\u046c\u0005\u0219\u0000\u0000\u046b\u046d\u0003"+
		"&\u0013\u0000\u046c\u046b\u0001\u0000\u0000\u0000\u046c\u046d\u0001\u0000"+
		"\u0000\u0000\u046d\u0472\u0001\u0000\u0000\u0000\u046e\u046f\u0005\u021f"+
		"\u0000\u0000\u046f\u0471\u0003&\u0013\u0000\u0470\u046e\u0001\u0000\u0000"+
		"\u0000\u0471\u0474\u0001\u0000\u0000\u0000\u0472\u0470\u0001\u0000\u0000"+
		"\u0000\u0472\u0473\u0001\u0000\u0000\u0000\u0473\u0475\u0001\u0000\u0000"+
		"\u0000\u0474\u0472\u0001\u0000\u0000\u0000\u0475\u0476\u0005\u021a\u0000"+
		"\u0000\u0476)\u0001\u0000\u0000\u0000\u0477\u0478\u0007\u0002\u0000\u0000"+
		"\u0478+\u0001\u0000\u0000\u0000\u0479\u047a\u0007\u0003\u0000\u0000\u047a"+
		"-\u0001\u0000\u0000\u0000\u047b\u047c\u0003\u0360\u01b0\u0000\u047c/\u0001"+
		"\u0000\u0000\u0000\u047d\u047e\u0003\u0360\u01b0\u0000\u047e1\u0001\u0000"+
		"\u0000\u0000\u047f\u0483\u00034\u001a\u0000\u0480\u0482\u00034\u001a\u0000"+
		"\u0481\u0480\u0001\u0000\u0000\u0000\u0482\u0485\u0001\u0000\u0000\u0000"+
		"\u0483\u0481\u0001\u0000\u0000\u0000\u0483\u0484\u0001\u0000\u0000\u0000"+
		"\u04843\u0001\u0000\u0000\u0000\u0485\u0483\u0001\u0000\u0000\u0000\u0486"+
		"\u0487\u0005i\u0000\u0000\u0487\u0488\u00036\u001b\u0000\u0488\u0489\u0005"+
		"\u0225\u0000\u0000\u04895\u0001\u0000\u0000\u0000\u048a\u048f\u00038\u001c"+
		"\u0000\u048b\u048f\u0003:\u001d\u0000\u048c\u048f\u0003D\"\u0000\u048d"+
		"\u048f\u0003N\'\u0000\u048e\u048a\u0001\u0000\u0000\u0000\u048e\u048b"+
		"\u0001\u0000\u0000\u0000\u048e\u048c\u0001\u0000\u0000\u0000\u048e\u048d"+
		"\u0001\u0000\u0000\u0000\u048f7\u0001\u0000\u0000\u0000\u0490\u0492\u0003"+
		"<\u001e\u0000\u0491\u0493\u0005K\u0000\u0000\u0492\u0491\u0001\u0000\u0000"+
		"\u0000\u0492\u0493\u0001\u0000\u0000\u0000\u0493\u0496\u0001\u0000\u0000"+
		"\u0000\u0494\u0497\u0003\u0018\f\u0000\u0495\u0497\u0003>\u001f\u0000"+
		"\u0496\u0494\u0001\u0000\u0000\u0000\u0496\u0495\u0001\u0000\u0000\u0000"+
		"\u0497\u049a\u0001\u0000\u0000\u0000\u0498\u0499\u0005\u0106\u0000\u0000"+
		"\u0499\u049b\u0005\u0108\u0000\u0000\u049a\u0498\u0001\u0000\u0000\u0000"+
		"\u049a\u049b\u0001\u0000\u0000\u0000\u049b\u049d\u0001\u0000\u0000\u0000"+
		"\u049c\u049e\u0003B!\u0000\u049d\u049c\u0001\u0000\u0000\u0000\u049d\u049e"+
		"\u0001\u0000\u0000\u0000\u049e9\u0001\u0000\u0000\u0000\u049f\u04a2\u0003"+
		"<\u001e\u0000\u04a0\u04a3\u0003\u001c\u000e\u0000\u04a1\u04a3\u0003\u001a"+
		"\r\u0000\u04a2\u04a0\u0001\u0000\u0000\u0000\u04a2\u04a1\u0001\u0000\u0000"+
		"\u0000\u04a3;\u0001\u0000\u0000\u0000\u04a4\u04a7\u0003H$\u0000\u04a5"+
		"\u04a6\u0005\u021f\u0000\u0000\u04a6\u04a8\u0003H$\u0000\u04a7\u04a5\u0001"+
		"\u0000\u0000\u0000\u04a7\u04a8\u0001\u0000\u0000\u0000\u04a8=\u0001\u0000"+
		"\u0000\u0000\u04a9\u04aa\u0003\u0018\f\u0000\u04aa\u04ad\u0005\u0014\u0000"+
		"\u0000\u04ab\u04ac\u0005\u0230\u0000\u0000\u04ac\u04ae\u0003@ \u0000\u04ad"+
		"\u04ab\u0001\u0000\u0000\u0000\u04ad\u04ae\u0001\u0000\u0000\u0000\u04ae"+
		"?\u0001\u0000\u0000\u0000\u04af\u04b0\u0005\u0014\u0000\u0000\u04b0\u04b1"+
		"\u0005\u0219\u0000\u0000\u04b1\u04b6\u0003\u0262\u0131\u0000\u04b2\u04b3"+
		"\u0005\u021f\u0000\u0000\u04b3\u04b5\u0003\u0262\u0131\u0000\u04b4\u04b2"+
		"\u0001\u0000\u0000\u0000\u04b5\u04b8\u0001\u0000\u0000\u0000\u04b6\u04b4"+
		"\u0001\u0000\u0000\u0000\u04b6\u04b7\u0001\u0000\u0000\u0000\u04b7\u04b9"+
		"\u0001\u0000\u0000\u0000\u04b8\u04b6\u0001\u0000\u0000\u0000\u04b9\u04ba"+
		"\u0005\u021a\u0000\u0000\u04baA\u0001\u0000\u0000\u0000\u04bb\u04bc\u0007"+
		"\u0004\u0000\u0000\u04bc\u04bd\u0003\u0262\u0131\u0000\u04bdC\u0001\u0000"+
		"\u0000\u0000\u04be\u04bf\u0005\\\u0000\u0000\u04bf\u04c1\u0003J%\u0000"+
		"\u04c0\u04c2\u0003F#\u0000\u04c1\u04c0\u0001\u0000\u0000\u0000\u04c1\u04c2"+
		"\u0001\u0000\u0000\u0000\u04c2\u04c3\u0001\u0000\u0000\u0000\u04c3\u04c4"+
		"\u0005\u009d\u0000\u0000\u04c4\u04c5\u0003\u0174\u00ba\u0000\u04c5E\u0001"+
		"\u0000\u0000\u0000\u04c6\u04cb\u0003L&\u0000\u04c7\u04c8\u0005\u021f\u0000"+
		"\u0000\u04c8\u04ca\u0003L&\u0000\u04c9\u04c7\u0001\u0000\u0000\u0000\u04ca"+
		"\u04cd\u0001\u0000\u0000\u0000\u04cb\u04c9\u0001\u0000\u0000\u0000\u04cb"+
		"\u04cc\u0001\u0000\u0000\u0000\u04ccG\u0001\u0000\u0000\u0000\u04cd\u04cb"+
		"\u0001\u0000\u0000\u0000\u04ce\u04d3\u0003\u0360\u01b0\u0000\u04cf\u04d0"+
		"\u0005\u0212\u0000\u0000\u04d0\u04d2\u0003\u0352\u01a9\u0000\u04d1\u04cf"+
		"\u0001\u0000\u0000\u0000\u04d2\u04d5\u0001\u0000\u0000\u0000\u04d3\u04d1"+
		"\u0001\u0000\u0000\u0000\u04d3\u04d4\u0001\u0000\u0000\u0000\u04d4\u04da"+
		"\u0001\u0000\u0000\u0000\u04d5\u04d3\u0001\u0000\u0000\u0000\u04d6\u04d7"+
		"\u0005\u0231\u0000\u0000\u04d7\u04d8\u0003\u0346\u01a3\u0000\u04d8\u04d9"+
		"\u0005\u0232\u0000\u0000\u04d9\u04db\u0001\u0000\u0000\u0000\u04da\u04d6"+
		"\u0001\u0000\u0000\u0000\u04da\u04db\u0001\u0000\u0000\u0000\u04dbI\u0001"+
		"\u0000\u0000\u0000\u04dc\u04dd\u0003\u0360\u01b0\u0000\u04ddK\u0001\u0000"+
		"\u0000\u0000\u04de\u04df\u0003\u0010\b\u0000\u04df\u04e0\u0003$\u0012"+
		"\u0000\u04e0M\u0001\u0000\u0000\u0000\u04e1\u04e2\u0003H$\u0000\u04e2"+
		"\u04e3\u0005\u01dc\u0000\u0000\u04e3\u04ea\u0001\u0000\u0000\u0000\u04e4"+
		"\u04e5\u0003H$\u0000\u04e5\u04e6\u0005\u01dc\u0000\u0000\u04e6\u04e7\u0005"+
		"\u009d\u0000\u0000\u04e7\u04e8\u0003P(\u0000\u04e8\u04ea\u0001\u0000\u0000"+
		"\u0000\u04e9\u04e1\u0001\u0000\u0000\u0000\u04e9\u04e4\u0001\u0000\u0000"+
		"\u0000\u04eaO\u0001\u0000\u0000\u0000\u04eb\u04ef\u0003\u0358\u01ac\u0000"+
		"\u04ec\u04ed\u0005\u01e4\u0000\u0000\u04ed\u04ef\u0003\u0358\u01ac\u0000"+
		"\u04ee\u04eb\u0001\u0000\u0000\u0000\u04ee\u04ec\u0001\u0000\u0000\u0000"+
		"\u04efQ\u0001\u0000\u0000\u0000\u04f0\u04f2\u0003T*\u0000\u04f1\u04f0"+
		"\u0001\u0000\u0000\u0000\u04f2\u04f3\u0001\u0000\u0000\u0000\u04f3\u04f1"+
		"\u0001\u0000\u0000\u0000\u04f3\u04f4\u0001\u0000\u0000\u0000\u04f4S\u0001"+
		"\u0000\u0000\u0000\u04f5\u04f6\u0005i\u0000\u0000\u04f6\u04f7\u0005\u0090"+
		"\u0000\u0000\u04f7\u04f8\u0005\u00a9\u0000\u0000\u04f8\u04f9\u0005\u009d"+
		"\u0000\u0000\u04f9\u04fa\u0003V+\u0000\u04fa\u04fb\u0003^/\u0000\u04fb"+
		"U\u0001\u0000\u0000\u0000\u04fc\u0501\u0003X,\u0000\u04fd\u04fe\u0005"+
		"\u021f\u0000\u0000\u04fe\u0500\u0003X,\u0000\u04ff\u04fd\u0001\u0000\u0000"+
		"\u0000\u0500\u0503\u0001\u0000\u0000\u0000\u0501\u04ff\u0001\u0000\u0000"+
		"\u0000\u0501\u0502\u0001\u0000\u0000\u0000\u0502W\u0001\u0000\u0000\u0000"+
		"\u0503\u0501\u0001\u0000\u0000\u0000\u0504\u0509\u0005\u017b\u0000\u0000"+
		"\u0505\u0509\u0005\u01e6\u0000\u0000\u0506\u0509\u0003P(\u0000\u0507\u0509"+
		"\u0003H$\u0000\u0508\u0504\u0001\u0000\u0000\u0000\u0508\u0505\u0001\u0000"+
		"\u0000\u0000\u0508\u0506\u0001\u0000\u0000\u0000\u0508\u0507\u0001\u0000"+
		"\u0000\u0000\u0509Y\u0001\u0000\u0000\u0000\u050a\u050c\u0003^/\u0000"+
		"\u050b\u050a\u0001\u0000\u0000\u0000\u050c\u050d\u0001\u0000\u0000\u0000"+
		"\u050d\u050b\u0001\u0000\u0000\u0000\u050d\u050e\u0001\u0000\u0000\u0000"+
		"\u050e[\u0001\u0000\u0000\u0000\u050f\u0511\u0003^/\u0000\u0510\u050f"+
		"\u0001\u0000\u0000\u0000\u0511\u0512\u0001\u0000\u0000\u0000\u0512\u0510"+
		"\u0001\u0000\u0000\u0000\u0512\u0513\u0001\u0000\u0000\u0000\u0513]\u0001"+
		"\u0000\u0000\u0000\u0514\u0521\u0003\u0088D\u0000\u0515\u0521\u0003\u008c"+
		"F\u0000\u0516\u0521\u0003\u008eG\u0000\u0517\u0521\u0003`0\u0000\u0518"+
		"\u0521\u0003\u0098L\u0000\u0519\u0521\u0003\u0082A\u0000\u051a\u0521\u0003"+
		"v;\u0000\u051b\u0521\u0003x<\u0000\u051c\u0521\u0003l6\u0000\u051d\u0521"+
		"\u0003n7\u0000\u051e\u0521\u0003p8\u0000\u051f\u0521\u0003r9\u0000\u0520"+
		"\u0514\u0001\u0000\u0000\u0000\u0520\u0515\u0001\u0000\u0000\u0000\u0520"+
		"\u0516\u0001\u0000\u0000\u0000\u0520\u0517\u0001\u0000\u0000\u0000\u0520"+
		"\u0518\u0001\u0000\u0000\u0000\u0520\u0519\u0001\u0000\u0000\u0000\u0520"+
		"\u051a\u0001\u0000\u0000\u0000\u0520\u051b\u0001\u0000\u0000\u0000\u0520"+
		"\u051c\u0001\u0000\u0000\u0000\u0520\u051d\u0001\u0000\u0000\u0000\u0520"+
		"\u051e\u0001\u0000\u0000\u0000\u0520\u051f\u0001\u0000\u0000\u0000\u0521"+
		"_\u0001\u0000\u0000\u0000\u0522\u0523\u0003\u017e\u00bf\u0000\u0523\u0524"+
		"\u0005\u0225\u0000\u0000\u0524\u0535\u0001\u0000\u0000\u0000\u0525\u0526"+
		"\u0003d2\u0000\u0526\u0527\u0005\u0225\u0000\u0000\u0527\u0535\u0001\u0000"+
		"\u0000\u0000\u0528\u0529\u0003b1\u0000\u0529\u052a\u0005\u0225\u0000\u0000"+
		"\u052a\u0535\u0001\u0000\u0000\u0000\u052b\u052c\u0003f3\u0000\u052c\u052d"+
		"\u0005\u0225\u0000\u0000\u052d\u0535\u0001\u0000\u0000\u0000\u052e\u052f"+
		"\u0003j5\u0000\u052f\u0530\u0005\u0225\u0000\u0000\u0530\u0535\u0001\u0000"+
		"\u0000\u0000\u0531\u0532\u0003h4\u0000\u0532\u0533\u0005\u0225\u0000\u0000"+
		"\u0533\u0535\u0001\u0000\u0000\u0000\u0534\u0522\u0001\u0000\u0000\u0000"+
		"\u0534\u0525\u0001\u0000\u0000\u0000\u0534\u0528\u0001\u0000\u0000\u0000"+
		"\u0534\u052b\u0001\u0000\u0000\u0000\u0534\u052e\u0001\u0000\u0000\u0000"+
		"\u0534\u0531\u0001\u0000\u0000\u0000\u0535a\u0001\u0000\u0000\u0000\u0536"+
		"\u0537\u0005\u01aa\u0000\u0000\u0537\u053a\u0003\u021c\u010e\u0000\u0538"+
		"\u0539\u0005\u0015\u0000\u0000\u0539\u053b\u0003\u02ea\u0175\u0000\u053a"+
		"\u0538\u0001\u0000\u0000\u0000\u053a\u053b\u0001\u0000\u0000\u0000\u053b"+
		"\u053c\u0001\u0000\u0000\u0000\u053c\u053e\u0003\u01ea\u00f5\u0000\u053d"+
		"\u053f\u0003\u0188\u00c4\u0000\u053e\u053d\u0001\u0000\u0000\u0000\u053e"+
		"\u053f\u0001\u0000\u0000\u0000\u053f\u0541\u0001\u0000\u0000\u0000\u0540"+
		"\u0542\u0003\u02ee\u0177\u0000\u0541\u0540\u0001\u0000\u0000\u0000\u0541"+
		"\u0542\u0001\u0000\u0000\u0000\u0542\u0544\u0001\u0000\u0000\u0000\u0543"+
		"\u0545\u0003\u021e\u010f\u0000\u0544\u0543\u0001\u0000\u0000\u0000\u0544"+
		"\u0545\u0001\u0000\u0000\u0000\u0545\u0547\u0001\u0000\u0000\u0000\u0546"+
		"\u0548\u0003\u0220\u0110\u0000\u0547\u0546\u0001\u0000\u0000\u0000\u0547"+
		"\u0548\u0001\u0000\u0000\u0000\u0548c\u0001\u0000\u0000\u0000\u0549\u054c"+
		"\u0005\u00bc\u0000\u0000\u054a\u054d\u0003\u01f8\u00fc\u0000\u054b\u054d"+
		"\u0003\u01fa\u00fd\u0000\u054c\u054a\u0001\u0000\u0000\u0000\u054c\u054b"+
		"\u0001\u0000\u0000\u0000\u054de\u0001\u0000\u0000\u0000\u054e\u054f\u0003"+
		"\u01ee\u00f7\u0000\u054fg\u0001\u0000\u0000\u0000\u0550\u0551\u0005\u01a1"+
		"\u0000\u0000\u0551\u0552\u0005\u018b\u0000\u0000\u0552\u0553\u0003\u018e"+
		"\u00c7\u0000\u0553i\u0001\u0000\u0000\u0000\u0554\u0555\u0005W\u0000\u0000"+
		"\u0555\u0556\u0005\u00d9\u0000\u0000\u0556\u0557\u0005\u018c\u0000\u0000"+
		"\u0557\u0558\u0005\u018b\u0000\u0000\u0558\u0559\u0003\u0092I\u0000\u0559"+
		"\u055a\u0003\u001e\u000f\u0000\u055ak\u0001\u0000\u0000\u0000\u055b\u055c"+
		"\u0005\u01c1\u0000\u0000\u055c\u055d\u0003\u0234\u011a\u0000\u055d\u055e"+
		"\u0005\u01da\u0000\u0000\u055e\u055f\u0003Z-\u0000\u055f\u0560\u0005\u0083"+
		"\u0000\u0000\u0560\u0561\u0005\u01c1\u0000\u0000\u0561\u0562\u0005\u0225"+
		"\u0000\u0000\u0562m\u0001\u0000\u0000\u0000\u0563\u0564\u0005\u009d\u0000"+
		"\u0000\u0564\u0567\u0003\u0010\b\u0000\u0565\u0566\u0005\u0015\u0000\u0000"+
		"\u0566\u0568\u0003\u0010\b\u0000\u0567\u0565\u0001\u0000\u0000\u0000\u0567"+
		"\u0568\u0001\u0000\u0000\u0000\u0568\u056e\u0001\u0000\u0000\u0000\u0569"+
		"\u056a\u0005\u00af\u0000\u0000\u056a\u056b\u0003\u0262\u0131\u0000\u056b"+
		"\u056c\u0005\u0001\u0000\u0000\u056c\u056d\u0003\u0262\u0131\u0000\u056d"+
		"\u056f\u0001\u0000\u0000\u0000\u056e\u0569\u0001\u0000\u0000\u0000\u056e"+
		"\u056f\u0001\u0000\u0000\u0000\u056f\u0570\u0001\u0000\u0000\u0000\u0570"+
		"\u0572\u0005\u01da\u0000\u0000\u0571\u0573\u0003Z-\u0000\u0572\u0571\u0001"+
		"\u0000\u0000\u0000\u0572\u0573\u0001\u0000\u0000\u0000\u0573\u0574\u0001"+
		"\u0000\u0000\u0000\u0574\u0575\u0005\u0083\u0000\u0000\u0575\u0576\u0005"+
		"\u009d\u0000\u0000\u0576\u0577\u0005\u0225\u0000\u0000\u0577o\u0001\u0000"+
		"\u0000\u0000\u0578\u0579\u0005\u014d\u0000\u0000\u0579\u057a\u0005\u0225"+
		"\u0000\u0000\u057aq\u0001\u0000\u0000\u0000\u057b\u057c\u0005D\u0000\u0000"+
		"\u057c\u057d\u0005\u0225\u0000\u0000\u057ds\u0001\u0000\u0000\u0000\u057e"+
		"\u057f\u0005.\u0000\u0000\u057f\u0580\u0005\u0225\u0000\u0000\u0580u\u0001"+
		"\u0000\u0000\u0000\u0581\u0582\u0005\u01e3\u0000\u0000\u0582\u0584\u0003"+
		"z=\u0000\u0583\u0585\u0003~?\u0000\u0584\u0583\u0001\u0000\u0000\u0000"+
		"\u0584\u0585\u0001\u0000\u0000\u0000\u0585\u0586\u0001\u0000\u0000\u0000"+
		"\u0586\u0587\u0005\u0225\u0000\u0000\u0587w\u0001\u0000\u0000\u0000\u0588"+
		"\u058a\u0005\u01e0\u0000\u0000\u0589\u058b\u0003z=\u0000\u058a\u0589\u0001"+
		"\u0000\u0000\u0000\u058a\u058b\u0001\u0000\u0000\u0000\u058b\u058d\u0001"+
		"\u0000\u0000\u0000\u058c\u058e\u0003~?\u0000\u058d\u058c\u0001\u0000\u0000"+
		"\u0000\u058d\u058e\u0001\u0000\u0000\u0000\u058e\u058f\u0001\u0000\u0000"+
		"\u0000\u058f\u0590\u0005\u0225\u0000\u0000\u0590y\u0001\u0000\u0000\u0000"+
		"\u0591\u0594\u0003|>\u0000\u0592\u0594\u0003P(\u0000\u0593\u0591\u0001"+
		"\u0000\u0000\u0000\u0593\u0592\u0001\u0000\u0000\u0000\u0594{\u0001\u0000"+
		"\u0000\u0000\u0595\u0596\u0003\u0360\u01b0\u0000\u0596}\u0001\u0000\u0000"+
		"\u0000\u0597\u0598\u0005\u0167\u0000\u0000\u0598\u0599\u0005\u01e1\u0000"+
		"\u0000\u0599\u059f\u0005\u0230\u0000\u0000\u059a\u059b\u0005\u0002\u0000"+
		"\u0000\u059b\u059c\u0003\u0080@\u0000\u059c\u059d\u0005\u0002\u0000\u0000"+
		"\u059d\u05a0\u0001\u0000\u0000\u0000\u059e\u05a0\u0003\u0262\u0131\u0000"+
		"\u059f\u059a\u0001\u0000\u0000\u0000\u059f\u059e\u0001\u0000\u0000\u0000"+
		"\u05a0\u007f\u0001\u0000\u0000\u0000\u05a1\u05a2\u0003\u0262\u0131\u0000"+
		"\u05a2\u0081\u0001\u0000\u0000\u0000\u05a3\u05a4\u0005\u00ac\u0000\u0000"+
		"\u05a4\u05a5\u0003\u0234\u011a\u0000\u05a5\u05aa\u0005\u018e\u0000\u0000"+
		"\u05a6\u05a7\u0005\u0162\u0000\u0000\u05a7\u05a9\u0005\u01de\u0000\u0000"+
		"\u05a8\u05a6\u0001\u0000\u0000\u0000\u05a9\u05ac\u0001\u0000\u0000\u0000"+
		"\u05aa\u05a8\u0001\u0000\u0000\u0000\u05aa\u05ab\u0001\u0000\u0000\u0000"+
		"\u05ab\u05ae\u0001\u0000\u0000\u0000\u05ac\u05aa\u0001\u0000\u0000\u0000"+
		"\u05ad\u05af\u00032\u0019\u0000\u05ae\u05ad\u0001\u0000\u0000\u0000\u05ae"+
		"\u05af\u0001\u0000\u0000\u0000\u05af\u05b1\u0001\u0000\u0000\u0000\u05b0"+
		"\u05b2\u0003R)\u0000\u05b1\u05b0\u0001\u0000\u0000\u0000\u05b1\u05b2\u0001"+
		"\u0000\u0000\u0000\u05b2\u05b4\u0001\u0000\u0000\u0000\u05b3\u05b5\u0003"+
		"Z-\u0000\u05b4\u05b3\u0001\u0000\u0000\u0000\u05b4\u05b5\u0001\u0000\u0000"+
		"\u0000\u05b5\u05b7\u0001\u0000\u0000\u0000\u05b6\u05b8\u0003t:\u0000\u05b7"+
		"\u05b6\u0001\u0000\u0000\u0000\u05b7\u05b8\u0001\u0000\u0000\u0000\u05b8"+
		"\u05ba\u0001\u0000\u0000\u0000\u05b9\u05bb\u0003\u0084B\u0000\u05ba\u05b9"+
		"\u0001\u0000\u0000\u0000\u05ba\u05bb\u0001\u0000\u0000\u0000\u05bb\u05bd"+
		"\u0001\u0000\u0000\u0000\u05bc\u05be\u0003\u0086C\u0000\u05bd\u05bc\u0001"+
		"\u0000\u0000\u0000\u05bd\u05be\u0001\u0000\u0000\u0000\u05be\u05bf\u0001"+
		"\u0000\u0000\u0000\u05bf\u05c0\u0005\u0083\u0000\u0000\u05c0\u05c1\u0005"+
		"\u00ac\u0000\u0000\u05c1\u05c2\u0005\u0225\u0000\u0000\u05c2\u0083\u0001"+
		"\u0000\u0000\u0000\u05c3\u05c4\u0005\u01dd\u0000\u0000\u05c4\u05c5\u0003"+
		"\u0234\u011a\u0000\u05c5\u05ca\u0005\u018e\u0000\u0000\u05c6\u05c7\u0005"+
		"\u0162\u0000\u0000\u05c7\u05c9\u0005\u01de\u0000\u0000\u05c8\u05c6\u0001"+
		"\u0000\u0000\u0000\u05c9\u05cc\u0001\u0000\u0000\u0000\u05ca\u05c8\u0001"+
		"\u0000\u0000\u0000\u05ca\u05cb\u0001\u0000\u0000\u0000\u05cb\u05ce\u0001"+
		"\u0000\u0000\u0000\u05cc\u05ca\u0001\u0000\u0000\u0000\u05cd\u05cf\u0003"+
		"2\u0019\u0000\u05ce\u05cd\u0001\u0000\u0000\u0000\u05ce\u05cf\u0001\u0000"+
		"\u0000\u0000\u05cf\u05d1\u0001\u0000\u0000\u0000\u05d0\u05d2\u0003R)\u0000"+
		"\u05d1\u05d0\u0001\u0000\u0000\u0000\u05d1\u05d2\u0001\u0000\u0000\u0000"+
		"\u05d2\u05d4\u0001\u0000\u0000\u0000\u05d3\u05d5\u0003Z-\u0000\u05d4\u05d3"+
		"\u0001\u0000\u0000\u0000\u05d4\u05d5\u0001\u0000\u0000\u0000\u05d5\u05d7"+
		"\u0001\u0000\u0000\u0000\u05d6\u05d8\u0003\u0084B\u0000\u05d7\u05d6\u0001"+
		"\u0000\u0000\u0000\u05d7\u05d8\u0001\u0000\u0000\u0000\u05d8\u0085\u0001"+
		"\u0000\u0000\u0000\u05d9\u05de\u0005~\u0000\u0000\u05da\u05db\u0005\u0162"+
		"\u0000\u0000\u05db\u05dd\u0005\u01de\u0000\u0000\u05dc\u05da\u0001\u0000"+
		"\u0000\u0000\u05dd\u05e0\u0001\u0000\u0000\u0000\u05de\u05dc\u0001\u0000"+
		"\u0000\u0000\u05de\u05df\u0001\u0000\u0000\u0000\u05df\u05e2\u0001\u0000"+
		"\u0000\u0000\u05e0\u05de\u0001\u0000\u0000\u0000\u05e1\u05e3\u00032\u0019"+
		"\u0000\u05e2\u05e1\u0001\u0000\u0000\u0000\u05e2\u05e3\u0001\u0000\u0000"+
		"\u0000\u05e3\u05e5\u0001\u0000\u0000\u0000\u05e4\u05e6\u0003R)\u0000\u05e5"+
		"\u05e4\u0001\u0000\u0000\u0000\u05e5\u05e6\u0001\u0000\u0000\u0000\u05e6"+
		"\u05e8\u0001\u0000\u0000\u0000\u05e7\u05e9\u0003Z-\u0000\u05e8\u05e7\u0001"+
		"\u0000\u0000\u0000\u05e8\u05e9\u0001\u0000\u0000\u0000\u05e9\u0087\u0001"+
		"\u0000\u0000\u0000\u05ea\u05ec\u0005!\u0000\u0000\u05eb\u05ed\u0003\u008a"+
		"E\u0000\u05ec\u05eb\u0001\u0000\u0000\u0000\u05ec\u05ed\u0001\u0000\u0000"+
		"\u0000\u05ed\u05ef\u0001\u0000\u0000\u0000\u05ee\u05f0\u00032\u0019\u0000"+
		"\u05ef\u05ee\u0001\u0000\u0000\u0000\u05ef\u05f0\u0001\u0000\u0000\u0000"+
		"\u05f0\u05f2\u0001\u0000\u0000\u0000\u05f1\u05f3\u0003p8\u0000\u05f2\u05f1"+
		"\u0001\u0000\u0000\u0000\u05f2\u05f3\u0001\u0000\u0000\u0000\u05f3\u05f5"+
		"\u0001\u0000\u0000\u0000\u05f4\u05f6\u0003R)\u0000\u05f5\u05f4\u0001\u0000"+
		"\u0000\u0000\u05f5\u05f6\u0001\u0000\u0000\u0000\u05f6\u05f8\u0001\u0000"+
		"\u0000\u0000\u05f7\u05f9\u0003Z-\u0000\u05f8\u05f7\u0001\u0000\u0000\u0000"+
		"\u05f8\u05f9\u0001\u0000\u0000\u0000\u05f9\u05fa\u0001\u0000\u0000\u0000"+
		"\u05fa\u05fb\u0005\u0083\u0000\u0000\u05fb\u05fc\u0005\u0225\u0000\u0000"+
		"\u05fc\u0089\u0001\u0000\u0000\u0000\u05fd\u05fe\u0005\u0162\u0000\u0000"+
		"\u05fe\u05ff\u0005\u01de\u0000\u0000\u05ff\u0602\u0001\u0000\u0000\u0000"+
		"\u0600\u0601\u0005\u01db\u0000\u0000\u0601\u0603\u0005\u019b\u0000\u0000"+
		"\u0602\u0600\u0001\u0000\u0000\u0000\u0602\u0603\u0001\u0000\u0000\u0000"+
		"\u0603\u060c\u0001\u0000\u0000\u0000\u0604\u0605\u0005\u01db\u0000\u0000"+
		"\u0605\u0606\u0005\u019b\u0000\u0000\u0606\u0609\u0001\u0000\u0000\u0000"+
		"\u0607\u0608\u0005\u0162\u0000\u0000\u0608\u060a\u0005\u01de\u0000\u0000"+
		"\u0609\u0607\u0001\u0000\u0000\u0000\u0609\u060a\u0001\u0000\u0000\u0000"+
		"\u060a\u060c\u0001\u0000\u0000\u0000\u060b\u05fd\u0001\u0000\u0000\u0000"+
		"\u060b\u0604\u0001\u0000\u0000\u0000\u060c\u008b\u0001\u0000\u0000\u0000"+
		"\u060d\u060e\u0003H$\u0000\u060e\u060f\u0005\u0222\u0000\u0000\u060f\u0610"+
		"\u0003\u0262\u0131\u0000\u0610\u0611\u0005\u0225\u0000\u0000\u0611\u0620"+
		"\u0001\u0000\u0000\u0000\u0612\u0613\u0003H$\u0000\u0613\u0614\u0005\u0231"+
		"\u0000\u0000\u0614\u0615\u0003\u0262\u0131\u0000\u0615\u0616\u0005\u0232"+
		"\u0000\u0000\u0616\u0617\u0005\u0230\u0000\u0000\u0617\u0618\u0003\u0262"+
		"\u0131\u0000\u0618\u0619\u0005\u0225\u0000\u0000\u0619\u0620\u0001\u0000"+
		"\u0000\u0000\u061a\u061b\u0003H$\u0000\u061b\u061c\u0005\u0230\u0000\u0000"+
		"\u061c\u061d\u0003\u0262\u0131\u0000\u061d\u061e\u0005\u0225\u0000\u0000"+
		"\u061e\u0620\u0001\u0000\u0000\u0000\u061f\u060d\u0001\u0000\u0000\u0000"+
		"\u061f\u0612\u0001\u0000\u0000\u0000\u061f\u061a\u0001\u0000\u0000\u0000"+
		"\u0620\u008d\u0001\u0000\u0000\u0000\u0621\u0622\u0003H$\u0000\u0622\u0623"+
		"\u0005\u0230\u0000\u0000\u0623\u0624\u0003\u0174\u00ba\u0000\u0624\u0625"+
		"\u0005\u0225\u0000\u0000\u0625\u063b\u0001\u0000\u0000\u0000\u0626\u0627"+
		"\u0003H$\u0000\u0627\u0628\u0005\u0230\u0000\u0000\u0628\u0629\u0003\u0146"+
		"\u00a3\u0000\u0629\u062a\u0005\u0225\u0000\u0000\u062a\u063b\u0001\u0000"+
		"\u0000\u0000\u062b\u062c\u0003H$\u0000\u062c\u062d\u0005\u0230\u0000\u0000"+
		"\u062d\u062e\u0003\u0090H\u0000\u062e\u062f\u0005\u0225\u0000\u0000\u062f"+
		"\u063b\u0001\u0000\u0000\u0000\u0630\u0631\u0003H$\u0000\u0631\u0632\u0005"+
		"\u0230\u0000\u0000\u0632\u0633\u0005\u0223\u0000\u0000\u0633\u0634\u0005"+
		"\u0225\u0000\u0000\u0634\u063b\u0001\u0000\u0000\u0000\u0635\u0636\u0003"+
		"H$\u0000\u0636\u0637\u0005\u0230\u0000\u0000\u0637\u0638\u0005\u0215\u0000"+
		"\u0000\u0638\u0639\u0005\u0225\u0000\u0000\u0639\u063b\u0001\u0000\u0000"+
		"\u0000\u063a\u0621\u0001\u0000\u0000\u0000\u063a\u0626\u0001\u0000\u0000"+
		"\u0000\u063a\u062b\u0001\u0000\u0000\u0000\u063a\u0630\u0001\u0000\u0000"+
		"\u0000\u063a\u0635\u0001\u0000\u0000\u0000\u063b\u008f\u0001\u0000\u0000"+
		"\u0000\u063c\u063d\u0005\u01e8\u0000\u0000\u063d\u063e\u0005\u0219\u0000"+
		"\u0000\u063e\u063f\u0003<\u001e\u0000\u063f\u0642\u0005\u021a\u0000\u0000"+
		"\u0640\u0641\u0005\u01c2\u0000\u0000\u0641\u0643\u0005\u0119\u0000\u0000"+
		"\u0642\u0640\u0001\u0000\u0000\u0000\u0642\u0643\u0001\u0000\u0000\u0000"+
		"\u0643\u0645\u0001\u0000\u0000\u0000\u0644\u0646\u0003\u0094J\u0000\u0645"+
		"\u0644\u0001\u0000\u0000\u0000\u0645\u0646\u0001\u0000\u0000\u0000\u0646"+
		"\u0647\u0001\u0000\u0000\u0000\u0647\u0648\u0005\u0225\u0000\u0000\u0648"+
		"\u0091\u0001\u0000\u0000\u0000\u0649\u064a\u0003\u0300\u0180\u0000\u064a"+
		"\u064b\u0005\u0212\u0000\u0000\u064b\u064d\u0001\u0000\u0000\u0000\u064c"+
		"\u0649\u0001\u0000\u0000\u0000\u064c\u064d\u0001\u0000\u0000\u0000\u064d"+
		"\u064e\u0001\u0000\u0000\u0000\u064e\u064f\u0003\u0360\u01b0\u0000\u064f"+
		"\u0093\u0001\u0000\u0000\u0000\u0650\u0651\u0005\u0015\u0000\u0000\u0651"+
		"\u0652\u0003\u0092I\u0000\u0652\u0653\u0005\u0219\u0000\u0000\u0653\u0654"+
		"\u0003\u0096K\u0000\u0654\u0655\u0005\u021a\u0000\u0000\u0655\u0095\u0001"+
		"\u0000\u0000\u0000\u0656\u065b\u0003\"\u0011\u0000\u0657\u0658\u0005\u021f"+
		"\u0000\u0000\u0658\u065a\u0003\"\u0011\u0000\u0659\u0657\u0001\u0000\u0000"+
		"\u0000\u065a\u065d\u0001\u0000\u0000\u0000\u065b\u0659\u0001\u0000\u0000"+
		"\u0000\u065b\u065c\u0001\u0000\u0000\u0000\u065c\u0097\u0001\u0000\u0000"+
		"\u0000\u065d\u065b\u0001\u0000\u0000\u0000\u065e\u065f\u00054\u0000\u0000"+
		"\u065f\u0660\u0003\u031c\u018e\u0000\u0660\u0661\u0005\u0219\u0000\u0000"+
		"\u0661\u0662\u0003\u009aM\u0000\u0662\u0667\u0005\u021a\u0000\u0000\u0663"+
		"\u0664\u0005\u01c2\u0000\u0000\u0664\u0666\u0005\u01df\u0000\u0000\u0665"+
		"\u0663\u0001\u0000\u0000\u0000\u0666\u0669\u0001\u0000\u0000\u0000\u0667"+
		"\u0665\u0001\u0000\u0000\u0000\u0667\u0668\u0001\u0000\u0000\u0000\u0668"+
		"\u066a\u0001\u0000\u0000\u0000\u0669\u0667\u0001\u0000\u0000\u0000\u066a"+
		"\u066b\u0005\u0225\u0000\u0000\u066b\u0099\u0001\u0000\u0000\u0000\u066c"+
		"\u0671\u0003\u009cN\u0000\u066d\u066e\u0005\u021f\u0000\u0000\u066e\u0670"+
		"\u0003\u009cN\u0000\u066f\u066d\u0001\u0000\u0000\u0000\u0670\u0673\u0001"+
		"\u0000\u0000\u0000\u0671\u066f\u0001\u0000\u0000\u0000\u0671\u0672\u0001"+
		"\u0000\u0000\u0000\u0672\u009b\u0001\u0000\u0000\u0000\u0673\u0671\u0001"+
		"\u0000\u0000";
	
	/** The Constant _serializedATNSegment1. */
	private static final String _serializedATNSegment1 =
		"\u0000\u0674\u0678\u0003\u0360\u01b0\u0000\u0675\u0678\u0003\u0346\u01a3"+
		"\u0000\u0676\u0678\u0003\u009eO\u0000\u0677\u0674\u0001\u0000\u0000\u0000"+
		"\u0677\u0675\u0001\u0000\u0000\u0000\u0677\u0676\u0001\u0000\u0000\u0000"+
		"\u0678\u009d\u0001\u0000\u0000\u0000\u0679\u067a\u0003\u0360\u01b0\u0000"+
		"\u067a\u067b\u0005\u0003\u0000\u0000\u067b\u067c\u0003\u0360\u01b0\u0000"+
		"\u067c\u0692\u0001\u0000\u0000\u0000\u067d\u067e\u0003\u0360\u01b0\u0000"+
		"\u067e\u067f\u0005\u0003\u0000\u0000\u067f\u0680\u0003\u0346\u01a3\u0000"+
		"\u0680\u0692\u0001\u0000\u0000\u0000\u0681\u0682\u0003\u0360\u01b0\u0000"+
		"\u0682\u0683\u0005\u0003\u0000\u0000\u0683\u0684\u0003\u0122\u0091\u0000"+
		"\u0684\u0692\u0001\u0000\u0000\u0000\u0685\u0686\u0003\u0360\u01b0\u0000"+
		"\u0686\u0687\u0005\u0003\u0000\u0000\u0687\u0688\u0005\u0215\u0000\u0000"+
		"\u0688\u0692\u0001\u0000\u0000\u0000\u0689\u068a\u0003\u0360\u01b0\u0000"+
		"\u068a\u068b\u0005\u0003\u0000\u0000\u068b\u068c\u0005\u0108\u0000\u0000"+
		"\u068c\u0692\u0001\u0000\u0000\u0000\u068d\u068e\u0003\u0360\u01b0\u0000"+
		"\u068e\u068f\u0005\u0003\u0000\u0000\u068f\u0690\u0003\u0262\u0131\u0000"+
		"\u0690\u0692\u0001\u0000\u0000\u0000\u0691\u0679\u0001\u0000\u0000\u0000"+
		"\u0691\u067d\u0001\u0000\u0000\u0000\u0691\u0681\u0001\u0000\u0000\u0000"+
		"\u0691\u0685\u0001\u0000\u0000\u0000\u0691\u0689\u0001\u0000\u0000\u0000"+
		"\u0691\u068d\u0001\u0000\u0000\u0000\u0692\u009f\u0001\u0000\u0000\u0000"+
		"\u0693\u0695\u00032\u0019\u0000\u0694\u0693\u0001\u0000\u0000\u0000\u0694"+
		"\u0695\u0001\u0000\u0000\u0000\u0695\u0697\u0001\u0000\u0000\u0000\u0696"+
		"\u0698\u0003R)\u0000\u0697\u0696\u0001\u0000\u0000\u0000\u0697\u0698\u0001"+
		"\u0000\u0000\u0000\u0698\u0699\u0001\u0000\u0000\u0000\u0699\u069a\u0003"+
		"Z-\u0000\u069a\u00a1\u0001\u0000\u0000\u0000\u069b\u069c\u0003\u011e\u008f"+
		"\u0000\u069c\u00a3\u0001\u0000\u0000\u0000\u069d\u069e\u0003\\.\u0000"+
		"\u069e\u00a5\u0001\u0000\u0000\u0000\u069f\u06a0\u0003\u0360\u01b0\u0000"+
		"\u06a0\u00a7\u0001\u0000\u0000\u0000\u06a1\u06a2\u0005\u009d\u0000\u0000"+
		"\u06a2\u06a3\u0005|\u0000\u0000\u06a3\u06a4\u0005\u014f\u0000\u0000\u06a4"+
		"\u00a9\u0001\u0000\u0000\u0000\u06a5\u06a6\u0007\u0005\u0000\u0000\u06a6"+
		"\u06b3\u0005\u0019\u0000\u0000\u06a7\u06b4\u0003\u00acV\u0000\u06a8\u06a9"+
		"\u0005\u0219\u0000\u0000\u06a9\u06ae\u0003\u00acV\u0000\u06aa\u06ab\u0005"+
		"\u021f\u0000\u0000\u06ab\u06ad\u0003\u00acV\u0000\u06ac\u06aa\u0001\u0000"+
		"\u0000\u0000\u06ad\u06b0\u0001\u0000\u0000\u0000\u06ae\u06ac\u0001\u0000"+
		"\u0000\u0000\u06ae\u06af\u0001\u0000\u0000\u0000\u06af\u06b1\u0001\u0000"+
		"\u0000\u0000\u06b0\u06ae\u0001\u0000\u0000\u0000\u06b1\u06b2\u0005\u021a"+
		"\u0000\u0000\u06b2\u06b4\u0001\u0000\u0000\u0000\u06b3\u06a7\u0001\u0000"+
		"\u0000\u0000\u06b3\u06a8\u0001\u0000\u0000\u0000\u06b4\u00ab\u0001\u0000"+
		"\u0000\u0000\u06b5\u06b7\u0003\u02f8\u017c\u0000\u06b6\u06b8\u0003\u033e"+
		"\u019f\u0000\u06b7\u06b6\u0001\u0000\u0000\u0000\u06b7\u06b8\u0001\u0000"+
		"\u0000\u0000\u06b8\u00ad\u0001\u0000\u0000\u0000\u06b9\u06bf\u0005\u00ee"+
		"\u0000\u0000\u06ba\u06bb\u0005\u00d8\u0000\u0000\u06bb\u06c0\u0003\u0262"+
		"\u0131\u0000\u06bc\u06bd\u0005}\u0000\u0000\u06bd\u06be\u0005\u01a2\u0000"+
		"\u0000\u06be\u06c0\u0003\u033e\u019f\u0000\u06bf\u06ba\u0001\u0000\u0000"+
		"\u0000\u06bf\u06bc\u0001\u0000\u0000\u0000\u06c0\u00af\u0001\u0000\u0000"+
		"\u0000\u06c1\u06d2\u0005\u00c4\u0000\u0000\u06c2\u06cc\u00056\u0000\u0000"+
		"\u06c3\u06c4\u0005R\u0000\u0000\u06c4\u06c5\u0005\u0199\u0000\u0000\u06c5"+
		"\u06cd\u0005\u0187\u0000\u0000\u06c6\u06c8\u0005\u0106\u0000\u0000\u06c7"+
		"\u06c6\u0001\u0000\u0000\u0000\u06c7\u06c8\u0001\u0000\u0000\u0000\u06c8"+
		"\u06c9\u0001\u0000\u0000\u0000\u06c9\u06ca\u0005\u00b1\u0000\u0000\u06ca"+
		"\u06cb\u0005\u018b\u0000\u0000\u06cb\u06cd\u0005_\u0000\u0000\u06cc\u06c3"+
		"\u0001\u0000\u0000\u0000\u06cc\u06c7\u0001\u0000\u0000\u0000\u06cc\u06cd"+
		"\u0001\u0000\u0000\u0000\u06cd\u06cf\u0001\u0000\u0000\u0000\u06ce\u06d0"+
		"\u0003\u00b2Y\u0000\u06cf\u06ce\u0001\u0000\u0000\u0000\u06cf\u06d0\u0001"+
		"\u0000\u0000\u0000\u06d0\u06d2\u0001\u0000\u0000\u0000\u06d1\u06c1\u0001"+
		"\u0000\u0000\u0000\u06d1\u06c2\u0001\u0000\u0000\u0000\u06d2\u00b1\u0001"+
		"\u0000\u0000\u0000\u06d3\u06d5\u0005\u009f\u0000\u0000\u06d4\u06d3\u0001"+
		"\u0000\u0000\u0000\u06d4\u06d5\u0001\u0000\u0000\u0000\u06d5\u06d6\u0001"+
		"\u0000\u0000\u0000\u06d6\u06d7\u0005\u008b\u0000\u0000\u06d7\u06d8\u0005"+
		"\u00c3\u0000\u0000\u06d8\u06d9\u0003\u032e\u0197\u0000\u06d9\u00b3\u0001"+
		"\u0000\u0000\u0000\u06da\u06dd\u0003\u0314\u018a\u0000\u06db\u06dc\u0005"+
		"\u0110\u0000\u0000\u06dc\u06de\u0005\u0215\u0000\u0000\u06dd\u06db\u0001"+
		"\u0000\u0000\u0000\u06dd\u06de\u0001\u0000\u0000\u0000\u06de\u06e0\u0001"+
		"\u0000\u0000\u0000\u06df\u06e1\u0003\u00b6[\u0000\u06e0\u06df\u0001\u0000"+
		"\u0000\u0000\u06e0\u06e1\u0001\u0000\u0000\u0000\u06e1\u00b5\u0001\u0000"+
		"\u0000\u0000\u06e2\u06e4\u0003\u00eew\u0000\u06e3\u06e2\u0001\u0000\u0000"+
		"\u0000\u06e3\u06e4\u0001\u0000\u0000\u0000\u06e4\u06e7\u0001\u0000\u0000"+
		"\u0000\u06e5\u06e8\u0003\u00b8\\\u0000\u06e6\u06e8\u0003\u00ba]\u0000"+
		"\u06e7\u06e5\u0001\u0000\u0000\u0000\u06e7\u06e6\u0001\u0000\u0000\u0000"+
		"\u06e8\u06ea\u0001\u0000\u0000\u0000\u06e9\u06eb\u0003\u00be_\u0000\u06ea"+
		"\u06e9\u0001\u0000\u0000\u0000\u06ea\u06eb\u0001\u0000\u0000\u0000\u06eb"+
		"\u06f7\u0001\u0000\u0000\u0000\u06ec\u06ed\u0005\u0219\u0000\u0000\u06ed"+
		"\u06f2\u0003\u00d0h\u0000\u06ee\u06ef\u0005\u021f\u0000\u0000\u06ef\u06f1"+
		"\u0003\u00d0h\u0000\u06f0\u06ee\u0001\u0000\u0000\u0000\u06f1\u06f4\u0001"+
		"\u0000\u0000\u0000\u06f2\u06f0\u0001\u0000\u0000\u0000\u06f2\u06f3\u0001"+
		"\u0000\u0000\u0000\u06f3\u06f5\u0001\u0000\u0000\u0000\u06f4\u06f2\u0001"+
		"\u0000\u0000\u0000\u06f5\u06f6\u0005\u021a\u0000\u0000\u06f6\u06f8\u0001"+
		"\u0000\u0000\u0000\u06f7\u06ec\u0001\u0000\u0000\u0000\u06f7\u06f8\u0001"+
		"\u0000\u0000\u0000\u06f8\u06fc\u0001\u0000\u0000\u0000\u06f9\u06fb\u0003"+
		"\u00ceg\u0000\u06fa\u06f9\u0001\u0000\u0000\u0000\u06fb\u06fe\u0001\u0000"+
		"\u0000\u0000\u06fc\u06fa\u0001\u0000\u0000\u0000\u06fc\u06fd\u0001\u0000"+
		"\u0000\u0000\u06fd\u00b7\u0001\u0000\u0000\u0000\u06fe\u06fc\u0001\u0000"+
		"\u0000\u0000\u06ff\u0703\u0007\u0006\u0000\u0000\u0700\u0704\u0005\u010d"+
		"\u0000\u0000\u0701\u0704\u0003\u011a\u008d\u0000\u0702\u0704\u0003\u00bc"+
		"^\u0000\u0703\u0700\u0001\u0000\u0000\u0000\u0703\u0701\u0001\u0000\u0000"+
		"\u0000\u0703\u0702\u0001\u0000\u0000\u0000\u0704\u00b9\u0001\u0000\u0000"+
		"\u0000\u0705\u0706\u0005\u01a4\u0000\u0000\u0706\u0707\u0003\u033e\u019f"+
		"\u0000\u0707\u00bb\u0001\u0000\u0000\u0000\u0708\u0709\u0005\u018b\u0000"+
		"\u0000\u0709\u070a\u0005\u010e\u0000\u0000\u070a\u070d\u0003\u033e\u019f"+
		"\u0000\u070b\u070c\u0005\u0106\u0000\u0000\u070c\u070e\u0005\u0108\u0000"+
		"\u0000\u070d\u070b\u0001\u0000\u0000\u0000\u070d\u070e\u0001\u0000\u0000"+
		"\u0000\u070e\u00bd\u0001\u0000\u0000\u0000\u070f\u0710\u0005\u0092\u0000"+
		"\u0000\u0710\u0711\u0005\u00f1\u0000\u0000\u0711\u0712\u0003\u0262\u0131"+
		"\u0000\u0712\u0713\u0005\u00cc\u0000\u0000\u0713\u0714\u0005\u00c9\u0000"+
		"\u0000\u0714\u0715\u0005\u01af\u0000\u0000\u0715\u0716\u0007\u0007\u0000"+
		"\u0000\u0716\u00bf\u0001\u0000\u0000\u0000\u0717\u0718\u0005*\u0000\u0000"+
		"\u0718\u0719\u0003\u0314\u018a\u0000\u0719\u071a\u0007\u0006\u0000\u0000"+
		"\u071a\u071f\u0003\u00c2a\u0000\u071b\u071c\u0005\u021f\u0000\u0000\u071c"+
		"\u071e\u0003\u00c2a\u0000\u071d\u071b\u0001\u0000\u0000\u0000\u071e\u0721"+
		"\u0001\u0000\u0000\u0000\u071f\u071d\u0001\u0000\u0000\u0000\u071f\u0720"+
		"\u0001\u0000\u0000\u0000\u0720\u0722\u0001\u0000\u0000\u0000\u0721\u071f"+
		"\u0001\u0000\u0000\u0000\u0722\u0723\u0005\u0083\u0000\u0000\u0723\u00c1"+
		"\u0001\u0000\u0000\u0000\u0724\u0727\u0003\u00c4b\u0000\u0725\u0727\u0003"+
		"\u00c6c\u0000\u0726\u0724\u0001\u0000\u0000\u0000\u0726\u0725\u0001\u0000"+
		"\u0000\u0000\u0727\u00c3\u0001\u0000\u0000\u0000\u0728\u0729\u0007\b\u0000"+
		"\u0000\u0729\u072a\u0005\u00e6\u0000\u0000\u072a\u072b\u0003\u00cae\u0000"+
		"\u072b\u00c5\u0001\u0000\u0000\u0000\u072c\u0730\u0007\t\u0000\u0000\u072d"+
		"\u0731\u0003\u00c8d\u0000\u072e\u0731\u0003\u00cae\u0000\u072f\u0731\u0003"+
		"\u00ccf\u0000\u0730\u072d\u0001\u0000\u0000\u0000\u0730\u072e\u0001\u0000"+
		"\u0000\u0000\u0730\u072f\u0001\u0000\u0000\u0000\u0731\u00c7\u0001\u0000"+
		"\u0000\u0000\u0732\u0733\u0005\u0133\u0000\u0000\u0733\u0734\u0003\u031c"+
		"\u018e\u0000\u0734\u0735\u0005\u0219\u0000\u0000\u0735\u073a\u0003\u00e6"+
		"s\u0000\u0736\u0737\u0005\u021f\u0000\u0000\u0737\u0739\u0003\u00e6s\u0000"+
		"\u0738\u0736\u0001\u0000\u0000\u0000\u0739\u073c\u0001\u0000\u0000\u0000"+
		"\u073a\u0738\u0001\u0000\u0000\u0000\u073a\u073b\u0001\u0000\u0000\u0000"+
		"\u073b\u073d\u0001\u0000\u0000\u0000\u073c\u073a\u0001\u0000\u0000\u0000"+
		"\u073d\u073e\u0005\u021a\u0000\u0000\u073e\u074c\u0007\u0006\u0000\u0000"+
		"\u073f\u074d\u0003\u00f2y\u0000\u0740\u0742\u0005i\u0000\u0000\u0741\u0740"+
		"\u0001\u0000\u0000\u0000\u0741\u0742\u0001\u0000\u0000\u0000\u0742\u0746"+
		"\u0001\u0000\u0000\u0000\u0743\u0745\u0003\u00fe\u007f\u0000\u0744\u0743"+
		"\u0001\u0000\u0000\u0000\u0745\u0748\u0001\u0000\u0000\u0000\u0746\u0744"+
		"\u0001\u0000\u0000\u0000\u0746\u0747\u0001\u0000\u0000\u0000\u0747\u0749"+
		"\u0001\u0000\u0000\u0000\u0748\u0746\u0001\u0000\u0000\u0000\u0749\u074a"+
		"\u0003\u0148\u00a4\u0000\u074a\u074b\u0005\u0225\u0000\u0000\u074b\u074d"+
		"\u0001\u0000\u0000\u0000\u074c\u073f\u0001\u0000\u0000\u0000\u074c\u0741"+
		"\u0001\u0000\u0000\u0000\u074d\u00c9\u0001\u0000\u0000\u0000\u074e\u074f"+
		"\u0005\u00a2\u0000\u0000\u074f\u075b\u0003\u031a\u018d\u0000\u0750\u0751"+
		"\u0005\u0219\u0000\u0000\u0751\u0756\u0003\u00e6s\u0000\u0752\u0753\u0005"+
		"\u021f\u0000\u0000\u0753\u0755\u0003\u00e6s\u0000\u0754\u0752\u0001\u0000"+
		"\u0000\u0000\u0755\u0758\u0001\u0000\u0000\u0000\u0756\u0754\u0001\u0000"+
		"\u0000\u0000\u0756\u0757\u0001\u0000\u0000\u0000\u0757\u0759\u0001\u0000"+
		"\u0000\u0000\u0758\u0756\u0001\u0000\u0000\u0000\u0759\u075a\u0005\u021a"+
		"\u0000\u0000\u075a\u075c\u0001\u0000\u0000\u0000\u075b\u0750\u0001\u0000"+
		"\u0000\u0000\u075b\u075c\u0001\u0000\u0000\u0000\u075c\u075d\u0001\u0000"+
		"\u0000\u0000\u075d\u075e\u0005\u0146\u0000\u0000\u075e\u075f\u0003\u033e"+
		"\u019f\u0000\u075f\u076d\u0007\u0006\u0000\u0000\u0760\u076e\u0003\u00f2"+
		"y\u0000\u0761\u0763\u0005i\u0000\u0000\u0762\u0761\u0001\u0000\u0000\u0000"+
		"\u0762\u0763\u0001\u0000\u0000\u0000\u0763\u0767\u0001\u0000\u0000\u0000"+
		"\u0764\u0766\u0003\u00fe\u007f\u0000\u0765\u0764\u0001\u0000\u0000\u0000"+
		"\u0766\u0769\u0001\u0000\u0000\u0000\u0767\u0765\u0001\u0000\u0000\u0000"+
		"\u0767\u0768\u0001\u0000\u0000\u0000\u0768\u076a\u0001\u0000\u0000\u0000"+
		"\u0769\u0767\u0001\u0000\u0000\u0000\u076a\u076b\u0003\u0148\u00a4\u0000"+
		"\u076b\u076c\u0005\u0225\u0000\u0000\u076c\u076e\u0001\u0000\u0000\u0000"+
		"\u076d\u0760\u0001\u0000\u0000\u0000\u076d\u0762\u0001\u0000\u0000\u0000"+
		"\u076e\u00cb\u0001\u0000\u0000\u0000\u076f\u0771\u0005\u0097\u0000\u0000"+
		"\u0770\u076f\u0001\u0000\u0000\u0000\u0770\u0771\u0001\u0000\u0000\u0000"+
		"\u0771\u0773\u0001\u0000\u0000\u0000\u0772\u0774\u0005\u00bd\u0000\u0000"+
		"\u0773\u0772\u0001\u0000\u0000\u0000\u0773\u0774\u0001\u0000\u0000\u0000"+
		"\u0774\u0775\u0001\u0000\u0000\u0000\u0775\u0776\u0005N\u0000\u0000\u0776"+
		"\u0777\u0005\u00a2\u0000\u0000\u0777\u0789\u0003\u033e\u019f\u0000\u0778"+
		"\u0779\u0005\u0219\u0000\u0000\u0779\u077a\u0005\u0160\u0000\u0000\u077a"+
		"\u077b\u0005\u00af\u0000\u0000\u077b\u077c\u0005\u011b\u0000\u0000\u077c"+
		"\u077d\u0003\u033e\u019f\u0000\u077d\u077e\u0005\u021f\u0000\u0000\u077e"+
		"\u077f\u0001\u0000\u0000\u0000\u077f\u0784\u0003\u00e6s\u0000\u0780\u0781"+
		"\u0005\u021f\u0000\u0000\u0781\u0783\u0003\u00e6s\u0000\u0782\u0780\u0001"+
		"\u0000\u0000\u0000\u0783\u0786\u0001\u0000\u0000\u0000\u0784\u0782\u0001"+
		"\u0000\u0000\u0000\u0784\u0785\u0001\u0000\u0000\u0000\u0785\u0787\u0001"+
		"\u0000\u0000\u0000\u0786\u0784\u0001\u0000\u0000\u0000\u0787\u0788\u0005"+
		"\u021a\u0000\u0000\u0788\u078a\u0001\u0000\u0000\u0000\u0789\u0778\u0001"+
		"\u0000\u0000\u0000\u0789\u078a\u0001\u0000\u0000\u0000\u078a\u078b\u0001"+
		"\u0000\u0000\u0000\u078b\u078c\u0005\u0146\u0000\u0000\u078c\u078d\u0005"+
		"\u0160\u0000\u0000\u078d\u078e\u0005\u0015\u0000\u0000\u078e\u078f\u0005"+
		"\u0144\u0000\u0000\u078f\u079d\u0007\u0006\u0000\u0000\u0790\u079e\u0003"+
		"\u00f2y\u0000\u0791\u0793\u0005i\u0000\u0000\u0792\u0791\u0001\u0000\u0000"+
		"\u0000\u0792\u0793\u0001\u0000\u0000\u0000\u0793\u0797\u0001\u0000\u0000"+
		"\u0000\u0794\u0796\u0003\u00fe\u007f\u0000\u0795\u0794\u0001\u0000\u0000"+
		"\u0000\u0796\u0799\u0001\u0000\u0000\u0000\u0797\u0795\u0001\u0000\u0000"+
		"\u0000\u0797\u0798\u0001\u0000\u0000\u0000\u0798\u079a\u0001\u0000\u0000"+
		"\u0000\u0799\u0797\u0001\u0000\u0000\u0000\u079a\u079b\u0003\u0148\u00a4"+
		"\u0000\u079b\u079c\u0005\u0225\u0000\u0000\u079c\u079e\u0001\u0000\u0000"+
		"\u0000\u079d\u0790\u0001\u0000\u0000\u0000\u079d\u0792\u0001\u0000\u0000"+
		"\u0000\u079e\u00cd\u0001\u0000\u0000\u0000\u079f\u07a1\u0005\u0106\u0000"+
		"\u0000\u07a0\u079f\u0001\u0000\u0000\u0000\u07a0\u07a1\u0001\u0000\u0000"+
		"\u0000\u07a1\u07a2\u0001\u0000\u0000\u0000\u07a2\u07a3\u0007\n\u0000\u0000"+
		"\u07a3\u00cf\u0001\u0000\u0000\u0000\u07a4\u07a5\u0003\u035e\u01af\u0000"+
		"\u07a5\u07a7\u0003\u033e\u019f\u0000\u07a6\u07a8\u0003\u00d2i\u0000\u07a7"+
		"\u07a6\u0001\u0000\u0000\u0000\u07a7\u07a8\u0001\u0000\u0000\u0000\u07a8"+
		"\u07ab\u0001\u0000\u0000\u0000\u07a9\u07ab\u0003\u00d4j\u0000\u07aa\u07a4"+
		"\u0001\u0000\u0000\u0000\u07aa\u07a9\u0001\u0000\u0000\u0000\u07ab\u00d1"+
		"\u0001\u0000\u0000\u0000\u07ac\u07ad\u0005\u0092\u0000\u0000\u07ad\u07ae"+
		"\u0005\u00f1\u0000\u0000\u07ae\u07af\u0003\u0262\u0131\u0000\u07af\u00d3"+
		"\u0001\u0000\u0000\u0000\u07b0\u07b2\u0003\u00ceg\u0000\u07b1\u07b0\u0001"+
		"\u0000\u0000\u0000\u07b1\u07b2\u0001\u0000\u0000\u0000\u07b2\u07b4\u0001"+
		"\u0000\u0000\u0000\u07b3\u07b5\u0003\u00d6k\u0000\u07b4\u07b3\u0001\u0000"+
		"\u0000\u0000\u07b5\u07b6\u0001\u0000\u0000\u0000\u07b6\u07b4\u0001\u0000"+
		"\u0000\u0000\u07b6\u07b7\u0001\u0000\u0000\u0000\u07b7\u07ba\u0001\u0000"+
		"\u0000\u0000\u07b8\u07b9\u0005\u021f\u0000\u0000\u07b9\u07bb\u0003\u00e2"+
		"q\u0000\u07ba\u07b8\u0001\u0000\u0000\u0000\u07ba\u07bb\u0001\u0000\u0000"+
		"\u0000\u07bb\u00d5\u0001\u0000\u0000\u0000\u07bc\u07c0\u0003\u00d8l\u0000"+
		"\u07bd\u07c0\u0003\u00deo\u0000\u07be\u07c0\u0003\u00e0p\u0000\u07bf\u07bc"+
		"\u0001\u0000\u0000\u0000\u07bf\u07bd\u0001\u0000\u0000\u0000\u07bf\u07be"+
		"\u0001\u0000\u0000\u0000\u07c0\u00d7\u0001\u0000\u0000\u0000\u07c1\u07c4"+
		"\u0007\t\u0000\u0000\u07c2\u07c5\u0003\u00dam\u0000\u07c3\u07c5\u0003"+
		"\u00dcn\u0000\u07c4\u07c2\u0001\u0000\u0000\u0000\u07c4\u07c3\u0001\u0000"+
		"\u0000\u0000\u07c5\u00d9\u0001\u0000\u0000\u0000\u07c6\u07c7\u0005\u0133"+
		"\u0000\u0000\u07c7\u07c8\u0003\u031c\u018e\u0000\u07c8\u07c9\u0005\u0219"+
		"\u0000\u0000\u07c9\u07ce\u0003\u00e6s\u0000\u07ca\u07cb\u0005\u021f\u0000"+
		"\u0000\u07cb\u07cd\u0003\u00e6s\u0000\u07cc\u07ca\u0001\u0000\u0000\u0000"+
		"\u07cd\u07d0\u0001\u0000\u0000\u0000\u07ce\u07cc\u0001\u0000\u0000\u0000"+
		"\u07ce\u07cf\u0001\u0000\u0000\u0000\u07cf\u07d1\u0001\u0000\u0000\u0000"+
		"\u07d0\u07ce\u0001\u0000\u0000\u0000\u07d1\u07d4\u0005\u021a\u0000\u0000"+
		"\u07d2\u07d3\u0007\u0006\u0000\u0000\u07d3\u07d5\u0003\u00f2y\u0000\u07d4"+
		"\u07d2\u0001\u0000\u0000\u0000\u07d4\u07d5\u0001\u0000\u0000\u0000\u07d5"+
		"\u00db\u0001\u0000\u0000\u0000\u07d6\u07d7\u0005\u00a2\u0000\u0000\u07d7"+
		"\u07e3\u0003\u031a\u018d\u0000\u07d8\u07d9\u0005\u0219\u0000\u0000\u07d9"+
		"\u07de\u0003\u00e6s\u0000\u07da\u07db\u0005\u021f\u0000\u0000\u07db\u07dd"+
		"\u0003\u00e6s\u0000\u07dc\u07da\u0001\u0000\u0000\u0000\u07dd\u07e0\u0001"+
		"\u0000\u0000\u0000\u07de\u07dc\u0001\u0000\u0000\u0000\u07de\u07df\u0001"+
		"\u0000\u0000\u0000\u07df\u07e1\u0001\u0000\u0000\u0000\u07e0\u07de\u0001"+
		"\u0000\u0000\u0000\u07e1\u07e2\u0005\u021a\u0000\u0000\u07e2\u07e4\u0001"+
		"\u0000\u0000\u0000\u07e3\u07d8\u0001\u0000\u0000\u0000\u07e3\u07e4\u0001"+
		"\u0000\u0000\u0000\u07e4\u07e5\u0001\u0000\u0000\u0000\u07e5\u07ea\u0005"+
		"\u0146\u0000\u0000\u07e6\u07eb\u0003\u033e\u019f\u0000\u07e7\u07e8\u0005"+
		"\u0160\u0000\u0000\u07e8\u07e9\u0005\u0015\u0000\u0000\u07e9\u07eb\u0005"+
		"\u0144\u0000\u0000\u07ea\u07e6\u0001\u0000\u0000\u0000\u07ea\u07e7\u0001"+
		"\u0000\u0000\u0000\u07eb\u07f4\u0001\u0000\u0000\u0000\u07ec\u07ed\u0007"+
		"\u0006\u0000\u0000\u07ed\u07f5\u0003\u00f2y\u0000\u07ee\u07f0\u0005\u0092"+
		"\u0000\u0000\u07ef\u07f1\u0005\u01b5\u0000\u0000\u07f0\u07ef\u0001\u0000"+
		"\u0000\u0000\u07f0\u07f1\u0001\u0000\u0000\u0000\u07f1\u07f2\u0001\u0000"+
		"\u0000\u0000\u07f2\u07f3\u0005\u00f1\u0000\u0000\u07f3\u07f5\u0003\u0262"+
		"\u0131\u0000\u07f4\u07ec\u0001\u0000\u0000\u0000\u07f4\u07ee\u0001\u0000"+
		"\u0000\u0000\u07f4\u07f5\u0001\u0000\u0000\u0000\u07f5\u00dd\u0001\u0000"+
		"\u0000\u0000\u07f6\u07f8\u0005\u0097\u0000\u0000\u07f7\u07f6\u0001\u0000"+
		"\u0000\u0000\u07f7\u07f8\u0001\u0000\u0000\u0000\u07f8\u07fa\u0001\u0000"+
		"\u0000\u0000\u07f9\u07fb\u0005\u00bd\u0000\u0000\u07fa\u07f9\u0001\u0000"+
		"\u0000\u0000\u07fa\u07fb\u0001\u0000\u0000\u0000\u07fb\u07fc\u0001\u0000"+
		"\u0000\u0000\u07fc\u07fd\u0005N\u0000\u0000\u07fd\u07fe\u0005\u00a2\u0000"+
		"\u0000\u07fe\u0810\u0003\u033e\u019f\u0000\u07ff\u0800\u0005\u0219\u0000"+
		"\u0000\u0800\u0801\u0005\u0160\u0000\u0000\u0801\u0802\u0005\u00af\u0000"+
		"\u0000\u0802\u0803\u0005\u011b\u0000\u0000\u0803\u0804\u0003\u033e\u019f"+
		"\u0000\u0804\u0805\u0005\u021f\u0000\u0000\u0805\u0806\u0001\u0000\u0000"+
		"\u0000\u0806\u080b\u0003\u00e6s\u0000\u0807\u0808\u0005\u021f\u0000\u0000"+
		"\u0808\u080a\u0003\u00e6s\u0000\u0809\u0807\u0001\u0000\u0000\u0000\u080a"+
		"\u080d\u0001\u0000\u0000\u0000\u080b\u0809\u0001\u0000\u0000\u0000\u080b"+
		"\u080c\u0001\u0000\u0000\u0000\u080c\u080e\u0001\u0000\u0000\u0000\u080d"+
		"\u080b\u0001\u0000\u0000\u0000\u080e\u080f\u0005\u021a\u0000\u0000\u080f"+
		"\u0811\u0001\u0000\u0000\u0000\u0810\u07ff\u0001\u0000\u0000\u0000\u0810"+
		"\u0811\u0001\u0000\u0000\u0000\u0811\u0812\u0001\u0000\u0000\u0000\u0812"+
		"\u0813\u0005\u0146\u0000\u0000\u0813\u0814\u0005\u0160\u0000\u0000\u0814"+
		"\u0815\u0005\u0015\u0000\u0000\u0815\u0818\u0005\u0144\u0000\u0000\u0816"+
		"\u0817\u0007\u0006\u0000\u0000\u0817\u0819\u0003\u00f2y\u0000\u0818\u0816"+
		"\u0001\u0000\u0000\u0000\u0818\u0819\u0001\u0000\u0000\u0000\u0819\u00df"+
		"\u0001\u0000\u0000\u0000\u081a\u081b\u0007\b\u0000\u0000\u081b\u081c\u0005"+
		"\u00e6\u0000\u0000\u081c\u081d\u0003\u00dcn\u0000\u081d\u00e1\u0001\u0000"+
		"\u0000\u0000\u081e\u081f\u0005\u012e\u0000\u0000\u081f\u0820\u0005\u0143"+
		"\u0000\u0000\u0820\u0821\u0005\u0219\u0000\u0000\u0821\u0826\u0003\u00e4"+
		"r\u0000\u0822\u0823\u0005\u021f\u0000\u0000\u0823\u0825\u0003\u00e4r\u0000"+
		"\u0824\u0822\u0001\u0000\u0000\u0000\u0825\u0828\u0001\u0000\u0000\u0000"+
		"\u0826\u0824\u0001\u0000\u0000\u0000\u0826\u0827\u0001\u0000\u0000\u0000"+
		"\u0827\u0829\u0001\u0000\u0000\u0000\u0828\u0826\u0001\u0000\u0000\u0000"+
		"\u0829\u082a\u0005\u021a\u0000\u0000\u082a\u00e3\u0001\u0000\u0000\u0000"+
		"\u082b\u082e\u0003\u035e\u01af\u0000\u082c\u082e\u0005l\u0000\u0000\u082d"+
		"\u082b\u0001\u0000\u0000\u0000\u082d\u082c\u0001\u0000\u0000\u0000\u082e"+
		"\u00e5\u0001\u0000\u0000\u0000\u082f\u0830\u0003\u00a6S\u0000\u0830\u0831"+
		"\u0003\u033e\u019f\u0000\u0831\u00e7\u0001\u0000\u0000\u0000\u0832\u0833"+
		"\u0005W\u0000\u0000\u0833\u0834\u0005\u0161\u0000\u0000\u0834\u0839\u0003"+
		"\u0316\u018b\u0000\u0835\u0838\u0003\u00ecv\u0000\u0836\u0838\u0003\u00ea"+
		"u\u0000\u0837\u0835\u0001\u0000\u0000\u0000\u0837\u0836\u0001\u0000\u0000"+
		"\u0000\u0838\u083b\u0001\u0000\u0000\u0000\u0839\u0837\u0001\u0000\u0000"+
		"\u0000\u0839\u083a\u0001\u0000\u0000\u0000\u083a\u083c\u0001\u0000\u0000"+
		"\u0000\u083b\u0839\u0001\u0000\u0000\u0000\u083c\u083d\u0005\u0225\u0000"+
		"\u0000\u083d\u00e9\u0001\u0000\u0000\u0000\u083e\u083f\u0005\u00b2\u0000"+
		"\u0000\u083f\u0840\u00050\u0000\u0000\u0840\u084f\u0005\u0213\u0000\u0000"+
		"\u0841\u0842\u0005\u00e4\u0000\u0000\u0842\u084f\u0005\u0213\u0000\u0000"+
		"\u0843\u084f\u0005\u0101\u0000\u0000\u0844\u0845\u0005\u00ea\u0000\u0000"+
		"\u0845\u084f\u0005\u0213\u0000\u0000\u0846\u084f\u0005\u0102\u0000\u0000"+
		"\u0847\u084f\u0005^\u0000\u0000\u0848\u084f\u0005\u00ff\u0000\u0000\u0849"+
		"\u084a\u00053\u0000\u0000\u084a\u084f\u0005\u0213\u0000\u0000\u084b\u084f"+
		"\u0005\u00fd\u0000\u0000\u084c\u084f\u0005\u0118\u0000\u0000\u084d\u084f"+
		"\u0005\u0104\u0000\u0000\u084e\u083e\u0001\u0000\u0000\u0000\u084e\u0841"+
		"\u0001\u0000\u0000\u0000\u084e\u0843\u0001\u0000\u0000\u0000\u084e\u0844"+
		"\u0001\u0000\u0000\u0000\u084e\u0846\u0001\u0000\u0000\u0000\u084e\u0847"+
		"\u0001\u0000\u0000\u0000\u084e\u0848\u0001\u0000\u0000\u0000\u084e\u0849"+
		"\u0001\u0000\u0000\u0000\u084e\u084b\u0001\u0000\u0000\u0000\u084e\u084c"+
		"\u0001\u0000\u0000\u0000\u084e\u084d\u0001\u0000\u0000\u0000\u084f\u00eb"+
		"\u0001\u0000\u0000\u0000\u0850\u0851\u0005\u017e\u0000\u0000\u0851\u0852"+
		"\u0005\u01c2\u0000\u0000\u0852\u0853\u0005\u0213\u0000\u0000\u0853\u00ed"+
		"\u0001\u0000\u0000\u0000\u0854\u0855\u0005\u001b\u0000\u0000\u0855\u0856"+
		"\u0007\u000b\u0000\u0000\u0856\u00ef\u0001\u0000\u0000\u0000\u0857\u0858"+
		"\u0003\u035e\u01af\u0000\u0858\u0859\u0005\u0230\u0000\u0000\u0859\u085a"+
		"\u0003\u0262\u0131\u0000\u085a\u00f1\u0001\u0000\u0000\u0000\u085b\u085e"+
		"\u0005\u00cc\u0000\u0000\u085c\u085f\u0003\u00f4z\u0000\u085d\u085f\u0003"+
		"\u00f6{\u0000\u085e\u085c\u0001\u0000\u0000\u0000\u085e\u085d\u0001\u0000"+
		"\u0000\u0000\u085f\u00f3\u0001\u0000\u0000\u0000\u0860\u0861\u0005\u00c9"+
		"\u0000\u0000\u0861\u0862\u0005\u00f1\u0000\u0000\u0862\u0863\u0005\u0215"+
		"\u0000\u0000\u0863\u00f5\u0001\u0000\u0000\u0000\u0864\u0867\u00052\u0000"+
		"\u0000\u0865\u0866\u0005\u00f1\u0000\u0000\u0866\u0868\u0005\u0215\u0000"+
		"\u0000\u0867\u0865\u0001\u0000\u0000\u0000\u0867\u0868\u0001\u0000\u0000"+
		"\u0000\u0868\u0869\u0001\u0000\u0000\u0000\u0869\u086a\u0005\u00d2\u0000"+
		"\u0000\u086a\u086c\u0003\u035e\u01af\u0000\u086b\u086d\u0003\u00f8|\u0000"+
		"\u086c\u086b\u0001\u0000\u0000\u0000\u086c\u086d\u0001\u0000\u0000\u0000"+
		"\u086d\u0870\u0001\u0000\u0000\u0000\u086e\u086f\u0005\u01c2\u0000\u0000"+
		"\u086f\u0871\u0005P\u0000\u0000\u0870\u086e\u0001\u0000\u0000\u0000\u0870"+
		"\u0871\u0001\u0000\u0000\u0000\u0871\u0873\u0001\u0000\u0000\u0000\u0872"+
		"\u0874\u0003\u00fa}\u0000\u0873\u0872\u0001\u0000\u0000\u0000\u0873\u0874"+
		"\u0001\u0000\u0000\u0000\u0874\u00f7\u0001\u0000\u0000\u0000\u0875\u0876"+
		"\u0005\f\u0000\u0000\u0876\u0877\u0005\u00af\u0000\u0000\u0877\u0878\u0005"+
		"\u0219\u0000\u0000\u0878\u087d\u0003\u0262\u0131\u0000\u0879\u087a\u0005"+
		"\u021f\u0000\u0000\u087a\u087c\u0003\u0262\u0131\u0000\u087b\u0879\u0001"+
		"\u0000\u0000\u0000\u087c\u087f\u0001\u0000\u0000\u0000\u087d\u087b\u0001"+
		"\u0000\u0000\u0000\u087d\u087e\u0001\u0000\u0000\u0000\u087e\u0880\u0001"+
		"\u0000\u0000\u0000\u087f\u087d\u0001\u0000\u0000\u0000\u0880\u0881\u0005"+
		"\u021a\u0000\u0000\u0881\u00f9\u0001\u0000\u0000\u0000\u0882\u0883\u0005"+
		"\u0121\u0000\u0000\u0883\u088f\u0005\u0219\u0000\u0000\u0884\u0889\u0003"+
		"\u0262\u0131\u0000\u0885\u0886\u0005\u021f\u0000\u0000\u0886\u0888\u0003"+
		"\u0262\u0131\u0000\u0887\u0885\u0001\u0000\u0000\u0000\u0888\u088b\u0001"+
		"\u0000\u0000\u0000\u0889\u0887\u0001\u0000\u0000\u0000\u0889\u088a\u0001"+
		"\u0000\u0000\u0000\u088a\u0890\u0001\u0000\u0000\u0000\u088b\u0889\u0001"+
		"\u0000\u0000\u0000\u088c\u088d\u0005\u0212\u0000\u0000\u088d\u088e\u0005"+
		"\u0212\u0000\u0000\u088e\u0890\u0005\u0212\u0000\u0000\u088f\u0884\u0001"+
		"\u0000\u0000\u0000\u088f\u088c\u0001\u0000\u0000\u0000\u0890\u0891\u0001"+
		"\u0000\u0000\u0000\u0891\u0892\u0005\u021a\u0000\u0000\u0892\u00fb\u0001"+
		"\u0000\u0000\u0000\u0893\u0894\u0007\f\u0000\u0000\u0894\u0895\u0003\u0262"+
		"\u0131\u0000\u0895\u00fd\u0001\u0000\u0000\u0000\u0896\u089f\u0003\u0100"+
		"\u0080\u0000\u0897\u089f\u0003\u0102\u0081\u0000\u0898\u089f\u0003\u0104"+
		"\u0082\u0000\u0899\u089f\u0003\u0108\u0084\u0000\u089a\u089f\u0003\u010a"+
		"\u0085\u0000\u089b\u089f\u0003\u010c\u0086\u0000\u089c\u089f\u0003\u0114"+
		"\u008a\u0000\u089d\u089f\u0003\f\u0006\u0000\u089e\u0896\u0001\u0000\u0000"+
		"\u0000\u089e\u0897\u0001\u0000\u0000\u0000\u089e\u0898\u0001\u0000\u0000"+
		"\u0000\u089e\u0899\u0001\u0000\u0000\u0000\u089e\u089a\u0001\u0000\u0000"+
		"\u0000\u089e\u089b\u0001\u0000\u0000\u0000\u089e\u089c\u0001\u0000\u0000"+
		"\u0000\u089e\u089d\u0001\u0000\u0000\u0000\u089f\u00ff\u0001\u0000\u0000"+
		"\u0000\u08a0\u08a2\u0003H$\u0000\u08a1\u08a3\u0005K\u0000\u0000\u08a2"+
		"\u08a1\u0001\u0000\u0000\u0000\u08a2\u08a3\u0001\u0000\u0000\u0000\u08a3"+
		"\u08a4\u0001\u0000\u0000\u0000\u08a4\u08a7\u0003\u033e\u019f\u0000\u08a5"+
		"\u08a6\u0005\u0106\u0000\u0000\u08a6\u08a8\u0005\u0108\u0000\u0000\u08a7"+
		"\u08a5\u0001\u0000\u0000\u0000\u08a7\u08a8\u0001\u0000\u0000\u0000\u08a8"+
		"\u08aa\u0001\u0000\u0000\u0000\u08a9\u08ab\u0003\u00fc~\u0000\u08aa\u08a9"+
		"\u0001\u0000\u0000\u0000\u08aa\u08ab\u0001\u0000\u0000\u0000\u08ab\u08ac"+
		"\u0001\u0000\u0000\u0000\u08ac\u08ad\u0005\u0225\u0000\u0000\u08ad\u0101"+
		"\u0001\u0000\u0000\u0000\u08ae\u08af\u0005\u0188\u0000\u0000\u08af\u08b0"+
		"\u0003\u0314\u018a\u0000\u08b0\u08b1\u0005\u00c6\u0000\u0000\u08b1\u08b7"+
		"\u0003\u033e\u019f\u0000\u08b2\u08b3\u0005\u0135\u0000\u0000\u08b3\u08b4"+
		"\u0003\u0262\u0131\u0000\u08b4\u08b5\u0005\u0001\u0000\u0000\u08b5\u08b6"+
		"\u0003\u0262\u0131\u0000\u08b6\u08b8\u0001\u0000\u0000\u0000\u08b7\u08b2"+
		"\u0001\u0000\u0000\u0000\u08b7\u08b8\u0001\u0000\u0000\u0000\u08b8\u08bb"+
		"\u0001\u0000\u0000\u0000\u08b9\u08ba\u0005\u0106\u0000\u0000\u08ba\u08bc"+
		"\u0005\u0108\u0000\u0000\u08bb\u08b9\u0001\u0000\u0000\u0000\u08bb\u08bc"+
		"\u0001\u0000\u0000\u0000\u08bc\u08bd\u0001\u0000\u0000\u0000\u08bd\u08be"+
		"\u0005\u0225\u0000\u0000\u08be\u0103\u0001\u0000\u0000\u0000\u08bf\u08c0"+
		"\u0005\\\u0000\u0000\u08c0\u08cc\u0003J%\u0000\u08c1\u08c2\u0005\u0219"+
		"\u0000\u0000\u08c2\u08c7\u0003\u0106\u0083\u0000\u08c3\u08c4\u0005\u021f"+
		"\u0000\u0000\u08c4\u08c6\u0003\u0106\u0083\u0000\u08c5\u08c3\u0001\u0000"+
		"\u0000\u0000\u08c6\u08c9\u0001\u0000\u0000\u0000\u08c7\u08c5\u0001\u0000"+
		"\u0000\u0000\u08c7\u08c8\u0001\u0000\u0000\u0000\u08c8\u08ca\u0001\u0000"+
		"\u0000\u0000\u08c9\u08c7\u0001\u0000\u0000\u0000\u08ca\u08cb\u0005\u021a"+
		"\u0000\u0000\u08cb\u08cd\u0001\u0000\u0000\u0000\u08cc\u08c1\u0001\u0000"+
		"\u0000\u0000\u08cc\u08cd\u0001\u0000\u0000\u0000\u08cd\u08d0\u0001\u0000"+
		"\u0000\u0000\u08ce\u08cf\u0005\u0146\u0000\u0000\u08cf\u08d1\u0003\u033e"+
		"\u019f\u0000\u08d0\u08ce\u0001\u0000\u0000\u0000\u08d0\u08d1\u0001\u0000"+
		"\u0000\u0000\u08d1\u08d4\u0001\u0000\u0000\u0000\u08d2\u08d3\u0005\u00c6"+
		"\u0000\u0000\u08d3\u08d5\u0003\u0174\u00ba\u0000\u08d4\u08d2\u0001\u0000"+
		"\u0000\u0000\u08d4\u08d5\u0001\u0000\u0000\u0000\u08d5\u08d6\u0001\u0000"+
		"\u0000\u0000\u08d6\u08d7\u0005\u0225\u0000\u0000\u08d7\u0105\u0001\u0000"+
		"\u0000\u0000\u08d8\u08dd\u0003\u00a6S\u0000\u08d9\u08db\u0005\u00af\u0000"+
		"\u0000\u08da\u08d9\u0001\u0000\u0000\u0000\u08da\u08db\u0001\u0000\u0000"+
		"\u0000\u08db\u08dc\u0001\u0000\u0000\u0000\u08dc\u08de\u0003\u033e\u019f"+
		"\u0000\u08dd\u08da\u0001\u0000\u0000\u0000\u08dd\u08de\u0001\u0000\u0000"+
		"\u0000\u08de\u08e0\u0001\u0000\u0000\u0000\u08df\u08e1\u0003\u00fc~\u0000"+
		"\u08e0\u08df\u0001\u0000\u0000\u0000\u08e0\u08e1\u0001\u0000\u0000\u0000"+
		"\u08e1\u0107\u0001\u0000\u0000\u0000\u08e2\u08e3\u0003\u0318\u018c\u0000"+
		"\u08e3\u08e4\u0005\u0089\u0000\u0000\u08e4\u08e5\u0005\u0225\u0000\u0000"+
		"\u08e5\u0109\u0001\u0000\u0000\u0000\u08e6\u0905\u0005\u012e\u0000\u0000"+
		"\u08e7\u0906\u0005\u0164\u0000\u0000\u08e8\u0906\u0005\u001e\u0000\u0000"+
		"\u08e9\u08ea\u0005\u008a\u0000\u0000\u08ea\u08eb\u0005\u0219\u0000\u0000"+
		"\u08eb\u08ec\u0003\u0318\u018c\u0000\u08ec\u08ed\u0005\u021f\u0000\u0000"+
		"\u08ed\u08ee\u0003\u035a\u01ad\u0000\u08ee\u08ef\u0005\u021a\u0000\u0000"+
		"\u08ef\u0906\u0001\u0000\u0000\u0000\u08f0\u08f1\u0005\u00b9\u0000\u0000"+
		"\u08f1\u08f2\u0005\u0219\u0000\u0000\u08f2\u08f3\u0003\u035e\u01af\u0000"+
		"\u08f3\u08f4\u0005\u021f\u0000\u0000\u08f4\u08f5\u0003\u0262\u0131\u0000"+
		"\u08f5\u08f6\u0005\u021a\u0000\u0000\u08f6\u0906\u0001\u0000\u0000\u0000"+
		"\u08f7\u08f8\u0005\u0143\u0000\u0000\u08f8\u08fb\u0005\u0219\u0000\u0000"+
		"\u08f9\u08fc\u0003\u035e\u01af\u0000\u08fa\u08fc\u0005l\u0000\u0000\u08fb"+
		"\u08f9\u0001\u0000\u0000\u0000\u08fb\u08fa\u0001\u0000\u0000\u0000\u08fc"+
		"\u08ff\u0001\u0000\u0000\u0000\u08fd\u08fe\u0005\u021f\u0000\u0000\u08fe"+
		"\u0900\u0003\u035e\u01af\u0000\u08ff\u08fd\u0001\u0000\u0000\u0000\u0900"+
		"\u0901\u0001\u0000\u0000\u0000\u0901\u08ff\u0001\u0000\u0000\u0000\u0901"+
		"\u0902\u0001\u0000\u0000\u0000\u0902\u0903\u0001\u0000\u0000\u0000\u0903"+
		"\u0904\u0005\u021a\u0000\u0000\u0904\u0906\u0001\u0000\u0000\u0000\u0905"+
		"\u08e7\u0001\u0000\u0000\u0000\u0905\u08e8\u0001\u0000\u0000\u0000\u0905"+
		"\u08e9\u0001\u0000\u0000\u0000\u0905\u08f0\u0001\u0000\u0000\u0000\u0905"+
		"\u08f7\u0001\u0000\u0000\u0000\u0906\u0907\u0001\u0000\u0000\u0000\u0907"+
		"\u0908\u0005\u0225\u0000\u0000\u0908\u010b\u0001\u0000\u0000\u0000\u0909"+
		"\u090c\u0003\u010e\u0087\u0000\u090a\u090c\u0003\u0112\u0089\u0000\u090b"+
		"\u0909\u0001\u0000\u0000\u0000\u090b\u090a\u0001\u0000\u0000\u0000\u090c"+
		"\u010d\u0001\u0000\u0000\u0000\u090d\u090e\u0005\u01a2\u0000\u0000\u090e"+
		"\u090f\u0003\u0314\u018a\u0000\u090f\u0922\u0005\u00c6\u0000\u0000\u0910"+
		"\u0911\u0005\u013a\u0000\u0000\u0911\u0912\u0005\u0219\u0000\u0000\u0912"+
		"\u0917\u0003\u0110\u0088\u0000\u0913\u0914\u0005\u021f\u0000\u0000\u0914"+
		"\u0916\u0003\u0110\u0088\u0000\u0915\u0913\u0001\u0000\u0000\u0000\u0916"+
		"\u0919\u0001\u0000\u0000\u0000\u0917\u0915\u0001\u0000\u0000\u0000\u0917"+
		"\u0918\u0001\u0000\u0000\u0000\u0918\u091a\u0001\u0000\u0000\u0000\u0919"+
		"\u0917\u0001\u0000\u0000\u0000\u091a\u091b\u0005\u021a\u0000\u0000\u091b"+
		"\u0923\u0001\u0000\u0000\u0000\u091c\u091d\u0005\u013b\u0000\u0000\u091d"+
		"\u0920\u0005\\\u0000\u0000\u091e\u091f\u0005\u0146\u0000\u0000\u091f\u0921"+
		"\u0003\u033e\u019f\u0000\u0920\u091e\u0001\u0000\u0000\u0000\u0920\u0921"+
		"\u0001\u0000\u0000\u0000\u0921\u0923\u0001\u0000\u0000\u0000\u0922\u0910"+
		"\u0001\u0000\u0000\u0000\u0922\u091c\u0001\u0000\u0000\u0000\u0923\u0924"+
		"\u0001\u0000\u0000\u0000\u0924\u0925\u0005\u0225\u0000\u0000\u0925\u010f"+
		"\u0001\u0000\u0000\u0000\u0926\u0928\u0003\"\u0011\u0000\u0927\u0929\u0003"+
		"\u033e\u019f\u0000\u0928\u0927\u0001\u0000\u0000\u0000\u0928\u0929\u0001"+
		"\u0000\u0000\u0000\u0929\u092c\u0001\u0000\u0000\u0000\u092a\u092b\u0005"+
		"\u0106\u0000\u0000\u092b\u092d\u0005\u0108\u0000\u0000\u092c\u092a\u0001"+
		"\u0000\u0000\u0000\u092c\u092d\u0001\u0000\u0000\u0000\u092d\u092f\u0001"+
		"\u0000\u0000\u0000\u092e\u0930\u0003\u00fc~\u0000\u092f\u092e\u0001\u0000"+
		"\u0000\u0000\u092f\u0930\u0001\u0000\u0000\u0000\u0930\u0111\u0001\u0000"+
		"\u0000\u0000\u0931\u0932\u0003\u0326\u0193\u0000\u0932\u0933\u0003\u0314"+
		"\u018a\u0000\u0933\u0934\u0007\r\u0000\u0000\u0934\u0935\u0005\u0225\u0000"+
		"\u0000\u0935\u0113\u0001\u0000\u0000\u0000\u0936\u0939\u0003\u0116\u008b"+
		"\u0000\u0937\u0939\u0003\u011c\u008e\u0000\u0938\u0936\u0001\u0000\u0000"+
		"\u0000\u0938\u0937\u0001\u0000\u0000\u0000\u0939\u093a\u0001\u0000\u0000"+
		"\u0000\u093a\u093b\u0005\u0225\u0000\u0000\u093b\u0115\u0001\u0000\u0000"+
		"\u0000\u093c\u093d\u0005\u01a2\u0000\u0000\u093d\u093e\u0003\u0314\u018a"+
		"\u0000\u093e\u094a\u0005\u00c6\u0000\u0000\u093f\u0940\u0005\u018b\u0000"+
		"\u0000\u0940\u0941\u0005\u010e\u0000\u0000\u0941\u0943\u0003\u033e\u019f"+
		"\u0000\u0942\u0944\u0003\u0118\u008c\u0000\u0943\u0942\u0001\u0000\u0000"+
		"\u0000\u0943\u0944\u0001\u0000\u0000\u0000\u0944\u0947\u0001\u0000\u0000"+
		"\u0000\u0945\u0946\u0005\u0106\u0000\u0000\u0946\u0948\u0005\u0108\u0000"+
		"\u0000\u0947\u0945\u0001\u0000\u0000\u0000\u0947\u0948\u0001\u0000\u0000"+
		"\u0000\u0948\u094b\u0001\u0000\u0000\u0000\u0949\u094b\u0003\u011a\u008d"+
		"\u0000\u094a\u093f\u0001\u0000\u0000\u0000\u094a\u0949\u0001\u0000\u0000"+
		"\u0000\u094b\u0117\u0001\u0000\u0000\u0000\u094c\u094f\u0005\u00b5\u0000"+
		"\u0000\u094d\u094f\u0005\u00b4\u0000\u0000\u094e\u094c\u0001\u0000\u0000"+
		"\u0000\u094e\u094d\u0001\u0000\u0000\u0000\u094f\u0950\u0001\u0000\u0000"+
		"\u0000\u0950\u0951\u00050\u0000\u0000\u0951\u0952\u0003\u033e\u019f\u0000"+
		"\u0952\u0119\u0001\u0000\u0000\u0000\u0953\u0957\u0005\u01b6\u0000\u0000"+
		"\u0954\u0955\u0005\u01b7\u0000\u0000\u0955\u0957\u0005\u0014\u0000\u0000"+
		"\u0956\u0953\u0001\u0000\u0000\u0000\u0956\u0954\u0001\u0000\u0000\u0000"+
		"\u0957\u0958\u0001\u0000\u0000\u0000\u0958\u0959\u0005\u0219\u0000\u0000"+
		"\u0959\u095a\u0003\u0262\u0131\u0000\u095a\u095b\u0005\u021a\u0000\u0000"+
		"\u095b\u095c\u0005\u010e\u0000\u0000\u095c\u095f\u0003\u033e\u019f\u0000"+
		"\u095d\u095e\u0005\u0106\u0000\u0000\u095e\u0960\u0005\u0108\u0000\u0000"+
		"\u095f\u095d\u0001\u0000\u0000\u0000\u095f\u0960\u0001\u0000\u0000\u0000"+
		"\u0960\u011b\u0001\u0000\u0000\u0000\u0961\u0962\u0003\u02fe\u017f\u0000"+
		"\u0962\u0963\u0003\u033e\u019f\u0000\u0963\u011d\u0001\u0000\u0000\u0000"+
		"\u0964\u0965\u0003\u0122\u0091\u0000\u0965\u0966\u0007\u000e\u0000\u0000"+
		"\u0966\u0969\u0001\u0000\u0000\u0000\u0967\u0969\u0003\u0120\u0090\u0000"+
		"\u0968\u0964\u0001\u0000\u0000\u0000\u0968\u0967\u0001\u0000\u0000\u0000"+
		"\u0969\u096a\u0001\u0000\u0000\u0000\u096a\u0968\u0001\u0000\u0000\u0000"+
		"\u096a\u096b\u0001\u0000\u0000\u0000\u096b\u011f\u0001\u0000\u0000\u0000"+
		"\u096c\u096d\u0005\u0227\u0000\u0000\u096d\u096e\u0005\u0227\u0000\u0000"+
		"\u096e\u096f\u0003\u0312\u0189\u0000\u096f\u0970\u0005\u022d\u0000\u0000"+
		"\u0970\u0971\u0005\u022d\u0000\u0000\u0971\u0121\u0001\u0000\u0000\u0000"+
		"\u0972\u0973\u0005W\u0000\u0000\u0973\u098a\u0003\u0000\u0000\u0000\u0974"+
		"\u0975\u0005\u000f\u0000\u0000\u0975\u098a\u0003\u0000\u0000\u0000\u0976"+
		"\u0977\u0005\u00a4\u0000\u0000\u0977\u098a\u0003\u0000\u0000\u0000\u0978"+
		"\u0979\u0005\u01a1\u0000\u0000\u0979\u098a\u0003\u0000\u0000\u0000\u097a"+
		"\u098a\u0003\u0148\u00a4\u0000\u097b\u098a\u0003\u0150\u00a8\u0000\u097c"+
		"\u098a\u0003\u0124\u0092\u0000\u097d\u098a\u0003\u0126\u0093\u0000\u097e"+
		"\u098a\u0003\u0128\u0094\u0000\u097f\u098a\u0003\u012a\u0095\u0000\u0980"+
		"\u098a\u0003\u012c\u0096\u0000\u0981\u098a\u0003\u0132\u0099\u0000\u0982"+
		"\u098a\u0003\u0136\u009b\u0000\u0983\u098a\u0003\u0140\u00a0\u0000\u0984"+
		"\u098a\u0003\u0142\u00a1\u0000\u0985\u098a\u0003\u0144\u00a2\u0000\u0986"+
		"\u098a\u0003\u0298\u014c\u0000\u0987\u098a\u0003\u0152\u00a9\u0000\u0988"+
		"\u098a\u0003\u0146\u00a3\u0000\u0989\u0972\u0001\u0000\u0000\u0000\u0989"+
		"\u0974\u0001\u0000\u0000\u0000\u0989\u0976\u0001\u0000\u0000\u0000\u0989"+
		"\u0978\u0001\u0000\u0000\u0000\u0989\u097a\u0001\u0000\u0000\u0000\u0989"+
		"\u097b\u0001\u0000\u0000\u0000\u0989\u097c\u0001\u0000\u0000\u0000\u0989"+
		"\u097d\u0001\u0000\u0000\u0000\u0989\u097e\u0001\u0000\u0000\u0000\u0989"+
		"\u097f\u0001\u0000\u0000\u0000\u0989\u0980\u0001\u0000\u0000\u0000\u0989"+
		"\u0981\u0001\u0000\u0000\u0000\u0989\u0982\u0001\u0000\u0000\u0000\u0989"+
		"\u0983\u0001\u0000\u0000\u0000\u0989\u0984\u0001\u0000\u0000\u0000\u0989"+
		"\u0985\u0001\u0000\u0000\u0000\u0989\u0986\u0001\u0000\u0000\u0000\u0989"+
		"\u0987\u0001\u0000\u0000\u0000\u0989\u0988\u0001\u0000\u0000\u0000\u098a"+
		"\u0123\u0001\u0000\u0000\u0000\u098b\u098e\u0003\u0350\u01a8\u0000\u098c"+
		"\u098e\u0003\u0346\u01a3\u0000\u098d\u098b\u0001\u0000\u0000\u0000\u098d"+
		"\u098c\u0001\u0000\u0000\u0000\u098e\u098f\u0001\u0000\u0000\u0000\u098f"+
		"\u0990\u0005\u0222\u0000\u0000\u0990\u0991\u0003\u0262\u0131\u0000\u0991"+
		"\u0125\u0001\u0000\u0000\u0000\u0992\u0994\u0005Q\u0000\u0000\u0993\u0995"+
		"\u0003\u0312\u0189\u0000\u0994\u0993\u0001\u0000\u0000\u0000\u0994\u0995"+
		"\u0001\u0000\u0000\u0000\u0995\u0998\u0001\u0000\u0000\u0000\u0996\u0997"+
		"\u0005\u01be\u0000\u0000\u0997\u0999\u0003\u0234\u011a\u0000\u0998\u0996"+
		"\u0001\u0000\u0000\u0000\u0998\u0999\u0001\u0000\u0000\u0000\u0999\u0127"+
		"\u0001\u0000\u0000\u0000\u099a\u099c\u0005\u0090\u0000\u0000\u099b\u099d"+
		"\u0003\u0312\u0189\u0000\u099c\u099b\u0001\u0000\u0000\u0000\u099c\u099d"+
		"\u0001\u0000\u0000\u0000\u099d\u09a0\u0001\u0000\u0000\u0000\u099e\u099f"+
		"\u0005\u01be\u0000\u0000\u099f\u09a1\u0003\u0234\u011a\u0000\u09a0\u099e"+
		"\u0001\u0000\u0000\u0000\u09a0\u09a1\u0001\u0000\u0000\u0000\u09a1\u0129"+
		"\u0001\u0000\u0000\u0000\u09a2\u09a3\u0005\u00a3\u0000\u0000\u09a3\u09a4"+
		"\u0003\u0312\u0189\u0000\u09a4\u012b\u0001\u0000\u0000\u0000\u09a5\u09a6"+
		"\u0005\u00ac\u0000\u0000\u09a6\u09a7\u0003\u0234\u011a\u0000\u09a7\u09a8"+
		"\u0005\u018e\u0000\u0000\u09a8\u09ac\u0003\u011e\u008f\u0000\u09a9\u09ab"+
		"\u0003\u012e\u0097\u0000\u09aa\u09a9\u0001\u0000\u0000\u0000\u09ab\u09ae"+
		"\u0001\u0000\u0000\u0000\u09ac\u09aa\u0001\u0000\u0000\u0000\u09ac\u09ad"+
		"\u0001\u0000\u0000\u0000\u09ad\u09b0\u0001\u0000\u0000\u0000\u09ae\u09ac"+
		"\u0001\u0000\u0000\u0000\u09af\u09b1\u0003\u0130\u0098\u0000\u09b0\u09af"+
		"\u0001\u0000\u0000\u0000\u09b0\u09b1\u0001\u0000\u0000\u0000\u09b1\u09b2"+
		"\u0001\u0000\u0000\u0000\u09b2\u09b3\u0005\u0083\u0000\u0000\u09b3\u09b4"+
		"\u0005\u00ac\u0000\u0000\u09b4\u012d\u0001\u0000\u0000\u0000\u09b5\u09b6"+
		"\u0005\u007f\u0000\u0000\u09b6\u09b7\u0003\u0234\u011a\u0000\u09b7\u09b8"+
		"\u0005\u018e\u0000\u0000\u09b8\u09b9\u0003\u011e\u008f\u0000\u09b9\u012f"+
		"\u0001\u0000\u0000\u0000\u09ba\u09bb\u0005~\u0000\u0000\u09bb\u09bc\u0003"+
		"\u011e\u008f\u0000\u09bc\u0131\u0001\u0000\u0000\u0000\u09bd\u09bf\u0003"+
		"\u0312\u0189\u0000\u09be\u09bd\u0001\u0000\u0000\u0000\u09be\u09bf\u0001"+
		"\u0000\u0000\u0000\u09bf\u09c4\u0001\u0000\u0000\u0000\u09c0\u09c1\u0005"+
		"\u01c1\u0000\u0000\u09c1\u09c5\u0003\u0234\u011a\u0000\u09c2\u09c3\u0005"+
		"\u009d\u0000\u0000\u09c3\u09c5\u0003\u0134\u009a\u0000\u09c4\u09c0\u0001"+
		"\u0000\u0000\u0000\u09c4\u09c2\u0001\u0000\u0000\u0000\u09c4\u09c5\u0001"+
		"\u0000\u0000\u0000\u09c5\u09c6\u0001\u0000\u0000\u0000\u09c6\u09c7\u0005"+
		"\u00e0\u0000\u0000\u09c7\u09c8\u0003\u011e\u008f\u0000\u09c8\u09c9\u0005"+
		"\u0083\u0000\u0000\u09c9\u09cb\u0005\u00e0\u0000\u0000\u09ca\u09cc\u0003"+
		"\u0312\u0189\u0000\u09cb\u09ca\u0001\u0000\u0000\u0000\u09cb\u09cc\u0001"+
		"\u0000\u0000\u0000\u09cc\u0133\u0001\u0000\u0000\u0000\u09cd\u09ce\u0003"+
		"\u0322\u0191\u0000\u09ce\u09d0\u0005\u00af\u0000\u0000\u09cf\u09d1\u0005"+
		"\u014a\u0000\u0000\u09d0\u09cf\u0001\u0000\u0000\u0000\u09d0\u09d1\u0001"+
		"\u0000\u0000\u0000\u09d1\u09d2\u0001\u0000\u0000\u0000\u09d2\u09d3\u0003"+
		"\u013c\u009e\u0000\u09d3\u09d4\u0005\u0001\u0000\u0000\u09d4\u09d5\u0003"+
		"\u013e\u009f\u0000\u09d5\u09e3\u0001\u0000\u0000\u0000\u09d6\u09d7\u0003"+
		"\u0326\u0193\u0000\u09d7\u09e0\u0005\u00af\u0000\u0000\u09d8\u09da\u0003"+
		"J%\u0000\u09d9\u09db\u0003\u0232\u0119\u0000\u09da\u09d9\u0001\u0000\u0000"+
		"\u0000\u09da\u09db\u0001\u0000\u0000\u0000\u09db\u09e1\u0001\u0000\u0000"+
		"\u0000\u09dc\u09dd\u0005\u0219\u0000\u0000\u09dd\u09de\u0003\u0174\u00ba"+
		"\u0000\u09de\u09df\u0005\u021a\u0000\u0000\u09df\u09e1\u0001\u0000\u0000"+
		"\u0000\u09e0\u09d8\u0001\u0000\u0000\u0000\u09e0\u09dc\u0001\u0000\u0000"+
		"\u0000\u09e1\u09e3\u0001\u0000\u0000\u0000\u09e2\u09cd\u0001\u0000\u0000"+
		"\u0000\u09e2\u09d6\u0001\u0000\u0000\u0000\u09e3\u0135\u0001\u0000\u0000"+
		"\u0000\u09e4\u09e5\u0005\u009e\u0000\u0000\u09e5\u09e6\u0003\u0322\u0191"+
		"\u0000\u09e6\u09e7\u0005\u00af\u0000\u0000\u09e7\u09e8\u0003\u0138\u009c"+
		"\u0000\u09e8\u09eb\u0003\u0152\u00a9\u0000\u09e9\u09ea\u0005\u0154\u0000"+
		"\u0000\u09ea\u09ec\u0005\u008b\u0000\u0000\u09eb\u09e9\u0001\u0000\u0000"+
		"\u0000\u09eb\u09ec\u0001\u0000\u0000\u0000\u09ec\u0137\u0001\u0000\u0000"+
		"\u0000\u09ed\u09ee\u0003\u013c\u009e\u0000\u09ee\u09ef\u0005\u0001\u0000"+
		"\u0000\u09ef\u09f0\u0003\u013e\u009f\u0000\u09f0\u09fb\u0001\u0000\u0000"+
		"\u0000\u09f1\u09f2\u0005\u00b7\u0000\u0000\u09f2\u09f3\u0005\u010e\u0000"+
		"\u0000\u09f3\u09f5\u0003\u0328\u0194\u0000\u09f4\u09f6\u0003\u013a\u009d"+
		"\u0000\u09f5\u09f4\u0001\u0000\u0000\u0000\u09f5\u09f6\u0001\u0000\u0000"+
		"\u0000\u09f6\u09fb\u0001\u0000\u0000\u0000\u09f7\u09f8\u0005\u01b2\u0000"+
		"\u0000\u09f8\u09f9\u0005\u010e\u0000\u0000\u09f9\u09fb\u0003\u0322\u0191"+
		"\u0000\u09fa\u09ed\u0001\u0000\u0000\u0000\u09fa\u09f1\u0001\u0000\u0000"+
		"\u0000\u09fa\u09f7\u0001\u0000\u0000\u0000\u09fb\u0139\u0001\u0000\u0000"+
		"\u0000\u09fc\u09fd\u0005\"\u0000\u0000\u09fd\u09fe\u0003\u013c\u009e\u0000"+
		"\u09fe\u09ff\u0005\u0012\u0000\u0000\u09ff\u0a00\u0003\u013e\u009f\u0000"+
		"\u0a00\u013b\u0001\u0000\u0000\u0000\u0a01\u0a02\u0003\u027e\u013f\u0000"+
		"\u0a02\u013d\u0001\u0000\u0000\u0000\u0a03\u0a04\u0003\u027e\u013f\u0000"+
		"\u0a04\u013f\u0001\u0000\u0000\u0000\u0a05\u0a06\u0005\u0108\u0000\u0000"+
		"\u0a06\u0141\u0001\u0000\u0000\u0000\u0a07\u0a09\u0005\u0134\u0000\u0000"+
		"\u0a08\u0a0a\u0003\u0318\u018c\u0000\u0a09\u0a08\u0001\u0000\u0000\u0000"+
		"\u0a09\u0a0a\u0001\u0000\u0000\u0000\u0a0a\u0143\u0001\u0000\u0000\u0000"+
		"\u0a0b\u0a0d\u0005\u0146\u0000\u0000\u0a0c\u0a0e\u0003\u0234\u011a\u0000"+
		"\u0a0d\u0a0c\u0001\u0000\u0000\u0000\u0a0d\u0a0e\u0001\u0000\u0000\u0000"+
		"\u0a0e\u0a12\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0005\u0146\u0000\u0000"+
		"\u0a10\u0a12\u0003\u0174\u00ba\u0000\u0a11\u0a0b\u0001\u0000\u0000\u0000"+
		"\u0a11\u0a0f\u0001\u0000\u0000\u0000\u0a12\u0145\u0001\u0000\u0000\u0000"+
		"\u0a13\u0a15\u00054\u0000\u0000\u0a14\u0a13\u0001\u0000\u0000\u0000\u0a14"+
		"\u0a15\u0001\u0000\u0000\u0000\u0a15\u0a16\u0001\u0000\u0000\u0000\u0a16"+
		"\u0a18\u0003\u0302\u0181\u0000\u0a17\u0a19\u0003\u0334\u019a\u0000\u0a18"+
		"\u0a17\u0001\u0000\u0000\u0000\u0a18\u0a19\u0001\u0000\u0000\u0000\u0a19"+
		"\u0147\u0001\u0000\u0000\u0000\u0a1a\u0a1b\u0005!\u0000\u0000\u0a1b\u0a1d"+
		"\u0003\u011e\u008f\u0000\u0a1c\u0a1e\u0003\u014a\u00a5\u0000\u0a1d\u0a1c"+
		"\u0001\u0000\u0000\u0000\u0a1d\u0a1e\u0001\u0000\u0000\u0000\u0a1e\u0a1f"+
		"\u0001\u0000\u0000\u0000\u0a1f\u0a21\u0005\u0083\u0000\u0000\u0a20\u0a22"+
		"\u0003\u0312\u0189\u0000\u0a21\u0a20\u0001\u0000\u0000\u0000\u0a21\u0a22"+
		"\u0001\u0000\u0000\u0000\u0a22\u0149\u0001\u0000\u0000\u0000\u0a23\u0a25"+
		"\u0005\u0089\u0000\u0000\u0a24\u0a26\u0003\u014c\u00a6\u0000\u0a25\u0a24"+
		"\u0001\u0000\u0000\u0000\u0a26\u0a27\u0001\u0000\u0000\u0000\u0a27\u0a25"+
		"\u0001\u0000\u0000\u0000\u0a27\u0a28\u0001\u0000\u0000\u0000\u0a28\u014b"+
		"\u0001\u0000\u0000\u0000\u0a29\u0a2a\u0005\u01be\u0000\u0000\u0a2a\u0a2f"+
		"\u0003\u0318\u018c\u0000\u0a2b\u0a2c\u0005\u0116\u0000\u0000\u0a2c\u0a2e"+
		"\u0003\u0318\u018c\u0000\u0a2d\u0a2b\u0001\u0000\u0000\u0000\u0a2e\u0a31"+
		"\u0001\u0000\u0000\u0000\u0a2f\u0a2d\u0001\u0000\u0000\u0000\u0a2f\u0a30"+
		"\u0001\u0000\u0000\u0000\u0a30\u0a32\u0001\u0000\u0000\u0000\u0a31\u0a2f"+
		"\u0001\u0000\u0000\u0000\u0a32\u0a33\u0005\u018e\u0000\u0000\u0a33\u0a34"+
		"\u0003\u011e\u008f\u0000\u0a34\u014d\u0001\u0000\u0000\u0000\u0a35\u0a37"+
		"\u0005i\u0000\u0000\u0a36\u0a35\u0001\u0000\u0000\u0000\u0a36\u0a37\u0001"+
		"\u0000\u0000\u0000\u0a37\u0a39\u0001\u0000\u0000\u0000\u0a38\u0a3a\u0003"+
		"\u00fe\u007f\u0000\u0a39\u0a38\u0001\u0000\u0000\u0000\u0a3a\u0a3b\u0001"+
		"\u0000\u0000\u0000\u0a3b\u0a39\u0001\u0000\u0000\u0000\u0a3b\u0a3c\u0001"+
		"\u0000\u0000\u0000\u0a3c\u0a3e\u0001\u0000\u0000\u0000\u0a3d\u0a36\u0001"+
		"\u0000\u0000\u0000\u0a3d\u0a3e\u0001\u0000\u0000\u0000\u0a3e\u0a3f\u0001"+
		"\u0000\u0000\u0000\u0a3f\u0a40\u0003\u0148\u00a4\u0000\u0a40\u014f\u0001"+
		"\u0000\u0000\u0000\u0a41\u0a43\u0005i\u0000\u0000\u0a42\u0a41\u0001\u0000"+
		"\u0000\u0000\u0a42\u0a43\u0001\u0000\u0000\u0000\u0a43\u0a45\u0001\u0000"+
		"\u0000\u0000\u0a44\u0a46\u0003\u00fe\u007f\u0000\u0a45\u0a44\u0001\u0000"+
		"\u0000\u0000\u0a46\u0a47\u0001\u0000\u0000\u0000\u0a47\u0a45\u0001\u0000"+
		"\u0000\u0000\u0a47\u0a48\u0001\u0000\u0000\u0000\u0a48\u0a49\u0001\u0000"+
		"\u0000\u0000\u0a49\u0a4a\u0003\u0148\u00a4\u0000\u0a4a\u0151\u0001\u0000"+
		"\u0000\u0000\u0a4b\u0a50\u0003\u0154\u00aa\u0000\u0a4c\u0a50\u0003\u0158"+
		"\u00ac\u0000\u0a4d\u0a50\u0003\u015a\u00ad\u0000\u0a4e\u0a50\u0003\u0164"+
		"\u00b2\u0000\u0a4f\u0a4b\u0001\u0000\u0000\u0000\u0a4f\u0a4c\u0001\u0000"+
		"\u0000\u0000\u0a4f\u0a4d\u0001\u0000\u0000\u0000\u0a4f\u0a4e\u0001\u0000"+
		"\u0000\u0000\u0a50\u0153\u0001\u0000\u0000\u0000\u0a51\u0a52\u0005\u008e"+
		"\u0000\u0000\u0a52\u0a53\u0005\u00ae\u0000\u0000\u0a53\u0a5d\u0003\u0262"+
		"\u0131\u0000\u0a54\u0a56\u0003\u02f2\u0179\u0000\u0a55\u0a57\u0003\u02bc"+
		"\u015e\u0000\u0a56\u0a55\u0001\u0000\u0000\u0000\u0a56\u0a57\u0001\u0000"+
		"\u0000\u0000\u0a57\u0a5e\u0001\u0000\u0000\u0000\u0a58\u0a5a\u0003\u02bc"+
		"\u015e\u0000\u0a59\u0a5b\u0003\u0156\u00ab\u0000\u0a5a\u0a59\u0001\u0000"+
		"\u0000\u0000\u0a5a\u0a5b\u0001\u0000\u0000\u0000\u0a5b\u0a5e\u0001\u0000"+
		"\u0000\u0000\u0a5c\u0a5e\u0003\u0156\u00ab\u0000\u0a5d\u0a54\u0001\u0000"+
		"\u0000\u0000\u0a5d\u0a58\u0001\u0000\u0000\u0000\u0a5d\u0a5c\u0001\u0000"+
		"\u0000\u0000\u0a5d\u0a5e\u0001\u0000\u0000\u0000\u0a5e\u0155\u0001\u0000"+
		"\u0000\u0000\u0a5f\u0a60\u0007\u000f\u0000\u0000\u0a60\u0a61\u0003\u02f2"+
		"\u0179\u0000\u0a61\u0157\u0001\u0000\u0000\u0000\u0a62\u0a6c\u0003\u0208"+
		"\u0104\u0000\u0a63\u0a6c\u0003\u0214\u010a\u0000\u0a64\u0a6c\u0003\u01f2"+
		"\u00f9\u0000\u0a65\u0a6c\u0003\u01f4\u00fa\u0000\u0a66\u0a6c\u0003\u0174"+
		"\u00ba\u0000\u0a67\u0a6c\u0003\u01e8\u00f4\u0000\u0a68\u0a6c\u0003\u01ee"+
		"\u00f7\u0000\u0a69\u0a6c\u0003\u01f0\u00f8\u0000\u0a6a\u0a6c\u0003\u0172"+
		"\u00b9\u0000\u0a6b\u0a62\u0001\u0000\u0000\u0000\u0a6b\u0a63\u0001\u0000"+
		"\u0000\u0000\u0a6b\u0a64\u0001\u0000\u0000\u0000\u0a6b\u0a65\u0001\u0000"+
		"\u0000\u0000\u0a6b\u0a66\u0001\u0000\u0000\u0000\u0a6b\u0a67\u0001\u0000"+
		"\u0000\u0000\u0a6b\u0a68\u0001\u0000\u0000\u0000\u0a6b\u0a69\u0001\u0000"+
		"\u0000\u0000\u0a6b\u0a6a\u0001\u0000\u0000\u0000\u0a6c\u0159\u0001\u0000"+
		"\u0000\u0000\u0a6d\u0a72\u0003\u015c\u00ae\u0000\u0a6e\u0a72\u0003\u015e"+
		"\u00af\u0000\u0a6f\u0a72\u0003\u0160\u00b0\u0000\u0a70\u0a72\u0003\u0162"+
		"\u00b1\u0000\u0a71\u0a6d\u0001\u0000\u0000\u0000\u0a71\u0a6e\u0001\u0000"+
		"\u0000\u0000\u0a71\u0a6f\u0001\u0000\u0000\u0000\u0a71\u0a70\u0001\u0000"+
		"\u0000\u0000\u0a72\u015b\u0001\u0000\u0000\u0000\u0a73\u0a74\u0005?\u0000"+
		"\u0000\u0a74\u0a75\u0003J%\u0000\u0a75\u015d\u0001\u0000\u0000\u0000\u0a76"+
		"\u0a77\u0005\u0114\u0000\u0000\u0a77\u0a79\u0003J%\u0000\u0a78\u0a7a\u0003"+
		"\u0232\u0119\u0000\u0a79\u0a78\u0001\u0000\u0000\u0000\u0a79\u0a7a\u0001"+
		"\u0000\u0000\u0000\u0a7a\u015f\u0001\u0000\u0000\u0000\u0a7b\u0a7c\u0005"+
		"\u0096\u0000\u0000\u0a7c\u0a91\u0003J%\u0000\u0a7d\u0a7e\u0005\u00c3\u0000"+
		"\u0000\u0a7e\u0a83\u0003H$\u0000\u0a7f\u0a80\u0005\u021f\u0000\u0000\u0a80"+
		"\u0a82\u0003H$\u0000\u0a81\u0a7f\u0001\u0000\u0000\u0000\u0a82\u0a85\u0001"+
		"\u0000\u0000\u0000\u0a83\u0a81\u0001\u0000\u0000\u0000\u0a83\u0a84\u0001"+
		"\u0000\u0000\u0000\u0a84\u0a92\u0001\u0000\u0000\u0000\u0a85\u0a83\u0001"+
		"\u0000\u0000\u0000\u0a86\u0a87\u0005/\u0000\u0000\u0a87\u0a88\u0005A\u0000"+
		"\u0000\u0a88\u0a89\u0005\u00c3\u0000\u0000\u0a89\u0a8e\u0003H$\u0000\u0a8a"+
		"\u0a8b\u0005\u021f\u0000\u0000\u0a8b\u0a8d\u0003H$\u0000\u0a8c\u0a8a\u0001"+
		"\u0000\u0000\u0000\u0a8d\u0a90\u0001\u0000\u0000\u0000\u0a8e\u0a8c\u0001"+
		"\u0000\u0000\u0000\u0a8e\u0a8f\u0001\u0000\u0000\u0000\u0a8f\u0a92\u0001"+
		"\u0000\u0000\u0000\u0a90\u0a8e\u0001\u0000\u0000\u0000\u0a91\u0a7d\u0001"+
		"\u0000\u0000\u0000\u0a91\u0a86\u0001\u0000\u0000\u0000\u0a92\u0161\u0001"+
		"\u0000\u0000\u0000\u0a93\u0a94\u0005\u0114\u0000\u0000\u0a94\u0a95\u0003"+
		"H$\u0000\u0a95\u0a98\u0005\u009d\u0000\u0000\u0a96\u0a99\u0003\u0174\u00ba"+
		"\u0000\u0a97\u0a99\u0003\u0262\u0131\u0000\u0a98\u0a96\u0001\u0000\u0000"+
		"\u0000\u0a98\u0a97\u0001\u0000\u0000\u0000\u0a99\u0a9b\u0001\u0000\u0000"+
		"\u0000\u0a9a\u0a9c\u0003\u02bc\u015e\u0000\u0a9b\u0a9a\u0001\u0000\u0000"+
		"\u0000\u0a9b\u0a9c\u0001\u0000\u0000\u0000\u0a9c\u0163\u0001\u0000\u0000"+
		"\u0000\u0a9d\u0aa3\u0003\u0166\u00b3\u0000\u0a9e\u0aa3\u0003\u0168\u00b4"+
		"\u0000\u0a9f\u0aa3\u0003\u016a\u00b5\u0000\u0aa0\u0aa3\u0003\u016e\u00b7"+
		"\u0000\u0aa1\u0aa3\u0003\u0170\u00b8\u0000\u0aa2\u0a9d\u0001\u0000\u0000"+
		"\u0000\u0aa2\u0a9e\u0001\u0000\u0000\u0000\u0aa2\u0a9f\u0001\u0000\u0000"+
		"\u0000\u0aa2\u0aa0\u0001\u0000\u0000\u0000\u0aa2\u0aa1\u0001\u0000\u0000"+
		"\u0000\u0aa3\u0165\u0001\u0000\u0000\u0000\u0aa4\u0aa5\u0005\u0167\u0000"+
		"\u0000\u0aa5\u0ab3\u0005\u019b\u0000\u0000\u0aa6\u0aa7\u0005\u0137\u0000"+
		"\u0000\u0aa7\u0ab4\u0007\u0010\u0000\u0000\u0aa8\u0aa9\u0005\u00c7\u0000"+
		"\u0000\u0aa9\u0aad\u0005\u00d1\u0000\u0000\u0aaa\u0aae\u0005\u0163\u0000"+
		"\u0000\u0aab\u0aac\u0005\u0137\u0000\u0000\u0aac\u0aae\u0005E\u0000\u0000"+
		"\u0aad\u0aaa\u0001\u0000\u0000\u0000\u0aad\u0aab\u0001\u0000\u0000\u0000"+
		"\u0aae\u0ab4\u0001\u0000\u0000\u0000\u0aaf\u0ab0\u0005\u01ae\u0000\u0000"+
		"\u0ab0\u0ab1\u0005\u014d\u0000\u0000\u0ab1\u0ab2\u0005\u015e\u0000\u0000"+
		"\u0ab2\u0ab4\u0003\u02fc\u017e\u0000\u0ab3\u0aa6\u0001\u0000\u0000\u0000"+
		"\u0ab3\u0aa8\u0001\u0000\u0000\u0000\u0ab3\u0aaf\u0001\u0000\u0000\u0000"+
		"\u0ab3\u0ab4\u0001\u0000\u0000\u0000\u0ab4\u0ab7\u0001\u0000\u0000\u0000"+
		"\u0ab5\u0ab6\u0005\u00f1\u0000\u0000\u0ab6\u0ab8\u0003\u035c\u01ae\u0000"+
		"\u0ab7\u0ab5\u0001\u0000\u0000\u0000\u0ab7\u0ab8\u0001\u0000\u0000\u0000"+
		"\u0ab8\u0167\u0001\u0000\u0000\u0000\u0ab9\u0aba\u0005\u0167\u0000\u0000"+
		"\u0aba\u0ac4\u0007\u0011\u0000\u0000\u0abb\u0ac5\u0005\u000e\u0000\u0000"+
		"\u0abc\u0ac1\u0003\u0310\u0188\u0000\u0abd\u0abe\u0005\u021f\u0000\u0000"+
		"\u0abe\u0ac0\u0003\u0310\u0188\u0000\u0abf\u0abd\u0001\u0000\u0000\u0000"+
		"\u0ac0\u0ac3\u0001\u0000\u0000\u0000\u0ac1\u0abf\u0001\u0000\u0000\u0000"+
		"\u0ac1\u0ac2\u0001\u0000\u0000\u0000\u0ac2\u0ac5\u0001\u0000\u0000\u0000"+
		"\u0ac3\u0ac1\u0001\u0000\u0000\u0000\u0ac4\u0abb\u0001\u0000\u0000\u0000"+
		"\u0ac4\u0abc\u0001\u0000\u0000\u0000\u0ac5\u0ac6\u0001\u0000\u0000\u0000"+
		"\u0ac6\u0ac7\u0007\u0012\u0000\u0000\u0ac7\u0169\u0001\u0000\u0000\u0000"+
		"\u0ac8\u0aca\u0005D\u0000\u0000\u0ac9\u0acb\u0005\u01c4\u0000\u0000\u0aca"+
		"\u0ac9\u0001\u0000\u0000\u0000\u0aca\u0acb\u0001\u0000\u0000\u0000\u0acb"+
		"\u0ad9\u0001\u0000\u0000\u0000\u0acc\u0acd\u0005C\u0000\u0000\u0acd\u0ada"+
		"\u0003\u0262\u0131\u0000\u0ace\u0ad7\u0005\u009f\u0000\u0000\u0acf\u0ad0"+
		"\u0005S\u0000\u0000\u0ad0\u0ad8\u0003\u0262\u0131\u0000\u0ad1\u0ad8\u0005"+
		"T\u0000\u0000\u0ad2\u0ad5\u0003\u0262\u0131\u0000\u0ad3\u0ad4\u0005\u021f"+
		"\u0000\u0000\u0ad4\u0ad6\u0003\u0262\u0131\u0000\u0ad5\u0ad3\u0001\u0000"+
		"\u0000\u0000\u0ad5\u0ad6\u0001\u0000\u0000\u0000\u0ad6\u0ad8\u0001\u0000"+
		"\u0000\u0000\u0ad7\u0acf\u0001\u0000\u0000\u0000\u0ad7\u0ad1\u0001\u0000"+
		"\u0000\u0000\u0ad7\u0ad2\u0001\u0000\u0000\u0000\u0ad8\u0ada\u0001\u0000"+
		"\u0000\u0000\u0ad9\u0acc\u0001\u0000\u0000\u0000\u0ad9\u0ace\u0001\u0000"+
		"\u0000\u0000\u0ad9\u0ada\u0001\u0000\u0000\u0000\u0ada\u0adc\u0001\u0000"+
		"\u0000\u0000\u0adb\u0add\u0003\u016c\u00b6\u0000\u0adc\u0adb\u0001\u0000"+
		"\u0000\u0000\u0adc\u0add\u0001\u0000\u0000\u0000\u0add\u016b\u0001\u0000"+
		"\u0000\u0000\u0ade\u0ae0\u0005\u01c5\u0000\u0000\u0adf\u0ae1\u0007\u0013"+
		"\u0000\u0000\u0ae0\u0adf\u0001\u0000\u0000\u0000\u0ae0\u0ae1\u0001\u0000"+
		"\u0000\u0000\u0ae1\u0ae3\u0001\u0000\u0000\u0000\u0ae2\u0ae4\u0007\u0014"+
		"\u0000\u0000\u0ae3\u0ae2\u0001\u0000\u0000\u0000\u0ae3\u0ae4\u0001\u0000"+
		"\u0000\u0000\u0ae4\u016d\u0001\u0000\u0000\u0000\u0ae5\u0ae7\u0005\u014d"+
		"\u0000\u0000\u0ae6\u0ae8\u0005\u01c4\u0000\u0000\u0ae7\u0ae6\u0001\u0000"+
		"\u0000\u0000\u0ae7\u0ae8\u0001\u0000\u0000\u0000\u0ae8\u0af0\u0001\u0000"+
		"\u0000\u0000\u0ae9\u0aeb\u0005\u0199\u0000\u0000\u0aea\u0aec\u0005\u0155"+
		"\u0000\u0000\u0aeb\u0aea\u0001\u0000\u0000\u0000\u0aeb\u0aec\u0001\u0000"+
		"\u0000\u0000\u0aec\u0aed\u0001\u0000\u0000\u0000\u0aed\u0af1\u0003\u02fa"+
		"\u017d\u0000\u0aee\u0aef\u0005\u009f\u0000\u0000\u0aef\u0af1\u0003\u035c"+
		"\u01ae\u0000\u0af0\u0ae9\u0001\u0000\u0000\u0000\u0af0\u0aee\u0001\u0000"+
		"\u0000\u0000\u0af0\u0af1\u0001\u0000\u0000\u0000\u0af1\u016f\u0001\u0000"+
		"\u0000\u0000\u0af2\u0af3\u0005\u0155\u0000\u0000\u0af3\u0af4\u0003\u02fa"+
		"\u017d\u0000\u0af4\u0171\u0001\u0000\u0000\u0000\u0af5\u0af6\u0005\u0091"+
		"\u0000\u0000\u0af6\u0afb\u0005\u012a\u0000\u0000\u0af7\u0af8\u0005\u0167"+
		"\u0000\u0000\u0af8\u0af9\u0005\u0181\u0000\u0000\u0af9\u0afa\u0005\u0230"+
		"\u0000\u0000\u0afa\u0afc\u0003\u035c\u01ae\u0000\u0afb\u0af7\u0001\u0000"+
		"\u0000\u0000\u0afb\u0afc\u0001\u0000\u0000\u0000\u0afc\u0aff\u0001\u0000"+
		"\u0000\u0000\u0afd\u0afe\u0005\u00c3\u0000\u0000\u0afe\u0b00\u0003\u032e"+
		"\u0197\u0000\u0aff\u0afd\u0001\u0000\u0000\u0000\u0aff\u0b00\u0001\u0000"+
		"\u0000\u0000\u0b00\u0b01\u0001\u0000\u0000\u0000\u0b01\u0b07\u0005\u009d"+
		"\u0000\u0000\u0b02\u0b08\u0003\u0174\u00ba\u0000\u0b03\u0b08\u0003\u01e8"+
		"\u00f4\u0000\u0b04\u0b08\u0003\u01ee\u00f7\u0000\u0b05\u0b08\u0003\u01f0"+
		"\u00f8\u0000\u0b06\u0b08\u0003\u0208\u0104\u0000\u0b07\u0b02\u0001\u0000"+
		"\u0000\u0000\u0b07\u0b03\u0001\u0000\u0000\u0000\u0b07\u0b04\u0001\u0000"+
		"\u0000\u0000\u0b07\u0b05\u0001\u0000\u0000\u0000\u0b07\u0b06\u0001\u0000"+
		"\u0000\u0000\u0b08\u0173\u0001\u0000\u0000\u0000\u0b09\u0b0b\u0003\u0176"+
		"\u00bb\u0000\u0b0a\u0b09\u0001\u0000\u0000\u0000\u0b0a\u0b0b\u0001\u0000"+
		"\u0000\u0000\u0b0b\u0b0c\u0001\u0000\u0000\u0000\u0b0c\u0b11\u0003\u017e"+
		"\u00bf\u0000\u0b0d\u0b10\u0003\u01e2\u00f1\u0000\u0b0e\u0b10\u0003\u01de"+
		"\u00ef\u0000\u0b0f\u0b0d\u0001\u0000\u0000\u0000\u0b0f\u0b0e\u0001\u0000"+
		"\u0000\u0000\u0b10\u0b13\u0001\u0000\u0000\u0000\u0b11\u0b0f\u0001\u0000"+
		"\u0000\u0000\u0b11\u0b12\u0001\u0000\u0000\u0000\u0b12\u0175\u0001\u0000"+
		"\u0000\u0000\u0b13\u0b11\u0001\u0000\u0000\u0000\u0b14\u0b15\u0005\u01c2"+
		"\u0000\u0000\u0b15\u0b1a\u0003\u0178\u00bc\u0000\u0b16\u0b17\u0005\u021f"+
		"\u0000\u0000\u0b17\u0b19\u0003\u0178\u00bc\u0000\u0b18\u0b16\u0001\u0000"+
		"\u0000\u0000\u0b19\u0b1c\u0001\u0000\u0000\u0000\u0b1a\u0b18\u0001\u0000"+
		"\u0000\u0000\u0b1a\u0b1b\u0001\u0000\u0000\u0000\u0b1b\u0177\u0001\u0000"+
		"\u0000\u0000\u0b1c\u0b1a\u0001\u0000\u0000\u0000\u0b1d\u0b29\u0003\u030e"+
		"\u0187\u0000\u0b1e\u0b1f\u0005\u0219\u0000\u0000\u0b1f\u0b24\u0003\"\u0011"+
		"\u0000\u0b20\u0b21\u0005\u021f\u0000\u0000\u0b21\u0b23\u0003\"\u0011\u0000"+
		"\u0b22\u0b20\u0001\u0000\u0000\u0000\u0b23\u0b26\u0001\u0000\u0000\u0000"+
		"\u0b24\u0b22\u0001\u0000\u0000\u0000\u0b24\u0b25\u0001\u0000\u0000\u0000"+
		"\u0b25\u0b27\u0001\u0000\u0000\u0000\u0b26\u0b24\u0001\u0000\u0000\u0000"+
		"\u0b27\u0b28\u0005\u021a\u0000\u0000\u0b28\u0b2a\u0001\u0000\u0000\u0000"+
		"\u0b29\u0b1e\u0001\u0000\u0000\u0000\u0b29\u0b2a\u0001\u0000\u0000\u0000"+
		"\u0b2a\u0b2b\u0001\u0000\u0000\u0000\u0b2b\u0b2c\u0005\u0015\u0000\u0000"+
		"\u0b2c\u0b2d\u0005\u0219\u0000\u0000\u0b2d\u0b2f\u0003\u017e\u00bf\u0000"+
		"\u0b2e\u0b30\u0003\u01de\u00ef\u0000\u0b2f\u0b2e\u0001\u0000\u0000\u0000"+
		"\u0b2f\u0b30\u0001\u0000\u0000\u0000\u0b30\u0b31\u0001\u0000\u0000\u0000"+
		"\u0b31\u0b33\u0005\u021a\u0000\u0000\u0b32\u0b34\u0003\u017a\u00bd\u0000"+
		"\u0b33\u0b32\u0001\u0000\u0000\u0000\u0b33\u0b34\u0001\u0000\u0000\u0000"+
		"\u0b34\u0b36\u0001\u0000\u0000\u0000\u0b35\u0b37\u0003\u017c\u00be\u0000"+
		"\u0b36\u0b35\u0001\u0000\u0000\u0000\u0b36\u0b37\u0001\u0000\u0000\u0000"+
		"\u0b37\u0179\u0001\u0000\u0000\u0000\u0b38\u0b39\u0005\u0159\u0000\u0000"+
		"\u0b39\u0b3a\u0007\u0015\u0000\u0000\u0b3a\u0b3b\u0005\u0098\u0000\u0000"+
		"\u0b3b\u0b3c\u00050\u0000\u0000\u0b3c\u0b3e\u0003\"\u0011\u0000\u0b3d"+
		"\u0b3f\u0005\u0016\u0000\u0000\u0b3e\u0b3d\u0001\u0000\u0000\u0000\u0b3e"+
		"\u0b3f\u0001\u0000\u0000\u0000\u0b3f\u0b41\u0001\u0000\u0000\u0000\u0b40"+
		"\u0b42\u0005r\u0000\u0000\u0b41\u0b40\u0001\u0000\u0000\u0000\u0b41\u0b42"+
		"\u0001\u0000\u0000\u0000\u0b42\u0b45\u0001\u0000\u0000\u0000\u0b43\u0b44"+
		"\u0005\u0109\u0000\u0000\u0b44\u0b46\u0005\u0098\u0000\u0000\u0b45\u0b43"+
		"\u0001\u0000\u0000\u0000\u0b45\u0b46\u0001\u0000\u0000\u0000\u0b46\u0b49"+
		"\u0001\u0000\u0000\u0000\u0b47\u0b48\u0005\u0109\u0000\u0000\u0b48\u0b4a"+
		"\u0005\u00cd\u0000\u0000\u0b49\u0b47\u0001\u0000\u0000\u0000\u0b49\u0b4a"+
		"\u0001\u0000\u0000\u0000\u0b4a\u0b5d\u0001\u0000\u0000\u0000\u0b4b\u0b4c"+
		"\u0005\u021f\u0000\u0000\u0b4c\u0b4e\u0003\"\u0011\u0000\u0b4d\u0b4f\u0005"+
		"\u0016\u0000\u0000\u0b4e\u0b4d\u0001\u0000\u0000\u0000\u0b4e\u0b4f\u0001"+
		"\u0000\u0000\u0000\u0b4f\u0b51\u0001\u0000\u0000\u0000\u0b50\u0b52\u0005"+
		"r\u0000\u0000\u0b51\u0b50\u0001\u0000\u0000\u0000\u0b51\u0b52\u0001\u0000"+
		"\u0000\u0000\u0b52\u0b55\u0001\u0000\u0000\u0000\u0b53\u0b54\u0005\u0109"+
		"\u0000\u0000\u0b54\u0b56\u0005\u0098\u0000\u0000\u0b55\u0b53\u0001\u0000"+
		"\u0000\u0000\u0b55\u0b56\u0001\u0000\u0000\u0000\u0b56\u0b59\u0001\u0000"+
		"\u0000\u0000\u0b57\u0b58\u0005\u0109\u0000\u0000\u0b58\u0b5a\u0005\u00cd"+
		"\u0000\u0000\u0b59\u0b57\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0001\u0000"+
		"\u0000\u0000\u0b5a\u0b5c\u0001\u0000\u0000\u0000\u0b5b\u0b4b\u0001\u0000"+
		"\u0000\u0000\u0b5c\u0b5f\u0001\u0000\u0000\u0000\u0b5d\u0b5b\u0001\u0000"+
		"\u0000\u0000\u0b5d\u0b5e\u0001\u0000\u0000\u0000\u0b5e\u0b60\u0001\u0000"+
		"\u0000\u0000\u0b5f\u0b5d\u0001\u0000\u0000\u0000\u0b60\u0b61\u0005\u0167"+
		"\u0000\u0000\u0b61\u0b62\u0003\"\u0011\u0000\u0b62\u017b\u0001\u0000\u0000"+
		"\u0000\u0b63\u0b64\u0005^\u0000\u0000\u0b64\u0b69\u0003\"\u0011\u0000"+
		"\u0b65\u0b66\u0005\u021f\u0000\u0000\u0b66\u0b68\u0003\"\u0011\u0000\u0b67"+
		"\u0b65\u0001\u0000\u0000\u0000\u0b68\u0b6b\u0001\u0000\u0000\u0000\u0b69"+
		"\u0b67\u0001\u0000\u0000\u0000\u0b69\u0b6a\u0001\u0000\u0000\u0000\u0b6a"+
		"\u0b6c\u0001\u0000\u0000\u0000\u0b6b\u0b69\u0001\u0000\u0000\u0000\u0b6c"+
		"\u0b6d\u0005\u0167\u0000\u0000\u0b6d\u0b6e\u0003\"\u0011\u0000\u0b6e\u0b6f"+
		"\u0005\u0199\u0000\u0000\u0b6f\u0b70\u0003\u0262\u0131\u0000\u0b70\u0b71"+
		"\u0005l\u0000\u0000\u0b71\u0b72\u0003\u0262\u0131\u0000\u0b72\u017d\u0001"+
		"\u0000\u0000\u0000\u0b73\u0b77\u0003\u0182\u00c1\u0000\u0b74\u0b76\u0003"+
		"\u0180\u00c0\u0000\u0b75\u0b74\u0001\u0000\u0000\u0000\u0b76\u0b79\u0001"+
		"\u0000\u0000\u0000\u0b77\u0b75\u0001\u0000\u0000\u0000\u0b77\u0b78\u0001"+
		"\u0000\u0000\u0000\u0b78\u017f\u0001\u0000\u0000\u0000\u0b79\u0b77\u0001"+
		"\u0000\u0000\u0000\u0b7a\u0b7c\u0005\u01a5\u0000\u0000\u0b7b\u0b7d\u0005"+
		"\u000e\u0000\u0000\u0b7c\u0b7b\u0001\u0000\u0000\u0000\u0b7c\u0b7d\u0001"+
		"\u0000\u0000\u0000\u0b7d\u0b81\u0001\u0000\u0000\u0000\u0b7e\u0b81\u0005"+
		"\u00c1\u0000\u0000\u0b7f\u0b81\u0005\u00e8\u0000\u0000\u0b80\u0b7a\u0001"+
		"\u0000\u0000\u0000\u0b80\u0b7e\u0001\u0000\u0000\u0000\u0b80\u0b7f\u0001"+
		"\u0000\u0000\u0000\u0b81\u0b82\u0001\u0000\u0000\u0000\u0b82\u0b83\u0003"+
		"\u0182\u00c1\u0000\u0b83\u0181\u0001\u0000\u0000\u0000\u0b84\u0b8a\u0003"+
		"\u0184\u00c2\u0000\u0b85\u0b86\u0005\u0219\u0000\u0000\u0b86\u0b87\u0003"+
		"\u017e\u00bf\u0000\u0b87\u0b88\u0005\u021a\u0000\u0000\u0b88\u0b8a\u0001"+
		"\u0000\u0000\u0000\u0b89\u0b84\u0001\u0000\u0000\u0000\u0b89\u0b85\u0001"+
		"\u0000\u0000\u0000\u0b8a\u0183\u0001\u0000\u0000\u0000\u0b8b\u0b8d\u0005"+
		"\u015f\u0000\u0000\u0b8c\u0b8e\u0007\u0016\u0000\u0000\u0b8d\u0b8c\u0001"+
		"\u0000\u0000\u0000\u0b8d\u0b8e\u0001\u0000\u0000\u0000\u0b8e\u0b91\u0001"+
		"\u0000\u0000\u0000\u0b8f\u0b90\u0005\u01d9\u0000\u0000\u0b90\u0b92\u0003"+
		"\u0358\u01ac\u0000\u0b91\u0b8f\u0001\u0000\u0000\u0000\u0b91\u0b92\u0001"+
		"\u0000\u0000\u0000\u0b92\u0b9c\u0001\u0000\u0000\u0000\u0b93\u0b9d\u0005"+
		"\u021c\u0000\u0000\u0b94\u0b99\u0003\u0186\u00c3\u0000\u0b95\u0b96\u0005"+
		"\u021f\u0000\u0000\u0b96\u0b98\u0003\u0186\u00c3\u0000\u0b97\u0b95\u0001"+
		"\u0000\u0000\u0000\u0b98\u0b9b\u0001\u0000\u0000\u0000\u0b99\u0b97\u0001"+
		"\u0000\u0000\u0000\u0b99\u0b9a\u0001\u0000\u0000\u0000\u0b9a\u0b9d\u0001"+
		"\u0000\u0000\u0000\u0b9b\u0b99\u0001\u0000\u0000\u0000\u0b9c\u0b93\u0001"+
		"\u0000\u0000\u0000\u0b9c\u0b94\u0001\u0000\u0000\u0000\u0b9d\u0b9f\u0001"+
		"\u0000\u0000\u0000\u0b9e\u0ba0\u0003\u02f2\u0179\u0000\u0b9f\u0b9e\u0001"+
		"\u0000\u0000\u0000\u0b9f\u0ba0\u0001\u0000\u0000\u0000\u0ba0\u0ba1\u0001"+
		"\u0000\u0000\u0000\u0ba1\u0ba3\u0003\u0188\u00c4\u0000\u0ba2\u0ba4\u0003"+
		"\u0192\u00c9\u0000\u0ba3\u0ba2\u0001\u0000\u0000\u0000\u0ba3\u0ba4\u0001"+
		"\u0000\u0000\u0000\u0ba4\u0ba6\u0001\u0000\u0000\u0000\u0ba5\u0ba7\u0003"+
		"\u02ee\u0177\u0000\u0ba6\u0ba5\u0001\u0000\u0000\u0000\u0ba6\u0ba7\u0001"+
		"\u0000\u0000\u0000\u0ba7\u0ba9\u0001\u0000\u0000\u0000\u0ba8\u0baa\u0003"+
		"\u01e2\u00f1\u0000\u0ba9\u0ba8\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0001"+
		"\u0000\u0000\u0000\u0baa\u0bac\u0001\u0000\u0000\u0000\u0bab\u0bad\u0003"+
		"\u01de\u00ef\u0000\u0bac\u0bab\u0001\u0000\u0000\u0000\u0bac\u0bad\u0001"+
		"\u0000\u0000\u0000\u0bad\u0baf\u0001\u0000\u0000\u0000\u0bae\u0bb0\u0003"+
		"\u01b0\u00d8\u0000\u0baf\u0bae\u0001\u0000\u0000\u0000\u0baf\u0bb0\u0001"+
		"\u0000\u0000\u0000\u0bb0\u0bb2\u0001\u0000\u0000\u0000\u0bb1\u0bb3\u0003"+
		"\u01b4\u00da\u0000\u0bb2\u0bb1\u0001\u0000\u0000\u0000\u0bb2\u0bb3\u0001"+
		"\u0000\u0000\u0000\u0bb3\u0bb5\u0001\u0000\u0000\u0000\u0bb4\u0bb6\u0003"+
		"\u01c0\u00e0\u0000\u0bb5\u0bb4\u0001\u0000\u0000\u0000\u0bb5\u0bb6\u0001"+
		"\u0000\u0000\u0000\u0bb6\u0bbc\u0001\u0000\u0000\u0000\u0bb7\u0bba\u0005"+
		"\u00d8\u0000\u0000\u0bb8\u0bbb\u0003\u0358\u01ac\u0000\u0bb9\u0bbb\u0003"+
		"\u0262\u0131\u0000\u0bba\u0bb8\u0001\u0000\u0000\u0000\u0bba\u0bb9\u0001"+
		"\u0000\u0000\u0000\u0bbb\u0bbd\u0001\u0000\u0000\u0000\u0bbc\u0bb7\u0001"+
		"\u0000\u0000\u0000\u0bbc\u0bbd\u0001\u0000\u0000\u0000\u0bbd\u0185\u0001"+
		"\u0000\u0000\u0000\u0bbe\u0bc0\u0003\u018a\u00c5\u0000\u0bbf\u0bc1\u0003"+
		"\u02e8\u0174\u0000\u0bc0\u0bbf\u0001\u0000\u0000\u0000\u0bc0\u0bc1\u0001"+
		"\u0000\u0000\u0000\u0bc1\u0187\u0001\u0000\u0000\u0000\u0bc2\u0bc5\u0005"+
		"\u00a0\u0000\u0000\u0bc3\u0bc6\u0003\u018c\u00c6\u0000\u0bc4\u0bc6\u0003"+
		"\u0146\u00a3\u0000\u0bc5\u0bc3\u0001\u0000\u0000\u0000\u0bc5\u0bc4\u0001"+
		"\u0000\u0000\u0000\u0bc6\u0189\u0001\u0000\u0000\u0000\u0bc7\u0bc8\u0003"+
		"\u032e\u0197\u0000\u0bc8\u0bc9\u0005\u0212\u0000\u0000\u0bc9\u0bca\u0005"+
		"\u021c\u0000\u0000\u0bca\u0bd0\u0001\u0000\u0000\u0000\u0bcb\u0bd0\u0003"+
		"\u0262\u0131\u0000\u0bcc\u0bd0\u0003\u024c\u0126\u0000\u0bcd\u0bd0\u0003"+
		"\u0122\u0091\u0000\u0bce\u0bd0\u0005\u0108\u0000\u0000\u0bcf\u0bc7\u0001"+
		"\u0000\u0000\u0000\u0bcf\u0bcb\u0001\u0000\u0000\u0000\u0bcf\u0bcc\u0001"+
		"\u0000\u0000\u0000\u0bcf\u0bcd\u0001\u0000\u0000\u0000\u0bcf\u0bce\u0001"+
		"\u0000\u0000\u0000\u0bd0\u018b\u0001\u0000\u0000\u0000\u0bd1\u0bd6\u0003"+
		"\u018e\u00c7\u0000\u0bd2\u0bd3\u0005\u021f\u0000\u0000\u0bd3\u0bd5\u0003"+
		"\u018e\u00c7\u0000\u0bd4\u0bd2\u0001\u0000\u0000\u0000\u0bd5\u0bd8\u0001"+
		"\u0000\u0000\u0000\u0bd6\u0bd4\u0001\u0000\u0000\u0000\u0bd6\u0bd7\u0001"+
		"\u0000\u0000\u0000\u0bd7\u018d\u0001\u0000\u0000\u0000\u0bd8\u0bd6\u0001"+
		"\u0000\u0000\u0000\u0bd9\u0bdd\u0003\u0190\u00c8\u0000\u0bda\u0bdc\u0003"+
		"\u0192\u00c9\u0000\u0bdb\u0bda\u0001\u0000\u0000\u0000\u0bdc\u0bdf\u0001"+
		"\u0000\u0000\u0000\u0bdd\u0bdb\u0001\u0000\u0000\u0000\u0bdd\u0bde\u0001"+
		"\u0000\u0000\u0000\u0bde\u0be2\u0001\u0000\u0000\u0000\u0bdf\u0bdd\u0001"+
		"\u0000\u0000\u0000\u0be0\u0be3\u0003\u019e\u00cf\u0000\u0be1\u0be3\u0003"+
		"\u01aa\u00d5\u0000\u0be2\u0be0\u0001\u0000\u0000\u0000\u0be2\u0be1\u0001"+
		"\u0000\u0000\u0000\u0be2\u0be3\u0001\u0000\u0000\u0000\u0be3\u018f\u0001"+
		"\u0000\u0000\u0000\u0be4\u0be7\u0003\u0226\u0113\u0000\u0be5\u0be8\u0003"+
		"\u019e\u00cf\u0000\u0be6\u0be8\u0003\u01aa\u00d5\u0000\u0be7\u0be5\u0001"+
		"\u0000\u0000\u0000\u0be7\u0be6\u0001\u0000\u0000\u0000\u0be7\u0be8\u0001"+
		"\u0000\u0000\u0000\u0be8\u0c01\u0001\u0000\u0000\u0000\u0be9\u0bea\u0005"+
		"\u0219\u0000\u0000\u0bea\u0bee\u0003\u018e\u00c7\u0000\u0beb\u0bed\u0003"+
		"\u0180\u00c0\u0000\u0bec\u0beb\u0001\u0000\u0000\u0000\u0bed\u0bf0\u0001"+
		"\u0000\u0000\u0000\u0bee\u0bec\u0001\u0000\u0000\u0000\u0bee\u0bef\u0001"+
		"\u0000\u0000\u0000\u0bef\u0bf1\u0001\u0000\u0000\u0000\u0bf0\u0bee\u0001"+
		"\u0000\u0000\u0000\u0bf1\u0bf4\u0005\u021a\u0000\u0000\u0bf2\u0bf5\u0003"+
		"\u019e\u00cf\u0000\u0bf3\u0bf5\u0003\u01aa\u00d5\u0000\u0bf4\u0bf2\u0001"+
		"\u0000\u0000\u0000\u0bf4\u0bf3\u0001\u0000\u0000\u0000\u0bf4\u0bf5\u0001"+
		"\u0000\u0000\u0000\u0bf5\u0c01\u0001\u0000\u0000\u0000\u0bf6\u0bf7\u0005"+
		"\u0113\u0000\u0000\u0bf7\u0bf8\u0005\u0219\u0000\u0000\u0bf8\u0bf9\u0003"+
		"\u0226\u0113\u0000\u0bf9\u0bfa\u0005\u021a\u0000\u0000\u0bfa\u0c01\u0001"+
		"\u0000\u0000\u0000\u0bfb\u0bfe\u0003\u0226\u0113\u0000\u0bfc\u0bff\u0003"+
		"\u019e\u00cf\u0000\u0bfd\u0bff\u0003\u01aa\u00d5\u0000\u0bfe\u0bfc\u0001"+
		"\u0000\u0000\u0000\u0bfe\u0bfd\u0001\u0000\u0000\u0000\u0bfe\u0bff\u0001"+
		"\u0000\u0000\u0000\u0bff\u0c01\u0001\u0000\u0000\u0000\u0c00\u0be4\u0001"+
		"\u0000\u0000\u0000\u0c00\u0be9\u0001\u0000\u0000\u0000\u0c00\u0bf6\u0001"+
		"\u0000\u0000\u0000\u0c00\u0bfb\u0001\u0000\u0000\u0000\u0c01\u0c05\u0001"+
		"\u0000\u0000\u0000\u0c02\u0c04\u0003\u019c\u00ce\u0000\u0c03\u0c02\u0001"+
		"\u0000\u0000\u0000\u0c04\u0c07\u0001\u0000\u0000\u0000\u0c05\u0c03\u0001"+
		"\u0000\u0000\u0000\u0c05\u0c06\u0001\u0000\u0000\u0000\u0c06\u0c0c\u0001"+
		"\u0000\u0000\u0000\u0c07\u0c05\u0001\u0000\u0000\u0000\u0c08\u0c0a\u0005"+
		"\u0015\u0000\u0000\u0c09\u0c08\u0001\u0000\u0000\u0000\u0c09\u0c0a\u0001"+
		"\u0000\u0000\u0000\u0c0a\u0c0b\u0001\u0000\u0000\u0000\u0c0b\u0c0d\u0003"+
		"\u02ea\u0175\u0000\u0c0c\u0c09\u0001\u0000\u0000\u0000\u0c0c\u0c0d\u0001"+
		"\u0000\u0000\u0000\u0c0d\u0c16\u0001\u0000\u0000\u0000\u0c0e\u0c13\u0005"+
		"\u0223\u0000\u0000\u0c0f\u0c11\u0005\u0015\u0000\u0000\u0c10\u0c0f\u0001"+
		"\u0000\u0000\u0000\u0c10\u0c11\u0001\u0000\u0000\u0000\u0c11\u0c12\u0001"+
		"\u0000\u0000\u0000\u0c12\u0c14\u0003\u02ea\u0175\u0000\u0c13\u0c10\u0001"+
		"\u0000\u0000\u0000\u0c13\u0c14\u0001\u0000\u0000\u0000\u0c14\u0c16\u0001"+
		"\u0000\u0000\u0000\u0c15\u0c00\u0001\u0000\u0000\u0000\u0c15\u0c0e\u0001"+
		"\u0000\u0000\u0000\u0c16\u0191\u0001\u0000\u0000\u0000\u0c17\u0c19\u0003"+
		"\u019a\u00cd\u0000\u0c18\u0c17\u0001\u0000\u0000\u0000\u0c18\u0c19\u0001"+
		"\u0000\u0000\u0000\u0c19\u0c1b\u0001\u0000\u0000\u0000\u0c1a\u0c1c\u0007"+
		"\u0017\u0000\u0000\u0c1b\u0c1a\u0001\u0000\u0000\u0000\u0c1b\u0c1c\u0001"+
		"\u0000\u0000\u0000\u0c1c\u0c1f\u0001\u0000\u0000\u0000\u0c1d\u0c20\u0005"+
		"\u00ba\u0000\u0000\u0c1e\u0c20\u0003\u0198\u00cc\u0000\u0c1f\u0c1d\u0001"+
		"\u0000\u0000\u0000\u0c1f\u0c1e\u0001\u0000\u0000\u0000\u0c1f\u0c20\u0001"+
		"\u0000\u0000\u0000\u0c20\u0c21\u0001\u0000\u0000\u0000\u0c21\u0c22\u0005"+
		"\u00ca\u0000\u0000\u0c22\u0c24\u0003\u0190\u00c8\u0000\u0c23\u0c25\u0003"+
		"\u019a\u00cd\u0000\u0c24\u0c23\u0001\u0000\u0000\u0000\u0c24\u0c25\u0001"+
		"\u0000\u0000\u0000\u0c25\u0c2a\u0001\u0000\u0000\u0000\u0c26\u0c29\u0003"+
		"\u0194\u00ca\u0000\u0c27\u0c29\u0003\u0196\u00cb\u0000\u0c28\u0c26\u0001"+
		"\u0000\u0000\u0000\u0c28\u0c27\u0001\u0000\u0000\u0000\u0c29\u0c2c\u0001"+
		"\u0000\u0000\u0000\u0c2a\u0c28\u0001\u0000\u0000\u0000\u0c2a\u0c2b\u0001"+
		"\u0000\u0000\u0000\u0c2b\u0193\u0001\u0000\u0000\u0000\u0c2c\u0c2a\u0001"+
		"\u0000\u0000\u0000\u0c2d\u0c2e\u0005\u0112\u0000\u0000\u0c2e\u0c2f\u0003"+
		"\u0234\u011a\u0000\u0c2f\u0195\u0001\u0000\u0000\u0000\u0c30\u0c31\u0005"+
		"\u01af\u0000\u0000\u0c31\u0c32\u0005\u0219\u0000\u0000\u0c32\u0c37\u0003"+
		"\"\u0011\u0000\u0c33\u0c34\u0005\u021f\u0000\u0000\u0c34\u0c36\u0003\""+
		"\u0011\u0000\u0c35\u0c33\u0001\u0000\u0000\u0000\u0c36\u0c39\u0001\u0000"+
		"\u0000\u0000\u0c37\u0c35\u0001\u0000\u0000\u0000\u0c37\u0c38\u0001\u0000"+
		"\u0000\u0000\u0c38\u0c3a\u0001\u0000\u0000\u0000\u0c39\u0c37\u0001\u0000"+
		"\u0000\u0000\u0c3a\u0c3b\u0005\u021a\u0000\u0000\u0c3b\u0197\u0001\u0000"+
		"\u0000\u0000\u0c3c\u0c3e\u0007\u0018\u0000\u0000\u0c3d\u0c3f\u0005\u011c"+
		"\u0000\u0000\u0c3e\u0c3d\u0001\u0000\u0000\u0000\u0c3e\u0c3f\u0001\u0000"+
		"\u0000\u0000\u0c3f\u0199\u0001\u0000\u0000\u0000\u0c40\u0c41\u0005\u0123"+
		"\u0000\u0000\u0c41\u0c4f\u00050\u0000\u0000\u0c42\u0c43\u0005\u0219\u0000"+
		"\u0000\u0c43\u0c44\u0003\u017e\u00bf\u0000\u0c44\u0c45\u0005\u021a\u0000"+
		"\u0000\u0c45\u0c50\u0001\u0000\u0000\u0000\u0c46\u0c50\u0003\u0232\u0119"+
		"\u0000\u0c47\u0c4c\u0003\u0262\u0131\u0000\u0c48\u0c49\u0005\u021f\u0000"+
		"\u0000\u0c49\u0c4b\u0003\u0262\u0131\u0000\u0c4a\u0c48\u0001\u0000\u0000"+
		"\u0000\u0c4b\u0c4e\u0001\u0000\u0000\u0000\u0c4c\u0c4a\u0001\u0000\u0000"+
		"\u0000\u0c4c\u0c4d\u0001\u0000\u0000\u0000\u0c4d\u0c50\u0001\u0000\u0000"+
		"\u0000\u0c4e\u0c4c\u0001\u0000\u0000\u0000\u0c4f\u0c42\u0001\u0000\u0000"+
		"\u0000\u0c4f\u0c46\u0001\u0000\u0000\u0000\u0c4f\u0c47\u0001\u0000\u0000"+
		"\u0000\u0c50\u019b\u0001\u0000\u0000\u0000\u0c51\u0c52\u0005\u01b9\u0000"+
		"\u0000\u0c52\u0c53\u0005\"\u0000\u0000\u0c53\u0c54\u0007\u0019\u0000\u0000"+
		"\u0c54\u0c5a\u0003\u0262\u0131\u0000\u0c55\u0c56\u0005\u0015\u0000\u0000"+
		"\u0c56\u0c57\u0005\u010e\u0000\u0000\u0c57\u0c58\u0007\u001a\u0000\u0000"+
		"\u0c58\u0c5a\u0003\u0262\u0131\u0000\u0c59\u0c51\u0001\u0000\u0000\u0000"+
		"\u0c59\u0c55\u0001\u0000\u0000\u0000\u0c5a\u019d\u0001\u0000\u0000\u0000"+
		"\u0c5b\u0c5d\u0005\u0129\u0000\u0000\u0c5c\u0c5e\u0005\u01c6\u0000\u0000"+
		"\u0c5d\u0c5c\u0001\u0000\u0000\u0000\u0c5d\u0c5e\u0001\u0000\u0000\u0000"+
		"\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5f\u0c60\u0005\u0219\u0000\u0000"+
		"\u0c60\u0c65\u0003\u01a0\u00d0\u0000\u0c61\u0c62\u0005\u021f\u0000\u0000"+
		"\u0c62\u0c64\u0003\u01a0\u00d0\u0000\u0c63\u0c61\u0001\u0000\u0000\u0000"+
		"\u0c64\u0c67\u0001\u0000\u0000\u0000\u0c65\u0c63\u0001\u0000\u0000\u0000"+
		"\u0c65\u0c66\u0001\u0000\u0000\u0000\u0c66\u0c68\u0001\u0000\u0000\u0000"+
		"\u0c67\u0c65\u0001\u0000\u0000\u0000\u0c68\u0c69\u0003\u01a2\u00d1\u0000"+
		"\u0c69\u0c6a\u0003\u01a4\u00d2\u0000\u0c6a\u0c6b\u0005\u021a\u0000\u0000"+
		"\u0c6b\u019f\u0001\u0000\u0000\u0000\u0c6c\u0c6d\u0003\u030c\u0186\u0000"+
		"\u0c6d\u0c6e\u0005\u0219\u0000\u0000\u0c6e\u0c6f\u0003\u0262\u0131\u0000"+
		"\u0c6f\u0c71\u0005\u021a\u0000\u0000\u0c70\u0c72\u0003\u02e8\u0174\u0000"+
		"\u0c71\u0c70\u0001\u0000\u0000\u0000\u0c71\u0c72\u0001\u0000\u0000\u0000"+
		"\u0c72\u01a1\u0001\u0000\u0000\u0000\u0c73\u0c80\u0005\u009d\u0000\u0000"+
		"\u0c74\u0c81\u0003\"\u0011\u0000\u0c75\u0c76\u0005\u0219\u0000\u0000\u0c76"+
		"\u0c7b\u0003\"\u0011\u0000\u0c77\u0c78\u0005\u021f\u0000\u0000\u0c78\u0c7a"+
		"\u0003\"\u0011\u0000\u0c79\u0c77\u0001\u0000\u0000\u0000\u0c7a\u0c7d\u0001"+
		"\u0000\u0000\u0000\u0c7b\u0c79\u0001\u0000\u0000\u0000\u0c7b\u0c7c\u0001"+
		"\u0000\u0000\u0000\u0c7c\u0c7e\u0001\u0000\u0000\u0000\u0c7d\u0c7b\u0001"+
		"\u0000\u0000\u0000\u0c7e\u0c7f\u0005\u021a\u0000\u0000\u0c7f\u0c81\u0001"+
		"\u0000\u0000\u0000\u0c80\u0c74\u0001\u0000\u0000\u0000\u0c80\u0c75\u0001"+
		"\u0000\u0000\u0000\u0c81\u01a3\u0001\u0000\u0000\u0000\u0c82\u0c83\u0005"+
		"\u00af\u0000\u0000\u0c83\u0c95\u0005\u0219\u0000\u0000\u0c84\u0c96\u0003"+
		"\u017e\u00bf\u0000\u0c85\u0c8a\u0005\u0013\u0000\u0000\u0c86\u0c87\u0005"+
		"\u021f\u0000\u0000\u0c87\u0c89\u0005\u0013\u0000\u0000\u0c88\u0c86\u0001"+
		"\u0000\u0000\u0000\u0c89\u0c8c\u0001\u0000\u0000\u0000\u0c8a\u0c88\u0001"+
		"\u0000\u0000\u0000\u0c8a\u0c8b\u0001\u0000\u0000\u0000\u0c8b\u0c96\u0001"+
		"\u0000\u0000\u0000\u0c8c\u0c8a\u0001\u0000\u0000\u0000\u0c8d\u0c92\u0003"+
		"\u01a6\u00d3\u0000\u0c8e\u0c8f\u0005\u021f\u0000\u0000\u0c8f\u0c91\u0003"+
		"\u01a6\u00d3\u0000\u0c90\u0c8e\u0001\u0000\u0000\u0000\u0c91\u0c94\u0001"+
		"\u0000\u0000\u0000\u0c92\u0c90\u0001\u0000\u0000\u0000\u0c92\u0c93\u0001"+
		"\u0000\u0000\u0000\u0c93\u0c96\u0001\u0000\u0000\u0000\u0c94\u0c92\u0001"+
		"\u0000\u0000\u0000\u0c95\u0c84\u0001\u0000\u0000\u0000\u0c95\u0c85\u0001"+
		"\u0000\u0000\u0000\u0c95\u0c8d\u0001\u0000\u0000\u0000\u0c96\u0c97\u0001"+
		"\u0000\u0000\u0000\u0c97\u0c98\u0005\u021a\u0000\u0000\u0c98\u01a5\u0001"+
		"\u0000\u0000\u0000\u0c99\u0c9b\u0003\u01a8\u00d4\u0000\u0c9a\u0c9c\u0003"+
		"\u02e8\u0174\u0000\u0c9b\u0c9a\u0001\u0000\u0000\u0000\u0c9b\u0c9c\u0001"+
		"\u0000\u0000\u0000\u0c9c\u01a7\u0001\u0000\u0000\u0000\u0c9d\u0ca0\u0003"+
		"\u0262\u0131\u0000\u0c9e\u0ca0\u0003\u0232\u0119\u0000\u0c9f\u0c9d\u0001"+
		"\u0000\u0000\u0000\u0c9f\u0c9e\u0001\u0000\u0000\u0000\u0ca0\u01a9\u0001"+
		"\u0000\u0000\u0000\u0ca1\u0ca4\u0005\u01a8\u0000\u0000\u0ca2\u0ca3\u0007"+
		"\u001b\u0000\u0000\u0ca3\u0ca5\u0005\u0109\u0000\u0000\u0ca4\u0ca2\u0001"+
		"\u0000\u0000\u0000\u0ca4\u0ca5\u0001\u0000\u0000\u0000\u0ca5\u0ca6\u0001"+
		"\u0000\u0000\u0000\u0ca6\u0cb3\u0005\u0219\u0000\u0000\u0ca7\u0cb4\u0003"+
		"\"\u0011\u0000\u0ca8\u0ca9\u0005\u0219\u0000\u0000\u0ca9\u0cae\u0003\""+
		"\u0011\u0000\u0caa\u0cab\u0005\u021f\u0000\u0000\u0cab\u0cad\u0003\"\u0011"+
		"\u0000\u0cac\u0caa\u0001\u0000\u0000\u0000\u0cad\u0cb0\u0001\u0000\u0000"+
		"\u0000\u0cae\u0cac\u0001\u0000\u0000\u0000\u0cae\u0caf\u0001\u0000\u0000"+
		"\u0000\u0caf\u0cb1\u0001\u0000\u0000\u0000\u0cb0\u0cae\u0001\u0000\u0000"+
		"\u0000\u0cb1\u0cb2\u0005\u021a\u0000\u0000\u0cb2\u0cb4\u0001\u0000\u0000"+
		"\u0000\u0cb3\u0ca7\u0001\u0000\u0000\u0000\u0cb3\u0ca8\u0001\u0000\u0000"+
		"\u0000\u0cb4\u0cb5\u0001\u0000\u0000\u0000\u0cb5\u0cb6\u0003\u01a2\u00d1"+
		"\u0000\u0cb6\u0cb7\u0003\u01ac\u00d6\u0000\u0cb7\u0cb8\u0005\u021a\u0000"+
		"\u0000\u0cb8\u01ab\u0001\u0000\u0000\u0000\u0cb9\u0cba\u0005\u00af\u0000"+
		"\u0000\u0cba\u0cbb\u0005\u0219\u0000\u0000\u0cbb\u0cc0\u0003\u01ae\u00d7"+
		"\u0000\u0cbc\u0cbd\u0005\u021f\u0000\u0000\u0cbd\u0cbf\u0003\u01ae\u00d7"+
		"\u0000\u0cbe\u0cbc\u0001\u0000\u0000\u0000\u0cbf\u0cc2\u0001\u0000\u0000"+
		"\u0000\u0cc0\u0cbe\u0001\u0000\u0000\u0000\u0cc0\u0cc1\u0001\u0000\u0000"+
		"\u0000\u0cc1\u0cc3\u0001\u0000\u0000\u0000\u0cc2\u0cc0\u0001\u0000\u0000"+
		"\u0000\u0cc3\u0cc4\u0005\u021a\u0000\u0000\u0cc4\u01ad\u0001\u0000\u0000"+
		"\u0000\u0cc5\u0cd2\u0003\"\u0011\u0000\u0cc6\u0cc7\u0005\u0219\u0000\u0000"+
		"\u0cc7\u0ccc\u0003\"\u0011\u0000\u0cc8\u0cc9\u0005\u021f\u0000\u0000\u0cc9"+
		"\u0ccb\u0003\"\u0011\u0000\u0cca\u0cc8\u0001\u0000\u0000\u0000\u0ccb\u0cce"+
		"\u0001\u0000\u0000\u0000\u0ccc\u0cca\u0001\u0000\u0000\u0000\u0ccc\u0ccd"+
		"\u0001\u0000\u0000\u0000\u0ccd\u0ccf\u0001\u0000\u0000\u0000\u0cce\u0ccc"+
		"\u0001\u0000\u0000\u0000\u0ccf\u0cd0\u0005\u021a\u0000\u0000\u0cd0\u0cd2"+
		"\u0001\u0000\u0000\u0000\u0cd1\u0cc5\u0001\u0000\u0000\u0000\u0cd1\u0cc6"+
		"\u0001\u0000\u0000\u0000\u0cd2\u0ce2\u0001\u0000\u0000\u0000\u0cd3\u0ce0"+
		"\u0005\u0015\u0000\u0000\u0cd4\u0ce1\u0003\u0356\u01ab\u0000\u0cd5\u0cd6"+
		"\u0005\u0219\u0000\u0000\u0cd6\u0cdb\u0003\u0356\u01ab\u0000\u0cd7\u0cd8"+
		"\u0005\u021f\u0000\u0000\u0cd8\u0cda\u0003\u0356\u01ab\u0000\u0cd9\u0cd7"+
		"\u0001\u0000\u0000\u0000\u0cda\u0cdd\u0001\u0000\u0000\u0000\u0cdb\u0cd9"+
		"\u0001\u0000\u0000\u0000\u0cdb\u0cdc\u0001\u0000\u0000\u0000\u0cdc\u0cde"+
		"\u0001\u0000\u0000\u0000\u0cdd\u0cdb\u0001\u0000\u0000\u0000\u0cde\u0cdf"+
		"\u0005\u021a\u0000\u0000\u0cdf\u0ce1\u0001\u0000\u0000\u0000\u0ce0\u0cd4"+
		"\u0001\u0000\u0000\u0000\u0ce0\u0cd5\u0001\u0000\u0000\u0000\u0ce1\u0ce3"+
		"\u0001\u0000\u0000\u0000\u0ce2\u0cd3\u0001\u0000\u0000\u0000\u0ce2\u0ce3"+
		"\u0001\u0000\u0000\u0000\u0ce3\u01af\u0001\u0000\u0000\u0000\u0ce4\u0ce5"+
		"\u0005I\u0000\u0000\u0ce5\u0ce7\u00050\u0000\u0000\u0ce6\u0ce8\u0005\u00ff"+
		"\u0000\u0000\u0ce7\u0ce6\u0001\u0000\u0000\u0000\u0ce7\u0ce8\u0001\u0000"+
		"\u0000\u0000\u0ce8\u0ce9\u0001\u0000\u0000\u0000\u0ce9\u0ceb\u0003\u0234"+
		"\u011a\u0000\u0cea\u0cec\u0003\u01b2\u00d9\u0000\u0ceb\u0cea\u0001\u0000"+
		"\u0000\u0000\u0ceb\u0cec\u0001\u0000\u0000\u0000\u0cec\u0cf6\u0001\u0000"+
		"\u0000\u0000\u0ced\u0cee\u0003\u01b2\u00d9\u0000\u0cee\u0cef\u0005I\u0000"+
		"\u0000\u0cef\u0cf1\u00050\u0000\u0000\u0cf0\u0cf2\u0005\u00ff\u0000\u0000"+
		"\u0cf1\u0cf0\u0001\u0000\u0000\u0000\u0cf1\u0cf2\u0001\u0000\u0000\u0000"+
		"\u0cf2\u0cf3\u0001\u0000\u0000\u0000\u0cf3\u0cf4\u0003\u0234\u011a\u0000"+
		"\u0cf4\u0cf6\u0001\u0000\u0000\u0000\u0cf5\u0ce4\u0001\u0000\u0000\u0000"+
		"\u0cf5\u0ced\u0001\u0000\u0000\u0000\u0cf6\u01b1\u0001\u0000\u0000\u0000"+
		"\u0cf7\u0cf8\u0005\u017e\u0000\u0000\u0cf8\u0cf9\u0005\u01c2\u0000\u0000"+
		"\u0cf9\u0cfa\u0003\u0234\u011a\u0000\u0cfa\u01b3\u0001\u0000\u0000\u0000"+
		"\u0cfb\u0cfc\u0005\u00a5\u0000\u0000\u0cfc\u0cfd\u00050\u0000\u0000\u0cfd"+
		"\u0d02\u0003\u01b6\u00db\u0000\u0cfe\u0cff\u0005\u021f\u0000\u0000\u0cff"+
		"\u0d01\u0003\u01b6\u00db\u0000\u0d00\u0cfe\u0001\u0000\u0000\u0000\u0d01"+
		"\u0d04\u0001\u0000\u0000\u0000\u0d02\u0d00\u0001\u0000\u0000\u0000\u0d02"+
		"\u0d03\u0001\u0000\u0000\u0000\u0d03\u0d06\u0001\u0000\u0000\u0000\u0d04"+
		"\u0d02\u0001\u0000\u0000\u0000\u0d05\u0d07\u0003\u01be\u00df\u0000\u0d06"+
		"\u0d05\u0001\u0000\u0000\u0000\u0d06\u0d07\u0001\u0000\u0000\u0000\u0d07"+
		"\u0d16\u0001\u0000\u0000\u0000\u0d08\u0d13\u0003\u01be\u00df\u0000\u0d09"+
		"\u0d0a\u0005\u00a5\u0000\u0000\u0d0a\u0d0b\u00050\u0000\u0000\u0d0b\u0d10"+
		"\u0003\u01b6\u00db\u0000\u0d0c\u0d0d\u0005\u021f\u0000\u0000\u0d0d\u0d0f"+
		"\u0003\u01b6\u00db\u0000\u0d0e\u0d0c\u0001\u0000\u0000\u0000\u0d0f\u0d12"+
		"\u0001\u0000\u0000\u0000\u0d10\u0d0e\u0001\u0000\u0000\u0000\u0d10\u0d11"+
		"\u0001\u0000\u0000\u0000\u0d11\u0d14\u0001\u0000\u0000\u0000\u0d12\u0d10"+
		"\u0001\u0000\u0000\u0000\u0d13\u0d09\u0001\u0000\u0000\u0000\u0d13\u0d14"+
		"\u0001\u0000\u0000\u0000\u0d14\u0d16\u0001\u0000\u0000\u0000\u0d15\u0cfb"+
		"\u0001\u0000\u0000\u0000\u0d15\u0d08\u0001\u0000\u0000\u0000\u0d16\u01b5"+
		"\u0001\u0000\u0000\u0000\u0d17\u0d1b\u0003\u01ba\u00dd\u0000\u0d18\u0d1b"+
		"\u0003\u01b8\u00dc\u0000\u0d19\u0d1b\u0003\u0262\u0131\u0000\u0d1a\u0d17"+
		"\u0001\u0000\u0000\u0000\u0d1a\u0d18\u0001\u0000\u0000\u0000\u0d1a\u0d19"+
		"\u0001\u0000\u0000\u0000\u0d1b\u01b7\u0001\u0000\u0000\u0000\u0d1c\u0d1d"+
		"\u0007\u001c\u0000\u0000\u0d1d\u0d1e\u0005\u0219\u0000\u0000\u0d1e\u0d23"+
		"\u0003\u01bc\u00de\u0000\u0d1f\u0d20\u0005\u021f\u0000\u0000\u0d20\u0d22"+
		"\u0003\u01bc\u00de\u0000\u0d21\u0d1f\u0001\u0000\u0000\u0000\u0d22\u0d25"+
		"\u0001\u0000\u0000\u0000\u0d23\u0d21\u0001\u0000\u0000\u0000\u0d23\u0d24"+
		"\u0001\u0000\u0000\u0000\u0d24\u0d26\u0001\u0000\u0000\u0000\u0d25\u0d23"+
		"\u0001\u0000\u0000\u0000\u0d26\u0d27\u0005\u021a\u0000\u0000\u0d27\u01b9"+
		"\u0001\u0000\u0000\u0000\u0d28\u0d29\u0005\u00a6\u0000\u0000\u0d29\u0d2a"+
		"\u0005\u0168\u0000\u0000\u0d2a\u0d2b\u0005\u0219\u0000\u0000\u0d2b\u0d30"+
		"\u0003\u01bc\u00de\u0000\u0d2c\u0d2d\u0005\u021f\u0000\u0000\u0d2d\u0d2f"+
		"\u0003\u01bc\u00de\u0000\u0d2e\u0d2c\u0001\u0000\u0000\u0000\u0d2f\u0d32"+
		"\u0001\u0000\u0000\u0000\u0d30\u0d2e\u0001\u0000\u0000\u0000\u0d30\u0d31"+
		"\u0001\u0000\u0000\u0000\u0d31\u0d33\u0001\u0000\u0000\u0000\u0d32\u0d30"+
		"\u0001\u0000\u0000\u0000\u0d33\u0d34\u0005\u021a\u0000\u0000\u0d34\u01bb"+
		"\u0001\u0000\u0000\u0000\u0d35\u0d39\u0003\u01b8\u00dc\u0000\u0d36\u0d39"+
		"\u0003\u0232\u0119\u0000\u0d37\u0d39\u0003\u0262\u0131\u0000\u0d38\u0d35"+
		"\u0001\u0000\u0000\u0000\u0d38\u0d36\u0001\u0000\u0000\u0000\u0d38\u0d37"+
		"\u0001\u0000\u0000\u0000\u0d39\u01bd\u0001\u0000\u0000\u0000\u0d3a\u0d3b"+
		"\u0005\u00a8\u0000\u0000\u0d3b\u0d3c\u0003\u0234\u011a\u0000\u0d3c\u01bf"+
		"\u0001\u0000\u0000\u0000\u0d3d\u0d41\u0005\u00ed\u0000\u0000\u0d3e\u0d40"+
		"\u0003\u01c2\u00e1\u0000\u0d3f\u0d3e\u0001\u0000\u0000\u0000\u0d40\u0d43"+
		"\u0001\u0000\u0000\u0000\u0d41\u0d3f\u0001\u0000\u0000\u0000\u0d41\u0d42"+
		"\u0001\u0000\u0000\u0000\u0d42\u0d45\u0001\u0000\u0000\u0000\u0d43\u0d41"+
		"\u0001\u0000\u0000\u0000\u0d44\u0d46\u0003\u01c4\u00e2\u0000\u0d45\u0d44"+
		"\u0001\u0000\u0000\u0000\u0d45\u0d46\u0001\u0000\u0000\u0000\u0d46\u0d4a"+
		"\u0001\u0000\u0000\u0000\u0d47\u0d49\u0003\u01c6\u00e3\u0000\u0d48\u0d47"+
		"\u0001\u0000\u0000\u0000\u0d49\u0d4c\u0001\u0000\u0000\u0000\u0d4a\u0d48"+
		"\u0001\u0000\u0000\u0000\u0d4a\u0d4b\u0001\u0000\u0000\u0000\u0d4b\u0d4d"+
		"\u0001\u0000\u0000\u0000\u0d4c\u0d4a\u0001\u0000\u0000\u0000\u0d4d\u0d4e"+
		"\u0003\u01c8\u00e4\u0000\u0d4e\u01c1\u0001\u0000\u0000\u0000\u0d4f\u0d50"+
		"\u0007\u001d\u0000\u0000\u0d50\u0d58\u0005\u00f5\u0000\u0000\u0d51\u0d55"+
		"\u0005\u01a6\u0000\u0000\u0d52\u0d56\u0005t\u0000\u0000\u0d53\u0d54\u0005"+
		"\u0170\u0000\u0000\u0d54\u0d56\u0005\u013c\u0000\u0000\u0d55\u0d52\u0001"+
		"\u0000\u0000\u0000\u0d55\u0d53\u0001\u0000\u0000\u0000\u0d56\u0d58\u0001"+
		"\u0000\u0000\u0000\u0d57\u0d4f\u0001\u0000\u0000\u0000\u0d57\u0d51\u0001"+
		"\u0000\u0000\u0000\u0d58\u01c3\u0001\u0000\u0000\u0000\u0d59\u0d5a\u0005"+
		"\u0146\u0000\u0000\u0d5a\u0d5b\u0007\u001e\u0000\u0000\u0d5b\u0d5c\u0005"+
		"\u0151\u0000\u0000\u0d5c\u01c5\u0001\u0000\u0000\u0000\u0d5d\u0d5e\u0005"+
		"\u013c\u0000\u0000\u0d5e\u0d5f\u0003\u0308\u0184\u0000\u0d5f\u0d60\u0005"+
		"\u0112\u0000\u0000\u0d60\u0d61\u0005\u0219\u0000\u0000\u0d61\u0d62\u0003"+
		"\u017e\u00bf\u0000\u0d62\u0d63\u0005\u021a\u0000\u0000\u0d63\u0d67\u0003"+
		"\u01ca\u00e5\u0000\u0d64\u0d66\u0003\u01c2\u00e1\u0000\u0d65\u0d64\u0001"+
		"\u0000\u0000\u0000\u0d66\u0d69\u0001\u0000\u0000\u0000\u0d67\u0d65\u0001"+
		"\u0000\u0000\u0000\u0d67\u0d68\u0001\u0000\u0000\u0000\u0d68\u01c7\u0001"+
		"\u0000\u0000\u0000\u0d69\u0d67\u0001\u0000\u0000\u0000\u0d6a\u0d6b\u0005"+
		"\u00e1\u0000\u0000\u0d6b\u0d6d\u0003\u030a\u0185\u0000\u0d6c\u0d6a\u0001"+
		"\u0000\u0000\u0000\u0d6c\u0d6d\u0001\u0000\u0000\u0000\u0d6d\u0d6e\u0001"+
		"\u0000\u0000\u0000\u0d6e\u0d72\u0003\u01ca\u00e5\u0000\u0d6f\u0d71\u0003"+
		"\u01c2\u00e1\u0000\u0d70\u0d6f\u0001\u0000\u0000\u0000\u0d71\u0d74\u0001"+
		"\u0000\u0000\u0000\u0d72\u0d70\u0001\u0000\u0000\u0000\u0d72\u0d73\u0001"+
		"\u0000\u0000\u0000\u0d73\u0d75\u0001\u0000\u0000\u0000\u0d74\u0d72\u0001"+
		"\u0000\u0000\u0000\u0d75\u0d76\u0003\u01d2\u00e9\u0000\u0d76\u01c9\u0001"+
		"\u0000\u0000\u0000\u0d77\u0d79\u0003\u01cc\u00e6\u0000\u0d78\u0d77\u0001"+
		"\u0000\u0000\u0000\u0d78\u0d79\u0001\u0000\u0000\u0000\u0d79\u0d7a\u0001"+
		"\u0000\u0000\u0000\u0d7a\u0d7b\u0005t\u0000\u0000\u0d7b\u0d7c\u00050\u0000"+
		"\u0000\u0d7c\u0d7d\u0003\u01ce\u00e7\u0000\u0d7d\u0d7e\u0005\u00e5\u0000"+
		"\u0000\u0d7e\u0d7f\u0003\u01ce\u00e7\u0000\u0d7f\u01cb\u0001\u0000\u0000"+
		"\u0000\u0d80\u0d81\u0005\u0123\u0000\u0000\u0d81\u0d82\u00050\u0000\u0000"+
		"\u0d82\u0d83\u0003\u01ce\u00e7\u0000\u0d83\u01cd\u0001\u0000\u0000\u0000"+
		"\u0d84\u0d85\u0005\u0219\u0000\u0000\u0d85\u0d8a\u0003\u01d0\u00e8\u0000"+
		"\u0d86\u0d87\u0005\u021f\u0000\u0000\u0d87\u0d89\u0003\u01d0\u00e8\u0000"+
		"\u0d88\u0d86\u0001\u0000\u0000\u0000\u0d89\u0d8c\u0001\u0000\u0000\u0000"+
		"\u0d8a\u0d88\u0001\u0000\u0000\u0000\u0d8a\u0d8b\u0001\u0000\u0000\u0000"+
		"\u0d8b\u0d8d\u0001\u0000\u0000\u0000\u0d8c\u0d8a\u0001\u0000\u0000\u0000"+
		"\u0d8d\u0d8e\u0005\u021a\u0000\u0000\u0d8e\u01cf\u0001\u0000\u0000\u0000"+
		"\u0d8f\u0d91\u0003\u0262\u0131\u0000\u0d90\u0d92\u0003\u02ea\u0175\u0000"+
		"\u0d91\u0d90\u0001\u0000\u0000\u0000\u0d91\u0d92\u0001\u0000\u0000\u0000"+
		"\u0d92\u01d1\u0001\u0000\u0000\u0000\u0d93\u0d95\u0003\u01d4\u00ea\u0000"+
		"\u0d94\u0d93\u0001\u0000\u0000\u0000\u0d94\u0d95\u0001\u0000\u0000\u0000"+
		"\u0d95\u0d96\u0001\u0000\u0000\u0000\u0d96\u0d97\u0005\u0219\u0000\u0000"+
		"\u0d97\u0d9c\u0003\u01d6\u00eb\u0000\u0d98\u0d99\u0005\u021f\u0000\u0000"+
		"\u0d99\u0d9b\u0003\u01d6\u00eb\u0000\u0d9a\u0d98\u0001\u0000\u0000\u0000"+
		"\u0d9b\u0d9e\u0001\u0000\u0000\u0000\u0d9c\u0d9a\u0001\u0000\u0000\u0000"+
		"\u0d9c\u0d9d\u0001\u0000\u0000\u0000\u0d9d\u0d9f\u0001\u0000\u0000\u0000"+
		"\u0d9e\u0d9c\u0001\u0000\u0000\u0000\u0d9f\u0da0\u0005\u021a\u0000\u0000"+
		"\u0da0\u01d3\u0001\u0000\u0000\u0000\u0da1\u0da7\u0005\u0152\u0000\u0000"+
		"\u0da2\u0da8\u0005\u01aa\u0000\u0000\u0da3\u0da5\u0005\u01ac\u0000\u0000"+
		"\u0da4\u0da6\u0005\u000e\u0000\u0000\u0da5\u0da4\u0001\u0000\u0000\u0000"+
		"\u0da5\u0da6\u0001\u0000\u0000\u0000\u0da6\u0da8\u0001\u0000\u0000\u0000"+
		"\u0da7\u0da2\u0001\u0000\u0000\u0000\u0da7\u0da3\u0001\u0000\u0000\u0000"+
		"\u0da7\u0da8\u0001\u0000\u0000\u0000\u0da8\u0dab\u0001\u0000\u0000\u0000"+
		"\u0da9\u0daa\u0007\u001f\u0000\u0000\u0daa\u0dac\u0005\u0118\u0000\u0000"+
		"\u0dab\u0da9\u0001\u0000\u0000\u0000\u0dab\u0dac\u0001\u0000\u0000\u0000"+
		"\u0dac\u0dae\u0001\u0000\u0000\u0000\u0dad\u0daf\u0003\u01da\u00ed\u0000"+
		"\u0dae\u0dad\u0001\u0000\u0000\u0000\u0dae\u0daf\u0001\u0000\u0000\u0000"+
		"\u0daf\u01d5\u0001\u0000\u0000\u0000\u0db0\u0db6\u0005\u01aa\u0000\u0000"+
		"\u0db1\u0db3\u0005\u01ac\u0000\u0000\u0db2\u0db4\u0005\u000e\u0000\u0000"+
		"\u0db3\u0db2\u0001\u0000\u0000\u0000\u0db3\u0db4\u0001\u0000\u0000\u0000"+
		"\u0db4\u0db6\u0001\u0000\u0000\u0000\u0db5\u0db0\u0001\u0000\u0000\u0000"+
		"\u0db5\u0db1\u0001\u0000\u0000\u0000\u0db5\u0db6\u0001\u0000\u0000\u0000"+
		"\u0db6\u0db7\u0001\u0000\u0000\u0000\u0db7\u0db9\u0003\u01d8\u00ec\u0000"+
		"\u0db8\u0dba\u0003\u01de\u00ef\u0000\u0db9\u0db8\u0001\u0000\u0000\u0000"+
		"\u0db9\u0dba\u0001\u0000\u0000\u0000\u0dba\u0dbb\u0001\u0000\u0000\u0000"+
		"\u0dbb\u0dbc\u0005\u0230\u0000\u0000\u0dbc\u0dbd\u0003\u0262\u0131\u0000"+
		"\u0dbd\u01d7\u0001\u0000\u0000\u0000\u0dbe\u0dbf\u0003\u028a\u0145\u0000"+
		"\u0dbf\u01d9\u0001\u0000\u0000\u0000\u0dc0\u0dc1\u0005\u00c8\u0000\u0000"+
		"\u0dc1\u0dc2\u0005\u0219\u0000\u0000\u0dc2\u0dc3\u0003\u0262\u0131\u0000"+
		"\u0dc3\u0dc5\u0005\u021a\u0000\u0000\u0dc4\u0dc6\u0003\u01dc\u00ee\u0000"+
		"\u0dc5\u0dc4\u0001\u0000\u0000\u0000\u0dc5\u0dc6\u0001\u0000\u0000\u0000"+
		"\u0dc6\u01db\u0001\u0000\u0000\u0000\u0dc7\u0dc8\u0005\u01a9\u0000\u0000"+
		"\u0dc8\u0dc9\u0005\u0219\u0000\u0000\u0dc9\u0dca\u0003\u0234\u011a\u0000"+
		"\u0dca\u0dcb\u0005\u021a\u0000\u0000\u0dcb\u01dd\u0001\u0000\u0000\u0000"+
		"\u0dcc\u0dce\u0005\u0118\u0000\u0000\u0dcd\u0dcf\u0005\u016d\u0000\u0000"+
		"\u0dce\u0dcd\u0001\u0000\u0000\u0000\u0dce\u0dcf\u0001\u0000\u0000\u0000"+
		"\u0dcf\u0dd0\u0001\u0000\u0000\u0000\u0dd0\u0dd1\u00050\u0000\u0000\u0dd1"+
		"\u0dd6\u0003\u01e0\u00f0\u0000\u0dd2\u0dd3\u0005\u021f\u0000\u0000\u0dd3"+
		"\u0dd5\u0003\u01e0\u00f0\u0000\u0dd4\u0dd2\u0001\u0000\u0000\u0000\u0dd5"+
		"\u0dd8\u0001\u0000\u0000\u0000\u0dd6\u0dd4\u0001\u0000\u0000\u0000\u0dd6"+
		"\u0dd7\u0001\u0000\u0000\u0000\u0dd7\u01df\u0001\u0000\u0000\u0000\u0dd8"+
		"\u0dd6\u0001\u0000\u0000\u0000\u0dd9\u0ddb\u0003\u0262\u0131\u0000\u0dda"+
		"\u0ddc\u0007 \u0000\u0000\u0ddb\u0dda\u0001\u0000\u0000\u0000\u0ddb\u0ddc"+
		"\u0001\u0000\u0000\u0000\u0ddc\u0ddf\u0001\u0000\u0000\u0000\u0ddd\u0dde"+
		"\u0005\u0109\u0000\u0000\u0dde\u0de0\u0007!\u0000\u0000\u0ddf\u0ddd\u0001"+
		"\u0000\u0000\u0000\u0ddf\u0de0\u0001\u0000\u0000\u0000\u0de0\u01e1\u0001"+
		"\u0000\u0000\u0000\u0de1\u0de2\u0005\u009d\u0000\u0000\u0de2\u0de4\u0005"+
		"\u01aa\u0000\u0000\u0de3\u0de5\u0003\u01e4\u00f2\u0000\u0de4\u0de3\u0001"+
		"\u0000\u0000\u0000\u0de4\u0de5\u0001\u0000\u0000\u0000\u0de5\u0de7\u0001"+
		"\u0000\u0000\u0000\u0de6\u0de8\u0003\u01e6\u00f3\u0000\u0de7\u0de6\u0001"+
		"\u0000\u0000\u0000\u0de7\u0de8\u0001\u0000\u0000\u0000\u0de8\u01e3\u0001"+
		"\u0000\u0000\u0000\u0de9\u0dea\u0005\u010e\u0000\u0000\u0dea\u0def\u0003"+
		"\"\u0011\u0000\u0deb\u0dec\u0005\u021f\u0000\u0000\u0dec\u0dee\u0003\""+
		"\u0011\u0000\u0ded\u0deb\u0001\u0000\u0000\u0000\u0dee\u0df1\u0001\u0000"+
		"\u0000\u0000\u0def\u0ded\u0001\u0000\u0000\u0000\u0def\u0df0\u0001\u0000"+
		"\u0000\u0000\u0df0\u01e5\u0001\u0000\u0000\u0000\u0df1\u0def\u0001\u0000"+
		"\u0000\u0000\u0df2\u0df3\u0005\u0172\u0000\u0000\u0df3\u0df8\u0005\u00db"+
		"\u0000\u0000\u0df4\u0df8\u0005\u0107\u0000\u0000\u0df5\u0df6\u0005\u01bb"+
		"\u0000\u0000\u0df6\u0df8\u0003\u0262\u0131\u0000\u0df7\u0df2\u0001\u0000"+
		"\u0000\u0000\u0df7\u0df4\u0001\u0000\u0000\u0000\u0df7\u0df5\u0001\u0000"+
		"\u0000\u0000\u0df8\u01e7\u0001\u0000\u0000\u0000\u0df9\u0dfa\u0005\u01aa"+
		"\u0000\u0000\u0dfa\u0dfb\u0003\u021c\u010e\u0000\u0dfb\u0dfd\u0003\u01ea"+
		"\u00f5\u0000\u0dfc\u0dfe\u0003\u02ee\u0177\u0000\u0dfd\u0dfc\u0001\u0000"+
		"\u0000\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfe\u0e00\u0001\u0000"+
		"\u0000\u0000\u0dff\u0e01\u0003\u021e\u010f\u0000\u0e00\u0dff\u0001\u0000"+
		"\u0000\u0000\u0e00\u0e01\u0001\u0000\u0000\u0000\u0e01\u0e03\u0001\u0000"+
		"\u0000\u0000\u0e02\u0e04\u0003\u0220\u0110\u0000\u0e03\u0e02\u0001\u0000"+
		"\u0000\u0000\u0e03\u0e04\u0001\u0000\u0000\u0000\u0e04\u01e9\u0001\u0000"+
		"\u0000\u0000\u0e05\u0e15\u0005\u0167\u0000\u0000\u0e06\u0e0b\u0003\u01ec"+
		"\u00f6\u0000\u0e07\u0e08\u0005\u021f\u0000\u0000\u0e08\u0e0a\u0003\u01ec"+
		"\u00f6\u0000\u0e09\u0e07\u0001\u0000\u0000\u0000\u0e0a\u0e0d\u0001\u0000"+
		"\u0000\u0000\u0e0b\u0e09\u0001\u0000\u0000\u0000\u0e0b\u0e0c\u0001\u0000"+
		"\u0000\u0000\u0e0c\u0e16\u0001\u0000\u0000\u0000\u0e0d\u0e0b\u0001\u0000"+
		"\u0000\u0000\u0e0e\u0e0f\u0005\u01b1\u0000\u0000\u0e0f\u0e10\u0005\u0219"+
		"\u0000\u0000\u0e10\u0e11\u0003\u035e\u01af\u0000\u0e11\u0e12\u0005\u021a"+
		"\u0000\u0000\u0e12\u0e13\u0005\u0230\u0000\u0000\u0e13\u0e14\u0003\u0262"+
		"\u0131\u0000\u0e14\u0e16\u0001\u0000\u0000\u0000\u0e15\u0e06\u0001\u0000"+
		"\u0000\u0000\u0e15\u0e0e\u0001\u0000\u0000\u0000\u0e16\u01eb\u0001\u0000"+
		"\u0000\u0000\u0e17\u0e18\u0003\"\u0011\u0000\u0e18\u0e19\u0005\u0230\u0000"+
		"\u0000\u0e19\u0e1a\u0003\u0262\u0131\u0000\u0e1a\u0e29\u0001\u0000\u0000"+
		"\u0000\u0e1b\u0e1c\u0005\u0219\u0000\u0000\u0e1c\u0e21\u0003\"\u0011\u0000"+
		"\u0e1d\u0e1e\u0005\u021f\u0000\u0000\u0e1e\u0e20\u0003\"\u0011\u0000\u0e1f"+
		"\u0e1d\u0001\u0000\u0000\u0000\u0e20\u0e23\u0001\u0000\u0000\u0000\u0e21"+
		"\u0e1f\u0001\u0000\u0000\u0000\u0e21\u0e22\u0001\u0000\u0000\u0000\u0e22"+
		"\u0e24\u0001\u0000\u0000\u0000\u0e23\u0e21\u0001\u0000\u0000\u0000\u0e24"+
		"\u0e25\u0005\u021a\u0000\u0000\u0e25\u0e26\u0005\u0230\u0000\u0000\u0e26"+
		"\u0e27\u0003\u017e\u00bf\u0000\u0e27\u0e29\u0001\u0000\u0000\u0000\u0e28"+
		"\u0e17\u0001\u0000\u0000\u0000\u0e28\u0e1b\u0001\u0000\u0000\u0000\u0e29"+
		"\u01ed\u0001\u0000\u0000\u0000\u0e2a\u0e2c\u0005p\u0000\u0000\u0e2b\u0e2d"+
		"\u0005\u00a0\u0000\u0000\u0e2c\u0e2b\u0001\u0000\u0000\u0000\u0e2c\u0e2d"+
		"\u0001\u0000\u0000\u0000\u0e2d\u0e2e\u0001\u0000\u0000\u0000\u0e2e\u0e30"+
		"\u0003\u018e\u00c7\u0000\u0e2f\u0e31\u0003\u02ee\u0177\u0000\u0e30\u0e2f"+
		"\u0001\u0000\u0000\u0000\u0e30\u0e31\u0001\u0000\u0000\u0000\u0e31\u0e33"+
		"\u0001\u0000\u0000\u0000\u0e32\u0e34\u0003\u021e\u010f\u0000\u0e33\u0e32"+
		"\u0001\u0000\u0000\u0000\u0e33\u0e34\u0001\u0000\u0000\u0000\u0e34\u0e36"+
		"\u0001\u0000\u0000\u0000\u0e35\u0e37\u0003\u0220\u0110\u0000\u0e36\u0e35"+
		"\u0001\u0000\u0000\u0000\u0e36\u0e37\u0001\u0000\u0000\u0000\u0e37\u01ef"+
		"\u0001\u0000\u0000\u0000\u0e38\u0e3b\u0005\u00bc\u0000\u0000\u0e39\u0e3c"+
		"\u0003\u01f8\u00fc\u0000\u0e3a\u0e3c\u0003\u01fa\u00fd\u0000\u0e3b\u0e39"+
		"\u0001\u0000\u0000\u0000\u0e3b\u0e3a\u0001\u0000\u0000\u0000\u0e3c\u01f1"+
		"\u0001\u0000\u0000\u0000\u0e3d\u0e3e\u0005i\u0000\u0000\u0e3e\u0e40\u0003"+
		"\u035e\u01af\u0000\u0e3f\u0e41\u0003\u033e\u019f\u0000\u0e40\u0e3f\u0001"+
		"\u0000\u0000\u0000\u0e40\u0e41\u0001\u0000\u0000\u0000\u0e41\u0e43\u0001"+
		"\u0000\u0000\u0000\u0e42\u0e44\u0003\u00fc~\u0000\u0e43\u0e42\u0001\u0000"+
		"\u0000\u0000\u0e43\u0e44\u0001\u0000\u0000\u0000\u0e44\u01f3\u0001\u0000"+
		"\u0000\u0000\u0e45\u0e46\u0005i\u0000\u0000\u0e46\u0e47\u0005\u0090\u0000"+
		"\u0000\u0e47\u0e48\u0005\u00a9\u0000\u0000\u0e48\u0e49\u0005\u009d\u0000"+
		"\u0000\u0e49\u0e4a\u0003X,\u0000\u0e4a\u0e4b\u0003\u0158\u00ac\u0000\u0e4b"+
		"\u01f5\u0001\u0000\u0000\u0000\u0e4c\u0e4f\u0005\u017b\u0000\u0000\u0e4d"+
		"\u0e4f\u0003\u035e\u01af\u0000\u0e4e\u0e4c\u0001\u0000\u0000\u0000\u0e4e"+
		"\u0e4d\u0001\u0000\u0000\u0000\u0e4f\u01f7\u0001\u0000\u0000\u0000\u0e50"+
		"\u0e56\u0003\u0204\u0102\u0000\u0e51\u0e53\u0003\u0206\u0103\u0000\u0e52"+
		"\u0e54\u0003\u021e\u010f\u0000\u0e53\u0e52\u0001\u0000\u0000\u0000\u0e53"+
		"\u0e54\u0001\u0000\u0000\u0000\u0e54\u0e57\u0001\u0000\u0000\u0000\u0e55"+
		"\u0e57\u0003\u0174\u00ba\u0000\u0e56\u0e51\u0001\u0000\u0000\u0000\u0e56"+
		"\u0e55\u0001\u0000\u0000\u0000\u0e57\u0e59\u0001\u0000\u0000\u0000\u0e58"+
		"\u0e5a\u0003\u0220\u0110\u0000\u0e59\u0e58\u0001\u0000\u0000\u0000\u0e59"+
		"\u0e5a\u0001\u0000\u0000\u0000\u0e5a\u01f9\u0001\u0000\u0000\u0000\u0e5b"+
		"\u0e5d\u0005\u000e\u0000\u0000\u0e5c\u0e5e\u0003\u01fc\u00fe\u0000\u0e5d"+
		"\u0e5c\u0001\u0000\u0000\u0000\u0e5e\u0e5f\u0001\u0000\u0000\u0000\u0e5f"+
		"\u0e5d\u0001\u0000\u0000\u0000\u0e5f\u0e60\u0001\u0000\u0000\u0000\u0e60"+
		"\u0e63\u0001\u0000\u0000\u0000\u0e61\u0e63\u0003\u01fe\u00ff\u0000\u0e62"+
		"\u0e5b\u0001\u0000\u0000\u0000\u0e62\u0e61\u0001\u0000\u0000\u0000\u0e63"+
		"\u0e64\u0001\u0000\u0000\u0000\u0e64\u0e65\u0003\u0174\u00ba\u0000\u0e65"+
		"\u01fb\u0001\u0000\u0000\u0000\u0e66\u0e68\u0003\u0204\u0102\u0000\u0e67"+
		"\u0e69\u0003\u0206\u0103\u0000\u0e68\u0e67\u0001\u0000\u0000\u0000\u0e68"+
		"\u0e69\u0001\u0000\u0000\u0000\u0e69\u0e6b\u0001\u0000\u0000\u0000\u0e6a"+
		"\u0e6c\u0003\u0220\u0110\u0000\u0e6b\u0e6a\u0001\u0000\u0000\u0000\u0e6b"+
		"\u0e6c\u0001\u0000\u0000\u0000\u0e6c\u01fd\u0001\u0000\u0000\u0000\u0e6d"+
		"\u0e6f\u0007\"\u0000\u0000\u0e6e\u0e6d\u0001\u0000\u0000\u0000\u0e6e\u0e6f"+
		"\u0001\u0000\u0000\u0000\u0e6f\u0e71\u0001\u0000\u0000\u0000\u0e70\u0e72"+
		"\u0003\u0200\u0100\u0000\u0e71\u0e70\u0001\u0000\u0000\u0000\u0e72\u0e73"+
		"\u0001\u0000\u0000\u0000\u0e73\u0e71\u0001\u0000\u0000\u0000\u0e73\u0e74"+
		"\u0001\u0000\u0000\u0000\u0e74\u0e76\u0001\u0000\u0000\u0000\u0e75\u0e77"+
		"\u0003\u0202\u0101\u0000\u0e76\u0e75\u0001\u0000\u0000\u0000\u0e76\u0e77"+
		"\u0001\u0000\u0000\u0000\u0e77\u01ff\u0001\u0000\u0000\u0000\u0e78\u0e79"+
		"\u0005\u01be\u0000\u0000\u0e79\u0e7a\u0003\u0234\u011a\u0000\u0e7a\u0e7c"+
		"\u0005\u018e\u0000\u0000\u0e7b\u0e7d\u0003\u01fc\u00fe\u0000\u0e7c\u0e7b"+
		"\u0001\u0000\u0000\u0000\u0e7d\u0e7e\u0001\u0000\u0000\u0000\u0e7e\u0e7c"+
		"\u0001\u0000\u0000\u0000\u0e7e\u0e7f\u0001\u0000\u0000\u0000\u0e7f\u0201"+
		"\u0001\u0000\u0000\u0000\u0e80\u0e82\u0005~\u0000\u0000\u0e81\u0e83\u0003"+
		"\u01fc\u00fe\u0000\u0e82\u0e81\u0001\u0000\u0000\u0000\u0e83\u0e84\u0001"+
		"\u0000\u0000\u0000\u0e84\u0e82\u0001\u0000\u0000\u0000\u0e84\u0e85\u0001"+
		"\u0000\u0000\u0000\u0e85\u0203\u0001\u0000\u0000\u0000\u0e86\u0e87\u0005"+
		"\u00c3\u0000\u0000\u0e87\u0e93\u0003\u021c\u010e\u0000\u0e88\u0e89\u0005"+
		"\u0219\u0000\u0000\u0e89\u0e8e\u0003\"\u0011\u0000\u0e8a\u0e8b\u0005\u021f"+
		"\u0000\u0000\u0e8b\u0e8d\u0003\"\u0011\u0000\u0e8c\u0e8a\u0001\u0000\u0000"+
		"\u0000\u0e8d\u0e90\u0001\u0000\u0000\u0000\u0e8e\u0e8c\u0001\u0000\u0000"+
		"\u0000\u0e8e\u0e8f\u0001\u0000\u0000\u0000\u0e8f\u0e91\u0001\u0000\u0000"+
		"\u0000\u0e90\u0e8e\u0001\u0000\u0000\u0000\u0e91\u0e92\u0005\u021a\u0000"+
		"\u0000\u0e92\u0e94\u0001\u0000\u0000\u0000\u0e93\u0e88\u0001\u0000\u0000"+
		"\u0000\u0e93\u0e94\u0001\u0000\u0000\u0000\u0e94\u0205\u0001\u0000\u0000"+
		"\u0000\u0e95\u0e96\u0005\u01b2\u0000\u0000\u0e96\u0e97\u0003\u0232\u0119"+
		"\u0000\u0e97\u0207\u0001\u0000\u0000\u0000\u0e98\u0e99\u0005\u00e7\u0000"+
		"\u0000\u0e99\u0e9a\u0005\u00c3\u0000\u0000\u0e9a\u0e9c\u0003\u032e\u0197"+
		"\u0000\u0e9b\u0e9d\u0003\u02ea\u0175\u0000\u0e9c\u0e9b\u0001\u0000\u0000"+
		"\u0000\u0e9c\u0e9d\u0001\u0000\u0000\u0000\u0e9d\u0e9e\u0001\u0000\u0000"+
		"\u0000\u0e9e\u0e9f\u0005\u01af\u0000\u0000\u0e9f\u0ea0\u0003\u0212\u0109"+
		"\u0000\u0ea0\u0ea1\u0005\u0112\u0000\u0000\u0ea1\u0ea2\u0005\u0219\u0000"+
		"\u0000\u0ea2\u0ea3\u0003\u0234\u011a\u0000\u0ea3\u0eac\u0005\u021a\u0000"+
		"\u0000\u0ea4\u0ea6\u0003\u020a\u0105\u0000\u0ea5\u0ea7\u0003\u0210\u0108"+
		"\u0000\u0ea6\u0ea5\u0001\u0000\u0000\u0000\u0ea6\u0ea7\u0001\u0000\u0000"+
		"\u0000\u0ea7\u0ead\u0001\u0000\u0000\u0000\u0ea8\u0eaa\u0003\u0210\u0108"+
		"\u0000\u0ea9\u0eab\u0003\u020a\u0105\u0000\u0eaa\u0ea9\u0001\u0000\u0000"+
		"\u0000\u0eaa\u0eab\u0001\u0000\u0000\u0000\u0eab\u0ead\u0001\u0000\u0000"+
		"\u0000\u0eac\u0ea4\u0001\u0000\u0000\u0000\u0eac\u0ea8\u0001\u0000\u0000"+
		"\u0000\u0eac\u0ead\u0001\u0000\u0000\u0000\u0ead\u0eaf\u0001\u0000\u0000"+
		"\u0000\u0eae\u0eb0\u0003\u0220\u0110\u0000\u0eaf\u0eae\u0001\u0000\u0000"+
		"\u0000\u0eaf\u0eb0\u0001\u0000\u0000\u0000\u0eb0\u0209\u0001\u0000\u0000"+
		"\u0000\u0eb1\u0eb2\u0005\u01be\u0000\u0000\u0eb2\u0eb3\u0005\u00e3\u0000"+
		"\u0000\u0eb3\u0eb4\u0005\u018e\u0000\u0000\u0eb4\u0eb5\u0005\u01aa\u0000"+
		"\u0000\u0eb5\u0eb6\u0005\u0167\u0000\u0000\u0eb6\u0ebb\u0003\u020c\u0106"+
		"\u0000\u0eb7\u0eb8\u0005\u021f\u0000\u0000\u0eb8\u0eba\u0003\u020c\u0106"+
		"\u0000\u0eb9\u0eb7\u0001\u0000\u0000\u0000\u0eba\u0ebd\u0001\u0000\u0000"+
		"\u0000\u0ebb\u0eb9\u0001\u0000\u0000\u0000\u0ebb\u0ebc\u0001\u0000\u0000"+
		"\u0000\u0ebc\u0ebf\u0001\u0000\u0000\u0000\u0ebd\u0ebb\u0001\u0000\u0000"+
		"\u0000\u0ebe\u0ec0\u0003\u02ee\u0177\u0000\u0ebf\u0ebe\u0001\u0000\u0000"+
		"\u0000\u0ebf\u0ec0\u0001\u0000\u0000\u0000\u0ec0\u0ec2\u0001\u0000\u0000"+
		"\u0000\u0ec1\u0ec3\u0003\u020e\u0107\u0000\u0ec2\u0ec1\u0001\u0000\u0000"+
		"\u0000\u0ec2\u0ec3\u0001\u0000\u0000\u0000\u0ec3\u020b\u0001\u0000\u0000"+
		"\u0000\u0ec4\u0ec5\u0003\"\u0011\u0000\u0ec5\u0ec6\u0005\u0230\u0000\u0000"+
		"\u0ec6\u0ec7\u0003\u0262\u0131\u0000\u0ec7\u020d\u0001\u0000\u0000\u0000"+
		"\u0ec8\u0ec9\u0005p\u0000\u0000\u0ec9\u0eca\u0003\u02ee\u0177\u0000\u0eca"+
		"\u020f\u0001\u0000\u0000\u0000\u0ecb\u0ecc\u0005\u01be\u0000\u0000\u0ecc"+
		"\u0ecd\u0005\u0106\u0000\u0000\u0ecd\u0ece\u0005\u00e3\u0000\u0000\u0ece"+
		"\u0ecf\u0005\u018e\u0000\u0000\u0ecf\u0edb\u0005\u00bc\u0000\u0000\u0ed0"+
		"\u0ed1\u0005\u0219\u0000\u0000\u0ed1\u0ed6\u0003\"\u0011\u0000\u0ed2\u0ed3"+
		"\u0005\u021f\u0000\u0000\u0ed3\u0ed5\u0003\"\u0011\u0000\u0ed4\u0ed2\u0001"+
		"\u0000\u0000\u0000\u0ed5\u0ed8\u0001\u0000\u0000\u0000\u0ed6\u0ed4\u0001"+
		"\u0000\u0000\u0000\u0ed6\u0ed7\u0001\u0000\u0000\u0000\u0ed7\u0ed9\u0001"+
		"\u0000\u0000\u0000\u0ed8\u0ed6\u0001\u0000\u0000\u0000\u0ed9\u0eda\u0005"+
		"\u021a\u0000\u0000\u0eda\u0edc\u0001\u0000\u0000\u0000\u0edb\u0ed0\u0001"+
		"\u0000\u0000\u0000\u0edb\u0edc\u0001\u0000\u0000\u0000\u0edc\u0edd\u0001"+
		"\u0000\u0000\u0000\u0edd\u0ede\u0005\u01b2\u0000\u0000\u0ede\u0ee0\u0003"+
		"\u0232\u0119\u0000\u0edf\u0ee1\u0003\u02ee\u0177\u0000\u0ee0\u0edf\u0001"+
		"\u0000\u0000\u0000\u0ee0\u0ee1\u0001\u0000\u0000\u0000\u0ee1\u0211\u0001"+
		"\u0000\u0000\u0000\u0ee2\u0ee8\u0003\u032e\u0197\u0000\u0ee3\u0ee4\u0005"+
		"\u0219\u0000\u0000\u0ee4\u0ee5\u0003\u0174\u00ba\u0000\u0ee5\u0ee6\u0005"+
		"\u021a\u0000\u0000\u0ee6\u0ee8\u0001\u0000\u0000\u0000\u0ee7\u0ee2\u0001"+
		"\u0000\u0000\u0000\u0ee7\u0ee3\u0001\u0000\u0000\u0000\u0ee8\u0eea\u0001"+
		"\u0000\u0000\u0000\u0ee9\u0eeb\u0003\u02ea\u0175\u0000\u0eea\u0ee9\u0001"+
		"\u0000\u0000\u0000\u0eea\u0eeb\u0001\u0000\u0000\u0000\u0eeb\u0213\u0001"+
		"\u0000\u0000\u0000\u0eec\u0eed\u0005\u00da\u0000\u0000\u0eed\u0eee\u0005"+
		"\u018b\u0000\u0000\u0eee\u0ef3\u0003\u0218\u010c\u0000\u0eef\u0ef0\u0005"+
		"\u021f\u0000\u0000\u0ef0\u0ef2\u0003\u0218\u010c\u0000\u0ef1\u0eef\u0001"+
		"\u0000\u0000\u0000\u0ef2\u0ef5\u0001\u0000\u0000\u0000\u0ef3\u0ef1\u0001"+
		"\u0000\u0000\u0000\u0ef3\u0ef4\u0001\u0000\u0000\u0000\u0ef4\u0ef6\u0001"+
		"\u0000\u0000\u0000\u0ef5\u0ef3\u0001\u0000\u0000\u0000\u0ef6\u0ef7\u0005"+
		"\u00af\u0000\u0000\u0ef7\u0ef8\u0003\u021a\u010d\u0000\u0ef8\u0efa\u0005"+
		"\u00ec\u0000\u0000\u0ef9\u0efb\u0003\u0216\u010b\u0000\u0efa\u0ef9\u0001"+
		"\u0000\u0000\u0000\u0efa\u0efb\u0001\u0000\u0000\u0000\u0efb\u0215\u0001"+
		"\u0000\u0000\u0000\u0efc\u0efd\u0005\u01bb\u0000\u0000\u0efd\u0f00\u0003"+
		"\u0262\u0131\u0000\u0efe\u0f00\u0005\u0107\u0000\u0000\u0eff\u0efc\u0001"+
		"\u0000\u0000\u0000\u0eff\u0efe\u0001\u0000\u0000\u0000\u0f00\u0217\u0001"+
		"\u0000\u0000\u0000\u0f01\u0f03\u0003\u032e\u0197\u0000\u0f02\u0f04\u0003"+
		"\u02e6\u0173\u0000\u0f03\u0f02\u0001\u0000\u0000\u0000\u0f03\u0f04\u0001"+
		"\u0000\u0000\u0000\u0f04\u0219\u0001\u0000\u0000\u0000\u0f05\u0f06\u0005"+
		"\u014f\u0000\u0000\u0f06\u0f12\u0005\u016a\u0000\u0000\u0f07\u0f08\u0005"+
		"\u014f\u0000\u0000\u0f08\u0f12\u0005\u008d\u0000\u0000\u0f09\u0f0b\u0005"+
		"\u016a\u0000\u0000\u0f0a\u0f0c\u0005\u01aa\u0000\u0000\u0f0b\u0f0a\u0001"+
		"\u0000\u0000\u0000\u0f0b\u0f0c\u0001\u0000\u0000\u0000\u0f0c\u0f12\u0001"+
		"\u0000\u0000\u0000\u0f0d\u0f0e\u0005\u016a\u0000\u0000\u0f0e\u0f0f\u0005"+
		"\u014f\u0000\u0000\u0f0f\u0f12\u0005\u008d\u0000\u0000\u0f10\u0f12\u0005"+
		"\u008d\u0000\u0000\u0f11\u0f05\u0001\u0000\u0000\u0000\u0f11\u0f07\u0001"+
		"\u0000\u0000\u0000\u0f11\u0f09\u0001\u0000\u0000\u0000\u0f11\u0f0d\u0001"+
		"\u0000\u0000\u0000\u0f11\u0f10\u0001\u0000\u0000\u0000\u0f12\u021b\u0001"+
		"\u0000\u0000\u0000\u0f13\u0f1a\u0003\u0226\u0113\u0000\u0f14\u0f15\u0005"+
		"\u0113\u0000\u0000\u0f15\u0f16\u0005\u0219\u0000\u0000\u0f16\u0f17\u0003"+
		"\u0226\u0113\u0000\u0f17\u0f18\u0005\u021a\u0000\u0000\u0f18\u0f1a\u0001"+
		"\u0000\u0000\u0000\u0f19\u0f13\u0001\u0000\u0000\u0000\u0f19\u0f14\u0001"+
		"\u0000\u0000\u0000\u0f1a\u0f1c\u0001\u0000\u0000\u0000\u0f1b\u0f1d\u0003"+
		"\u02ea\u0175\u0000\u0f1c\u0f1b\u0001\u0000\u0000\u0000\u0f1c\u0f1d\u0001"+
		"\u0000\u0000\u0000\u0f1d\u021d\u0001\u0000\u0000\u0000\u0f1e\u0f1f\u0007"+
		"\u000f\u0000\u0000\u0f1f\u0f24\u0003\u0262\u0131\u0000\u0f20\u0f21\u0005"+
		"\u021f\u0000\u0000\u0f21\u0f23\u0003\u0262\u0131\u0000\u0f22\u0f20\u0001"+
		"\u0000\u0000\u0000\u0f23\u0f26\u0001\u0000\u0000\u0000\u0f24\u0f22\u0001"+
		"\u0000\u0000\u0000\u0f24\u0f25\u0001\u0000\u0000\u0000\u0f25\u0f27\u0001"+
		"\u0000\u0000\u0000\u0f26\u0f24\u0001\u0000\u0000\u0000\u0f27\u0f28\u0003"+
		"\u02f2\u0179\u0000\u0f28\u021f\u0001\u0000\u0000\u0000\u0f29\u0f2a\u0005"+
		"\u00dc\u0000\u0000\u0f2a\u0f2c\u0005\u0085\u0000\u0000\u0f2b\u0f2d\u0003"+
		"\u0222\u0111\u0000\u0f2c\u0f2b\u0001\u0000\u0000\u0000\u0f2c\u0f2d\u0001"+
		"\u0000\u0000\u0000\u0f2d\u0f2f\u0001\u0000\u0000\u0000\u0f2e\u0f30\u0003"+
		"\u0264\u0132\u0000\u0f2f\u0f2e\u0001\u0000\u0000\u0000\u0f2f\u0f30\u0001"+
		"\u0000\u0000\u0000\u0f30\u0f32\u0001\u0000\u0000\u0000\u0f31\u0f33\u0003"+
		"\u0224\u0112\u0000\u0f32\u0f31\u0001\u0000\u0000\u0000\u0f32\u0f33\u0001"+
		"\u0000\u0000\u0000\u0f33\u0221\u0001\u0000\u0000\u0000\u0f34\u0f35\u0005"+
		"\u00c3\u0000\u0000\u0f35\u0f36\u0003\u032e\u0197\u0000\u0f36\u0223\u0001"+
		"\u0000\u0000\u0000\u0f37\u0f38\u0005\u013e\u0000\u0000\u0f38\u0f3b\u0005"+
		"\u00d8\u0000\u0000\u0f39\u0f3c\u0005\u01a7\u0000\u0000\u0f3a\u0f3c\u0003"+
		"\u0264\u0132\u0000\u0f3b\u0f39\u0001\u0000\u0000\u0000\u0f3b\u0f3a\u0001"+
		"\u0000\u0000\u0000\u0f3c\u0225\u0001\u0000\u0000\u0000\u0f3d\u0f50\u0003"+
		"\u0228\u0114\u0000\u0f3e\u0f3f\u0005\u0219\u0000\u0000\u0f3f\u0f41\u0003"+
		"\u0174\u00ba\u0000\u0f40\u0f42\u0003\u022a\u0115\u0000\u0f41\u0f40\u0001"+
		"\u0000\u0000\u0000\u0f41\u0f42\u0001\u0000\u0000\u0000\u0f42\u0f43\u0001"+
		"\u0000\u0000\u0000\u0f43\u0f49\u0005\u021a\u0000\u0000\u0f44\u0f47\u0005"+
		"\u0088\u0000\u0000\u0f45\u0f48\u0003\u018c\u00c6\u0000\u0f46\u0f48\u0003"+
		"\u0146\u00a3\u0000\u0f47\u0f45\u0001\u0000\u0000\u0000\u0f47\u0f46\u0001"+
		"\u0000\u0000\u0000\u0f48\u0f4a\u0001\u0000\u0000\u0000\u0f49\u0f44\u0001"+
		"\u0000\u0000\u0000\u0f49\u0f4a\u0001\u0000\u0000\u0000\u0f4a\u0f50\u0001"+
		"\u0000\u0000\u0000\u0f4b\u0f4d\u0003\u032e\u0197\u0000\u0f4c\u0f4e\u0003"+
		"\u022c\u0116\u0000\u0f4d\u0f4c\u0001\u0000\u0000\u0000\u0f4d\u0f4e\u0001"+
		"\u0000\u0000\u0000\u0f4e\u0f50\u0001\u0000\u0000\u0000\u0f4f\u0f3d\u0001"+
		"\u0000\u0000\u0000\u0f4f\u0f3e\u0001\u0000\u0000\u0000\u0f4f\u0f4b\u0001"+
		"\u0000\u0000\u0000\u0f50\u0227\u0001\u0000\u0000\u0000\u0f51\u0f5e\u0007"+
		"#\u0000\u0000\u0f52\u0f53\u0005\u0219\u0000\u0000\u0f53\u0f54\u0003\u017e"+
		"\u00bf\u0000\u0f54\u0f55\u0005\u021a\u0000\u0000\u0f55\u0f5f\u0001\u0000"+
		"\u0000\u0000\u0f56\u0f57\u0005\u0219\u0000\u0000\u0f57\u0f58\u0003\u0262"+
		"\u0131\u0000\u0f58\u0f5c\u0005\u021a\u0000\u0000\u0f59\u0f5a\u0005\u0219"+
		"\u0000\u0000\u0f5a\u0f5b\u0005\u021d\u0000\u0000\u0f5b\u0f5d\u0005\u021a"+
		"\u0000\u0000\u0f5c\u0f59\u0001\u0000\u0000\u0000\u0f5c\u0f5d\u0001\u0000"+
		"\u0000\u0000\u0f5d\u0f5f\u0001\u0000\u0000\u0000\u0f5e\u0f52\u0001\u0000"+
		"\u0000\u0000\u0f5e\u0f56\u0001\u0000\u0000\u0000\u0f5f\u0229\u0001\u0000"+
		"\u0000\u0000\u0f60\u0f69\u0005\u01c2\u0000\u0000\u0f61\u0f62\u0005\u0137"+
		"\u0000\u0000\u0f62\u0f6a\u0005\u0113\u0000\u0000\u0f63\u0f64\u0005<\u0000"+
		"\u0000\u0f64\u0f67\u0005\u0115\u0000\u0000\u0f65\u0f66\u0005L\u0000\u0000"+
		"\u0f66\u0f68\u0003\u0310\u0188\u0000\u0f67\u0f65\u0001\u0000\u0000\u0000"+
		"\u0f67\u0f68\u0001\u0000\u0000\u0000\u0f68\u0f6a\u0001\u0000\u0000\u0000"+
		"\u0f69\u0f61\u0001\u0000\u0000\u0000\u0f69\u0f63\u0001\u0000\u0000\u0000"+
		"\u0f6a\u022b\u0001\u0000\u0000\u0000\u0f6b\u0f6d\u0005\u0153\u0000\u0000"+
		"\u0f6c\u0f6e\u0005)\u0000\u0000\u0f6d\u0f6c\u0001\u0000\u0000\u0000\u0f6d"+
		"\u0f6e\u0001\u0000\u0000\u0000\u0f6e\u0f6f\u0001\u0000\u0000\u0000\u0f6f"+
		"\u0f70\u0005\u0219\u0000\u0000\u0f70\u0f73\u0003\u0262\u0131\u0000\u0f71"+
		"\u0f72\u0005\u021f\u0000\u0000\u0f72\u0f74\u0003\u0262\u0131\u0000\u0f73"+
		"\u0f71\u0001\u0000\u0000\u0000\u0f73\u0f74\u0001\u0000\u0000\u0000\u0f74"+
		"\u0f75\u0001\u0000\u0000\u0000\u0f75\u0f77\u0005\u021a\u0000\u0000\u0f76"+
		"\u0f78\u0003\u022e\u0117\u0000\u0f77\u0f76\u0001\u0000\u0000\u0000\u0f77"+
		"\u0f78\u0001\u0000\u0000\u0000\u0f78\u022d\u0001\u0000\u0000\u0000\u0f79"+
		"\u0f7a\u0005\u015d\u0000\u0000\u0f7a\u0f7b\u0005\u0219\u0000\u0000\u0f7b"+
		"\u0f7c\u0003\u0262\u0131\u0000\u0f7c\u0f7d\u0005\u021a\u0000\u0000\u0f7d"+
		"\u022f\u0001\u0000\u0000\u0000\u0f7e\u0f7f\u0005\\\u0000\u0000\u0f7f\u0f80"+
		"\u0005\u0219\u0000\u0000\u0f80\u0f81\u0003\u017e\u00bf\u0000\u0f81\u0f82"+
		"\u0005\u021a\u0000\u0000\u0f82\u0231\u0001\u0000\u0000\u0000\u0f83\u0f85"+
		"\u0005\u0219\u0000\u0000\u0f84\u0f86\u0003\u0262\u0131\u0000\u0f85\u0f84"+
		"\u0001\u0000\u0000\u0000\u0f85\u0f86\u0001\u0000\u0000\u0000\u0f86\u0f8b"+
		"\u0001\u0000\u0000\u0000\u0f87\u0f88\u0005\u021f\u0000\u0000\u0f88\u0f8a"+
		"\u0003\u0262\u0131\u0000\u0f89\u0f87\u0001\u0000\u0000\u0000\u0f8a\u0f8d"+
		"\u0001\u0000\u0000\u0000\u0f8b\u0f89\u0001\u0000\u0000\u0000\u0f8b\u0f8c"+
		"\u0001\u0000\u0000\u0000\u0f8c\u0f8e\u0001\u0000\u0000\u0000\u0f8d\u0f8b"+
		"\u0001\u0000\u0000\u0000\u0f8e\u0f8f\u0005\u021a\u0000\u0000\u0f8f\u0233"+
		"\u0001\u0000\u0000\u0000\u0f90\u0f91\u0003\u0262\u0131\u0000\u0f91\u0235"+
		"\u0001\u0000\u0000\u0000\u0f92\u0f93\u0003\u0238\u011c\u0000\u0f93\u0237"+
		"\u0001\u0000\u0000\u0000\u0f94\u0f95\u0006\u011c\uffff\uffff\u0000\u0f95"+
		"\u0f96\u0005\u0106\u0000\u0000\u0f96\u0f9d\u0003\u0238\u011c\u0003\u0f97"+
		"\u0f98\u0005\u0219\u0000\u0000\u0f98\u0f99\u0003\u0238\u011c\u0000\u0f99"+
		"\u0f9a\u0005\u021a\u0000\u0000\u0f9a\u0f9d\u0001\u0000\u0000\u0000\u0f9b"+
		"\u0f9d\u0003\u023a\u011d\u0000\u0f9c\u0f94\u0001\u0000\u0000\u0000\u0f9c"+
		"\u0f97\u0001\u0000\u0000\u0000\u0f9c\u0f9b\u0001\u0000\u0000\u0000\u0f9d"+
		"\u0fa6\u0001\u0000\u0000\u0000\u0f9e\u0f9f\n\u0005\u0000\u0000\u0f9f\u0fa0"+
		"\u0005\u0116\u0000\u0000\u0fa0\u0fa5\u0003\u0238\u011c\u0006\u0fa1\u0fa2"+
		"\n\u0004\u0000\u0000\u0fa2\u0fa3\u0005\u0012\u0000\u0000\u0fa3\u0fa5\u0003"+
		"\u0238\u011c\u0005\u0fa4\u0f9e\u0001\u0000\u0000\u0000\u0fa4\u0fa1\u0001"+
		"\u0000\u0000\u0000\u0fa5\u0fa8\u0001\u0000\u0000\u0000\u0fa6\u0fa4\u0001"+
		"\u0000\u0000\u0000\u0fa6\u0fa7\u0001\u0000\u0000\u0000\u0fa7\u0239\u0001"+
		"\u0000\u0000\u0000\u0fa8\u0fa6\u0001\u0000\u0000\u0000\u0fa9\u0fb0\u0003"+
		"\u023c\u011e\u0000\u0faa\u0fb0\u0003\u0240\u0120\u0000\u0fab\u0fb0\u0003"+
		"\u0242\u0121\u0000\u0fac\u0fb0\u0003\u0244\u0122\u0000\u0fad\u0fb0\u0003"+
		"\u0246\u0123\u0000\u0fae\u0fb0\u0003\u0248\u0124\u0000\u0faf\u0fa9\u0001"+
		"\u0000\u0000\u0000\u0faf\u0faa\u0001\u0000\u0000\u0000\u0faf\u0fab\u0001"+
		"\u0000\u0000\u0000\u0faf\u0fac\u0001\u0000\u0000\u0000\u0faf\u0fad\u0001"+
		"\u0000\u0000\u0000\u0faf\u0fae\u0001\u0000\u0000\u0000\u0fb0\u023b\u0001"+
		"\u0000\u0000\u0000\u0fb1\u0fb2\u0003\u024c\u0126\u0000\u0fb2\u0fb4\u0003"+
		"\u023e\u011f\u0000\u0fb3\u0fb5\u0007$\u0000\u0000\u0fb4\u0fb3\u0001\u0000"+
		"\u0000\u0000\u0fb4\u0fb5\u0001\u0000\u0000\u0000\u0fb5\u0fb8\u0001\u0000"+
		"\u0000\u0000\u0fb6\u0fb9\u0003\u024a\u0125\u0000\u0fb7\u0fb9\u0003\u017e"+
		"\u00bf\u0000\u0fb8\u0fb6\u0001\u0000\u0000\u0000\u0fb8\u0fb7\u0001\u0000"+
		"\u0000\u0000\u0fb9\u023d\u0001\u0000\u0000\u0000\u0fba\u0fbb\u0007%\u0000"+
		"\u0000\u0fbb\u023f\u0001\u0000\u0000\u0000\u0fbc\u0fbe\u0003\u024c\u0126"+
		"\u0000\u0fbd\u0fbf\u0005\u0106\u0000\u0000\u0fbe\u0fbd\u0001\u0000\u0000"+
		"\u0000\u0fbe\u0fbf\u0001\u0000\u0000\u0000\u0fbf\u0fc0\u0001\u0000\u0000"+
		"\u0000\u0fc0\u0fc1\u0005\"\u0000\u0000\u0fc1\u0fc2\u0003\u024c\u0126\u0000"+
		"\u0fc2\u0fc3\u0005\u0012\u0000\u0000\u0fc3\u0fc4\u0003\u024c\u0126\u0000"+
		"\u0fc4\u0241\u0001\u0000\u0000\u0000\u0fc5\u0fc7\u0003\u024c\u0126\u0000"+
		"\u0fc6\u0fc8\u0005\u0106\u0000\u0000\u0fc7\u0fc6\u0001\u0000\u0000\u0000"+
		"\u0fc7\u0fc8\u0001\u0000\u0000\u0000\u0fc8\u0fc9\u0001\u0000\u0000\u0000"+
		"\u0fc9\u0fcc\u0005\u00af\u0000\u0000\u0fca\u0fcd\u0003\u024a\u0125\u0000"+
		"\u0fcb\u0fcd\u0003\u017e\u00bf\u0000\u0fcc\u0fca\u0001\u0000\u0000\u0000"+
		"\u0fcc\u0fcb\u0001\u0000\u0000\u0000\u0fcd\u0243\u0001\u0000\u0000\u0000"+
		"\u0fce\u0fd0\u0005\u0106\u0000\u0000\u0fcf\u0fce\u0001\u0000\u0000\u0000"+
		"\u0fcf\u0fd0\u0001\u0000\u0000\u0000\u0fd0\u0fd1\u0001\u0000\u0000\u0000"+
		"\u0fd1\u0fd2\u0005\u008f\u0000\u0000\u0fd2\u0fd3\u0005\u0219\u0000\u0000"+
		"\u0fd3\u0fd4\u0003\u017e\u00bf\u0000\u0fd4\u0fd5\u0005\u021a\u0000\u0000"+
		"\u0fd5\u0245\u0001\u0000\u0000\u0000\u0fd6\u0fd8\u0003\u024c\u0126\u0000"+
		"\u0fd7\u0fd9\u0005\u0106\u0000\u0000\u0fd8\u0fd7\u0001\u0000\u0000\u0000"+
		"\u0fd8\u0fd9\u0001\u0000\u0000\u0000\u0fd9\u0fda\u0001\u0000\u0000\u0000"+
		"\u0fda\u0fdb\u0003\u0276\u013b\u0000\u0fdb\u0fde\u0003\u024c\u0126\u0000"+
		"\u0fdc\u0fdd\u0005\u0086\u0000\u0000\u0fdd\u0fdf\u0003\u024c\u0126\u0000"+
		"\u0fde\u0fdc\u0001\u0000\u0000\u0000\u0fde\u0fdf\u0001\u0000\u0000\u0000"+
		"\u0fdf\u0247\u0001\u0000\u0000\u0000\u0fe0\u0fe1\u0003\u024c\u0126\u0000"+
		"\u0fe1\u0fe3\u0005\u00c6\u0000\u0000\u0fe2\u0fe4\u0005\u0106\u0000\u0000"+
		"\u0fe3\u0fe2\u0001\u0000\u0000\u0000\u0fe3\u0fe4\u0001\u0000\u0000\u0000"+
		"\u0fe4\u0fe5\u0001\u0000\u0000\u0000\u0fe5\u0fe6\u0005\u0108\u0000\u0000"+
		"\u0fe6\u0249\u0001\u0000\u0000\u0000\u0fe7\u0fec\u0003\u024c\u0126\u0000"+
		"\u0fe8\u0fe9\u0005\u021f\u0000\u0000\u0fe9\u0feb\u0003\u024c\u0126\u0000"+
		"\u0fea\u0fe8\u0001\u0000\u0000\u0000\u0feb\u0fee\u0001\u0000\u0000\u0000"+
		"\u0fec\u0fea\u0001\u0000\u0000\u0000\u0fec\u0fed\u0001\u0000\u0000\u0000"+
		"\u0fed\u024b\u0001\u0000\u0000\u0000\u0fee\u0fec\u0001\u0000\u0000\u0000"+
		"\u0fef\u0ff0\u0006\u0126\uffff\uffff\u0000\u0ff0\u1006\u0003\u0252\u0129"+
		"\u0000\u0ff1\u1006\u0003\u0258\u012c\u0000\u0ff2\u1006\u0003\u025a\u012d"+
		"\u0000\u0ff3\u0ff4\u0005\u0219\u0000\u0000\u0ff4\u0ff5\u0003\u024c\u0126"+
		"\u0000\u0ff5\u0ff6\u0005\u021a\u0000\u0000\u0ff6\u1006\u0001\u0000\u0000"+
		"\u0000\u0ff7\u0ff8\u0005\u0219\u0000\u0000\u0ff8\u0ff9\u0003\u017e\u00bf"+
		"\u0000\u0ff9\u0ffa\u0005\u021a\u0000\u0000\u0ffa\u1006\u0001\u0000\u0000"+
		"\u0000\u0ffb\u0ffc\u0005\u021e\u0000\u0000\u0ffc\u1006\u0003\u024c\u0126"+
		"\u0005\u0ffd\u1006\u0003H$\u0000\u0ffe\u1006\u0003\u0356\u01ab\u0000\u0fff"+
		"\u1000\u0003\u024e\u0127\u0000\u1000\u1001\u0005\u0212\u0000\u0000\u1001"+
		"\u1003\u0001\u0000\u0000\u0000\u1002\u0fff\u0001\u0000\u0000\u0000\u1002"+
		"\u1003\u0001\u0000\u0000\u0000\u1003\u1004\u0001\u0000\u0000\u0000\u1004"+
		"\u1006\u0003\"\u0011\u0000\u1005\u0fef\u0001\u0000\u0000\u0000\u1005\u0ff1"+
		"\u0001\u0000\u0000\u0000\u1005\u0ff2\u0001\u0000\u0000\u0000\u1005\u0ff3"+
		"\u0001\u0000\u0000\u0000\u1005\u0ff7\u0001\u0000\u0000\u0000\u1005\u0ffb"+
		"\u0001\u0000\u0000\u0000\u1005\u0ffd\u0001\u0000\u0000\u0000\u1005\u0ffe"+
		"\u0001\u0000\u0000\u0000\u1005\u1002\u0001\u0000\u0000\u0000\u1006\u100d"+
		"\u0001\u0000\u0000\u0000\u1007\u1008\n\u0004\u0000\u0000\u1008\u1009\u0003"+
		"\u0250\u0128\u0000\u1009\u100a\u0003\u024c\u0126\u0005\u100a\u100c\u0001"+
		"\u0000\u0000\u0000\u100b\u1007\u0001\u0000\u0000\u0000\u100c\u100f\u0001"+
		"\u0000\u0000\u0000\u100d\u100b\u0001\u0000\u0000\u0000\u100d\u100e\u0001"+
		"\u0000\u0000\u0000\u100e\u024d\u0001\u0000\u0000\u0000\u100f\u100d\u0001"+
		"\u0000\u0000\u0000\u1010\u1011\u0003\u0360\u01b0\u0000\u1011\u024f\u0001"+
		"\u0000\u0000\u0000\u1012\u1013\u0007&\u0000\u0000\u1013\u0251\u0001\u0000"+
		"\u0000\u0000\u1014\u1017\u0003\u0254\u012a\u0000\u1015\u1017\u0003\u0256"+
		"\u012b\u0000\u1016\u1014\u0001\u0000\u0000\u0000\u1016\u1015\u0001\u0000"+
		"\u0000\u0000\u1017\u0253\u0001\u0000\u0000\u0000\u1018\u1019\u00057\u0000"+
		"\u0000\u1019\u101a\u0003\u024c\u0126\u0000\u101a\u101b\u0005\u01be\u0000"+
		"\u0000\u101b\u101c\u0003\u024c\u0126\u0000\u101c\u101d\u0005\u018e\u0000"+
		"\u0000\u101d\u1025\u0003\u024c\u0126\u0000\u101e\u101f\u0005\u01be\u0000"+
		"\u0000\u101f\u1020\u0003\u024c\u0126\u0000\u1020\u1021\u0005\u018e\u0000"+
		"\u0000\u1021\u1022\u0003\u024c\u0126\u0000\u1022\u1024\u0001\u0000\u0000"+
		"\u0000\u1023\u101e\u0001\u0000\u0000\u0000\u1024\u1027\u0001\u0000\u0000"+
		"\u0000\u1025\u1023\u0001\u0000\u0000\u0000\u1025\u1026\u0001\u0000\u0000"+
		"\u0000\u1026\u102a\u0001\u0000\u0000\u0000\u1027\u1025\u0001\u0000\u0000"+
		"\u0000\u1028\u1029\u0005~\u0000\u0000\u1029\u102b\u0003\u024c\u0126\u0000"+
		"\u102a\u1028\u0001\u0000\u0000\u0000\u102a\u102b\u0001\u0000\u0000\u0000"+
		"\u102b\u102c\u0001\u0000\u0000\u0000\u102c\u102d\u0005\u0083\u0000\u0000"+
		"\u102d\u0255\u0001\u0000\u0000\u0000\u102e\u102f\u00057\u0000\u0000\u102f"+
		"\u1030\u0005\u01be\u0000\u0000\u1030\u1031\u0003\u0238\u011c\u0000\u1031"+
		"\u1032\u0005\u018e\u0000\u0000\u1032\u103a\u0003\u024c\u0126\u0000\u1033"+
		"\u1034\u0005\u01be\u0000\u0000\u1034\u1035\u0003\u0238\u011c\u0000\u1035"+
		"\u1036\u0005\u018e\u0000\u0000\u1036\u1037\u0003\u024c\u0126\u0000\u1037"+
		"\u1039\u0001\u0000\u0000\u0000\u1038\u1033\u0001\u0000\u0000\u0000\u1039"+
		"\u103c\u0001\u0000\u0000\u0000\u103a\u1038\u0001\u0000\u0000\u0000\u103a"+
		"\u103b\u0001\u0000\u0000\u0000\u103b\u103f\u0001\u0000\u0000\u0000\u103c"+
		"\u103a\u0001\u0000\u0000\u0000\u103d\u103e\u0005~\u0000\u0000\u103e\u1040"+
		"\u0003\u024c\u0126\u0000\u103f\u103d\u0001\u0000\u0000\u0000\u103f\u1040"+
		"\u0001\u0000\u0000\u0000\u1040\u1041\u0001\u0000\u0000\u0000\u1041\u1042"+
		"\u0005\u0083\u0000\u0000\u1042\u0257\u0001\u0000\u0000\u0000\u1043\u1044"+
		"\u0003\u031a\u018d\u0000\u1044\u1045\u0005\u0219\u0000\u0000\u1045\u104a"+
		"\u0003\u024c\u0126\u0000\u1046\u1047\u0005\u021f\u0000\u0000\u1047\u1049"+
		"\u0003\u024c\u0126\u0000\u1048\u1046\u0001\u0000\u0000\u0000\u1049\u104c"+
		"\u0001\u0000\u0000\u0000\u104a\u1048\u0001\u0000\u0000\u0000\u104a\u104b"+
		"\u0001\u0000\u0000\u0000\u104b\u104d\u0001\u0000\u0000\u0000\u104c\u104a"+
		"\u0001\u0000\u0000\u0000\u104d\u104e\u0005\u021a\u0000\u0000\u104e\u0259"+
		"\u0001\u0000\u0000\u0000\u104f\u1050\u0005V\u0000\u0000\u1050\u1051\u0005"+
		"\u0219\u0000\u0000\u1051\u1052\u0005\u021c\u0000\u0000\u1052\u106e\u0005"+
		"\u021a\u0000\u0000\u1053\u1054\u0005V\u0000\u0000\u1054\u1055\u0005\u0219"+
		"\u0000\u0000\u1055\u1056\u0005w\u0000\u0000\u1056\u1057\u0003\u024a\u0125"+
		"\u0000\u1057\u1058\u0005\u021a\u0000\u0000\u1058\u106e\u0001\u0000\u0000"+
		"\u0000\u1059\u105a\u0003\u025c\u012e\u0000\u105a\u105c\u0005\u0219\u0000"+
		"\u0000\u105b\u105d\u0007\'\u0000\u0000\u105c\u105b\u0001\u0000\u0000\u0000"+
		"\u105c\u105d\u0001\u0000\u0000\u0000\u105d\u105e\u0001\u0000\u0000\u0000"+
		"\u105e\u105f\u0003\u024c\u0126\u0000\u105f\u1060\u0005\u021a\u0000\u0000"+
		"\u1060\u106e\u0001\u0000\u0000\u0000\u1061\u1062\u0005\u01ea\u0000\u0000"+
		"\u1062\u1063\u0005\u0219\u0000\u0000\u1063\u1066\u0003\u024c\u0126\u0000"+
		"\u1064\u1065\u0005\u021f\u0000\u0000\u1065\u1067\u0003\u025e\u012f\u0000"+
		"\u1066\u1064\u0001\u0000\u0000\u0000\u1066\u1067\u0001\u0000\u0000\u0000"+
		"\u1067\u1069\u0001\u0000\u0000\u0000\u1068\u106a\u0003\u0260\u0130\u0000"+
		"\u1069\u1068\u0001\u0000\u0000\u0000\u1069\u106a\u0001\u0000\u0000\u0000"+
		"\u106a\u106b\u0001\u0000\u0000\u0000\u106b\u106c\u0005\u021a\u0000\u0000"+
		"\u106c\u106e\u0001\u0000\u0000\u0000\u106d\u104f\u0001\u0000\u0000\u0000"+
		"\u106d\u1053\u0001\u0000\u0000\u0000\u106d\u1059\u0001\u0000\u0000\u0000"+
		"\u106d\u1061\u0001\u0000\u0000\u0000\u106e\u025b\u0001\u0000\u0000\u0000"+
		"\u106f\u1070\u0007(\u0000\u0000\u1070\u025d\u0001\u0000\u0000\u0000\u1071"+
		"\u1074\u0003\u0360\u01b0\u0000\u1072\u1074\u0003\u035c\u01ae\u0000\u1073"+
		"\u1071\u0001\u0000\u0000\u0000\u1073\u1072\u0001\u0000\u0000\u0000\u1074"+
		"\u025f\u0001\u0000\u0000\u0000\u1075\u1076\u0005\u0118\u0000\u0000\u1076"+
		"\u1077\u00050\u0000\u0000\u1077\u1079\u0003\u024c\u0126\u0000\u1078\u107a"+
		"\u0007 \u0000\u0000\u1079\u1078\u0001\u0000\u0000\u0000\u1079\u107a\u0001"+
		"\u0000\u0000\u0000\u107a\u107f\u0001\u0000\u0000\u0000\u107b\u107c\u0005"+
		"\u0109\u0000\u0000\u107c\u1080\u0005\u0098\u0000\u0000\u107d\u107e\u0005"+
		"\u0109\u0000\u0000\u107e\u1080\u0005\u00cd\u0000\u0000\u107f\u107b\u0001"+
		"\u0000\u0000\u0000\u107f\u107d\u0001\u0000\u0000\u0000\u107f\u1080\u0001"+
		"\u0000\u0000\u0000\u1080\u0261\u0001\u0000\u0000\u0000\u1081\u108c\u0003"+
		"\u0230\u0118\u0000\u1082\u1087\u0003\u0266\u0133\u0000\u1083\u1084\u0005"+
		"\u0116\u0000\u0000\u1084\u1086\u0003\u0266\u0133\u0000\u1085\u1083\u0001"+
		"\u0000\u0000\u0000\u1086\u1089\u0001\u0000\u0000\u0000\u1087\u1085\u0001"+
		"\u0000\u0000\u0000\u1087\u1088\u0001\u0000\u0000\u0000\u1088\u108c\u0001"+
		"\u0000\u0000\u0000\u1089\u1087\u0001\u0000\u0000\u0000\u108a\u108c\u0005"+
		"\u0108\u0000\u0000\u108b\u1081\u0001\u0000\u0000\u0000\u108b\u1082\u0001"+
		"\u0000\u0000\u0000\u108b\u108a\u0001\u0000\u0000\u0000\u108c\u0263\u0001"+
		"\u0000\u0000\u0000\u108d\u108f\u0003\u0262\u0131\u0000\u108e\u1090\u0003"+
		"\u01de\u00ef\u0000\u108f\u108e\u0001\u0000\u0000\u0000\u108f\u1090\u0001"+
		"\u0000\u0000\u0000\u1090\u1097\u0001\u0000\u0000\u0000\u1091\u1092\u0005"+
		"\u017e\u0000\u0000\u1092\u1093\u0003\u0262\u0131\u0000\u1093\u1094\u0005"+
		"\u00af\u0000\u0000\u1094\u1095\u0003\u0262\u0131\u0000\u1095\u1097\u0001"+
		"\u0000\u0000\u0000\u1096\u108d\u0001\u0000\u0000\u0000\u1096\u1091\u0001"+
		"\u0000\u0000\u0000\u1097\u0265\u0001\u0000\u0000\u0000\u1098\u109d\u0003"+
		"\u0268\u0134\u0000\u1099\u109a\u0005\u0012\u0000\u0000\u109a\u109c\u0003"+
		"\u0268\u0134\u0000\u109b\u1099\u0001\u0000\u0000\u0000\u109c\u109f\u0001"+
		"\u0000\u0000\u0000\u109d\u109b\u0001\u0000\u0000\u0000\u109d\u109e\u0001"+
		"\u0000\u0000\u0000\u109e\u0267\u0001\u0000\u0000\u0000\u109f\u109d\u0001"+
		"\u0000\u0000\u0000\u10a0\u10a1\u0005\u0106\u0000\u0000\u10a1\u10a4\u0003"+
		"\u0268\u0134\u0000\u10a2\u10a4\u0003\u026a\u0135\u0000\u10a3\u10a0\u0001"+
		"\u0000\u0000\u0000\u10a3\u10a2\u0001\u0000\u0000\u0000\u10a4\u0269\u0001"+
		"\u0000\u0000\u0000\u10a5\u10c7\u0003\u026c\u0136\u0000\u10a6\u10a8\u0005"+
		"\u00c6\u0000\u0000\u10a7\u10a9\u0005\u0106\u0000\u0000\u10a8\u10a7\u0001"+
		"\u0000\u0000\u0000\u10a8\u10a9\u0001\u0000\u0000\u0000\u10a9\u10c3\u0001"+
		"\u0000\u0000\u0000\u10aa\u10c4\u0005\u0108\u0000\u0000\u10ab\u10c4\u0005"+
		"\u00f2\u0000\u0000\u10ac\u10c4\u0005\u0131\u0000\u0000\u10ad\u10c4\u0005"+
		"\u00b8\u0000\u0000\u10ae\u10af\u0005\t\u0000\u0000\u10af\u10c4\u0005\u0167"+
		"\u0000\u0000\u10b0\u10c4\u0005\u0080\u0000\u0000\u10b1\u10b3\u0005\u010e"+
		"\u0000\u0000\u10b2\u10b4\u0005\u01a2\u0000\u0000\u10b3\u10b2\u0001\u0000"+
		"\u0000\u0000\u10b3\u10b4\u0001\u0000\u0000\u0000\u10b4\u10b5\u0001\u0000"+
		"\u0000\u0000\u10b5\u10b7\u0005\u0219\u0000\u0000\u10b6\u10b8\u0005\u0113"+
		"\u0000\u0000\u10b7\u10b6\u0001\u0000\u0000\u0000\u10b7\u10b8\u0001\u0000"+
		"\u0000\u0000\u10b8\u10b9\u0001\u0000\u0000\u0000\u10b9\u10be\u0003\u033e"+
		"\u019f\u0000\u10ba\u10bb\u0005\u021f\u0000\u0000\u10bb\u10bd\u0003\u033e"+
		"\u019f\u0000\u10bc\u10ba\u0001\u0000\u0000\u0000\u10bd\u10c0\u0001\u0000"+
		"\u0000\u0000\u10be\u10bc\u0001\u0000\u0000\u0000\u10be\u10bf\u0001\u0000"+
		"\u0000\u0000\u10bf\u10c1\u0001\u0000\u0000\u0000\u10c0\u10be\u0001\u0000"+
		"\u0000\u0000\u10c1\u10c2\u0005\u021a\u0000\u0000\u10c2\u10c4\u0001\u0000"+
		"\u0000\u0000\u10c3\u10aa\u0001\u0000\u0000\u0000\u10c3\u10ab\u0001\u0000"+
		"\u0000\u0000\u10c3\u10ac\u0001\u0000\u0000\u0000\u10c3\u10ad\u0001\u0000"+
		"\u0000\u0000\u10c3\u10ae\u0001\u0000\u0000\u0000\u10c3\u10b0\u0001\u0000"+
		"\u0000\u0000\u10c3\u10b1\u0001\u0000\u0000\u0000\u10c4\u10c6\u0001\u0000"+
		"\u0000\u0000\u10c5\u10a6\u0001\u0000\u0000\u0000\u10c6\u10c9\u0001\u0000"+
		"\u0000\u0000\u10c7\u10c5\u0001\u0000\u0000\u0000\u10c7\u10c8\u0001\u0000"+
		"\u0000\u0000\u10c8\u026b\u0001\u0000\u0000\u0000\u10c9\u10c7\u0001\u0000"+
		"\u0000\u0000\u10ca\u10d1\u0003\u0270\u0138\u0000\u10cb\u10cd\u0003\u026e"+
		"\u0137\u0000\u10cc\u10ce\u0005\u010e\u0000\u0000\u10cd\u10cc\u0001\u0000"+
		"\u0000\u0000\u10cd\u10ce\u0001\u0000\u0000\u0000\u10ce\u10cf\u0001\u0000"+
		"\u0000\u0000\u10cf\u10d0\u0003\u027e\u013f\u0000\u10d0\u10d2\u0001\u0000"+
		"\u0000\u0000\u10d1\u10cb\u0001\u0000\u0000\u0000\u10d1\u10d2\u0001\u0000"+
		"\u0000\u0000\u10d2\u026d\u0001\u0000\u0000\u0000\u10d3\u10d4\u0007)\u0000"+
		"\u0000\u10d4\u026f\u0001\u0000\u0000\u0000\u10d5\u10db\u0003\u0274\u013a"+
		"\u0000\u10d6\u10d7\u0003\u0272\u0139\u0000\u10d7\u10d8\u0003\u0274\u013a"+
		"\u0000\u10d8\u10da\u0001\u0000\u0000\u0000\u10d9\u10d6\u0001\u0000\u0000"+
		"\u0000\u10da\u10dd\u0001\u0000\u0000\u0000\u10db\u10d9\u0001\u0000\u0000"+
		"\u0000\u10db\u10dc\u0001\u0000\u0000\u0000\u10dc\u0271\u0001\u0000\u0000"+
		"\u0000\u10dd\u10db\u0001\u0000\u0000\u0000\u10de\u10e5\u0005\u0230\u0000"+
		"\u0000\u10df\u10e5\u0005\u0227\u0000\u0000\u10e0\u10e5\u0005\u022d\u0000"+
		"\u0000\u10e1\u10e5\u0003\u0362\u01b1\u0000\u10e2\u10e5\u0003\u0366\u01b3"+
		"\u0000\u10e3\u10e5\u0003\u0364\u01b2\u0000\u10e4\u10de\u0001\u0000\u0000"+
		"\u0000\u10e4\u10df\u0001\u0000\u0000\u0000\u10e4\u10e0\u0001\u0000\u0000"+
		"\u0000\u10e4\u10e1\u0001\u0000\u0000\u0000\u10e4\u10e2\u0001\u0000\u0000"+
		"\u0000\u10e4\u10e3\u0001\u0000\u0000\u0000\u10e5\u0273\u0001\u0000\u0000"+
		"\u0000\u10e6\u10f5\u0003\u027e\u013f\u0000\u10e7\u10e9\u0005\u0106\u0000"+
		"\u0000\u10e8\u10e7\u0001\u0000\u0000\u0000\u10e8\u10e9\u0001\u0000\u0000"+
		"\u0000\u10e9\u10f3\u0001\u0000\u0000\u0000\u10ea\u10eb\u0005\u00af\u0000"+
		"\u0000\u10eb\u10f4\u0003\u027a\u013d\u0000\u10ec\u10ed\u0005\"\u0000\u0000"+
		"\u10ed\u10f4\u0003\u027c\u013e\u0000\u10ee\u10ef\u0003\u0276\u013b\u0000"+
		"\u10ef\u10f1\u0003\u027e\u013f\u0000\u10f0\u10f2\u0003\u0278\u013c\u0000"+
		"\u10f1\u10f0\u0001\u0000\u0000\u0000\u10f1\u10f2\u0001\u0000\u0000\u0000"+
		"\u10f2\u10f4\u0001\u0000\u0000\u0000\u10f3\u10ea\u0001\u0000\u0000\u0000"+
		"\u10f3\u10ec\u0001\u0000\u0000\u0000\u10f3\u10ee\u0001\u0000\u0000\u0000"+
		"\u10f4\u10f6\u0001\u0000\u0000\u0000\u10f5\u10e8\u0001\u0000\u0000\u0000"+
		"\u10f5\u10f6\u0001\u0000\u0000\u0000\u10f6\u0275\u0001\u0000\u0000\u0000"+
		"\u10f7\u10f8\u0007*\u0000\u0000\u10f8\u0277\u0001\u0000\u0000\u0000\u10f9"+
		"\u10fa\u0005\u0086\u0000\u0000\u10fa\u10fb\u0003\u027e\u013f\u0000\u10fb"+
		"\u0279\u0001\u0000\u0000\u0000\u10fc\u10fd\u0005\u0219\u0000\u0000\u10fd"+
		"\u10fe\u0003\u017e\u00bf\u0000\u10fe\u10ff\u0005\u021a\u0000\u0000\u10ff"+
		"\u110f\u0001\u0000\u0000\u0000\u1100\u1101\u0005\u0219\u0000\u0000\u1101"+
		"\u1106\u0003\u0280\u0140\u0000\u1102\u1103\u0005\u021f\u0000\u0000\u1103"+
		"\u1105\u0003\u0280\u0140\u0000\u1104\u1102\u0001\u0000\u0000\u0000\u1105"+
		"\u1108\u0001\u0000\u0000\u0000\u1106\u1104\u0001\u0000\u0000\u0000\u1106"+
		"\u1107\u0001\u0000\u0000\u0000\u1107\u1109\u0001\u0000\u0000\u0000\u1108"+
		"\u1106\u0001\u0000\u0000\u0000\u1109\u110a\u0005\u021a\u0000\u0000\u110a"+
		"\u110f\u0001\u0000\u0000\u0000\u110b\u110f\u0003\u0356\u01ab\u0000\u110c"+
		"\u110f\u0003\u0346\u01a3\u0000\u110d\u110f\u0003\u0350\u01a8\u0000\u110e"+
		"\u10fc\u0001\u0000\u0000\u0000\u110e\u1100\u0001\u0000\u0000\u0000\u110e"+
		"\u110b\u0001\u0000\u0000\u0000\u110e\u110c\u0001\u0000\u0000\u0000\u110e"+
		"\u110d\u0001\u0000\u0000\u0000\u110f\u027b\u0001\u0000\u0000\u0000\u1110"+
		"\u1111\u0003\u027e\u013f\u0000\u1111\u1112\u0005\u0012\u0000\u0000\u1112"+
		"\u1113\u0003\u027e\u013f\u0000\u1113\u027d\u0001\u0000\u0000\u0000\u1114"+
		"\u111a\u0003\u0282\u0141\u0000\u1115\u1116\u0003\u0368\u01b4\u0000\u1116"+
		"\u1117\u0003\u0282\u0141\u0000\u1117\u1119\u0001\u0000\u0000\u0000\u1118"+
		"\u1115\u0001\u0000\u0000\u0000\u1119\u111c\u0001\u0000\u0000\u0000\u111a"+
		"\u1118\u0001\u0000\u0000\u0000\u111a\u111b\u0001\u0000\u0000\u0000\u111b"+
		"\u027f\u0001\u0000\u0000\u0000\u111c\u111a\u0001\u0000\u0000\u0000\u111d"+
		"\u111e\u0003\u027e\u013f\u0000\u111e\u0281\u0001\u0000\u0000\u0000\u111f"+
		"\u1124\u0003\u0284\u0142\u0000\u1120\u1121\u0007+\u0000\u0000\u1121\u1123"+
		"\u0003\u0284\u0142\u0000\u1122\u1120\u0001\u0000\u0000\u0000\u1123\u1126"+
		"\u0001\u0000\u0000\u0000\u1124\u1122\u0001\u0000\u0000\u0000\u1124\u1125"+
		"\u0001\u0000\u0000\u0000\u1125\u0283\u0001\u0000\u0000\u0000\u1126\u1124"+
		"\u0001\u0000\u0000\u0000\u1127\u112c\u0003\u0286\u0143\u0000\u1128\u1129"+
		"\u0007,\u0000\u0000\u1129\u112b\u0003\u0286\u0143\u0000\u112a\u1128\u0001"+
		"\u0000\u0000\u0000\u112b\u112e\u0001\u0000\u0000\u0000\u112c\u112a\u0001"+
		"\u0000\u0000\u0000\u112c\u112d\u0001\u0000\u0000\u0000\u112d\u0285\u0001"+
		"\u0000\u0000\u0000\u112e\u112c\u0001\u0000\u0000\u0000\u112f\u1138\u0003"+
		"\u028a\u0145\u0000\u1130\u1135\u0005\u0018\u0000\u0000\u1131\u1136\u0005"+
		"\u00d9\u0000\u0000\u1132\u1133\u0005\u018f\u0000\u0000\u1133\u1134\u0005"+
		"\u01d8\u0000\u0000\u1134\u1136\u0003\u0280\u0140\u0000\u1135\u1131\u0001"+
		"\u0000\u0000\u0000\u1135\u1132\u0001\u0000\u0000\u0000\u1136\u1139\u0001"+
		"\u0000\u0000\u0000\u1137\u1139\u0003\u0288\u0144\u0000\u1138\u1130\u0001"+
		"\u0000\u0000\u0000\u1138\u1137\u0001\u0000\u0000\u0000\u1138\u1139\u0001"+
		"\u0000\u0000\u0000\u1139\u0287\u0001\u0000\u0000\u0000\u113a\u113f\u0005"+
		"b\u0000\u0000\u113b\u113c\u0005\u0219\u0000\u0000\u113c\u113d\u0003\u0280"+
		"\u0140\u0000\u113d\u113e\u0005\u021a\u0000\u0000\u113e\u1140\u0001\u0000"+
		"\u0000\u0000\u113f\u113b\u0001\u0000\u0000\u0000\u113f\u1140\u0001\u0000"+
		"\u0000\u0000\u1140\u1141\u0001\u0000\u0000\u0000\u1141\u1142\u0005\u0199"+
		"\u0000\u0000\u1142\u1147\u0005\u015a\u0000\u0000\u1143\u1144\u0005\u0219"+
		"\u0000\u0000\u1144\u1145\u0003\u0280\u0140\u0000\u1145\u1146\u0005\u021a"+
		"\u0000\u0000\u1146\u1148\u0001\u0000\u0000\u0000\u1147\u1143\u0001\u0000"+
		"\u0000\u0000\u1147\u1148\u0001\u0000\u0000\u0000\u1148\u1153\u0001\u0000"+
		"\u0000\u0000\u1149\u114e\u0005\u01d5\u0000\u0000\u114a\u114b\u0005\u0219"+
		"\u0000\u0000\u114b\u114c\u0003\u0280\u0140\u0000\u114c\u114d\u0005\u021a"+
		"\u0000\u0000\u114d\u114f\u0001\u0000\u0000\u0000\u114e\u114a\u0001\u0000"+
		"\u0000\u0000\u114e\u114f\u0001\u0000\u0000\u0000\u114f\u1150\u0001\u0000"+
		"\u0000\u0000\u1150\u1151\u0005\u0199\u0000\u0000\u1151\u1153\u0005\u00ef"+
		"\u0000\u0000\u1152\u113a\u0001\u0000\u0000\u0000\u1152\u1149\u0001\u0000"+
		"\u0000\u0000\u1153\u0289\u0001\u0000\u0000\u0000\u1154\u1159\u0003\u0296"+
		"\u014b\u0000\u1155\u1156\u0005\u0231\u0000\u0000\u1156\u1157\u0003\u028c"+
		"\u0146\u0000\u1157\u1158\u0005\u0232\u0000\u0000\u1158\u115a\u0001\u0000"+
		"\u0000\u0000\u1159\u1155\u0001\u0000\u0000\u0000\u1159\u115a\u0001\u0000"+
		"\u0000\u0000\u115a\u028b\u0001\u0000\u0000\u0000\u115b\u115e\u0005\u0013"+
		"\u0000\u0000\u115c\u115e\u0003\u0236\u011b\u0000\u115d\u115b\u0001\u0000"+
		"\u0000\u0000\u115d\u115c\u0001\u0000\u0000\u0000\u115e\u1166\u0001\u0000"+
		"\u0000\u0000\u115f\u1162\u0005\u021f\u0000\u0000\u1160\u1163\u0005\u0013"+
		"\u0000\u0000\u1161\u1163\u0003\u0236\u011b\u0000\u1162\u1160\u0001\u0000"+
		"\u0000\u0000\u1162\u1161\u0001\u0000\u0000\u0000\u1163\u1165\u0001\u0000"+
		"\u0000\u0000\u1164\u115f\u0001\u0000\u0000\u0000\u1165\u1168\u0001\u0000"+
		"\u0000\u0000\u1166\u1164\u0001\u0000\u0000\u0000\u1166\u1167\u0001\u0000"+
		"\u0000\u0000\u1167\u1173\u0001\u0000\u0000\u0000\u1168\u1166\u0001\u0000"+
		"\u0000\u0000\u1169\u116e\u0003\u028e\u0147\u0000\u116a\u116b\u0005\u021f"+
		"\u0000\u0000\u116b\u116d\u0003\u028e\u0147\u0000\u116c\u116a\u0001\u0000"+
		"\u0000\u0000\u116d\u1170\u0001\u0000\u0000\u0000\u116e\u116c\u0001\u0000"+
		"\u0000\u0000\u116e\u116f\u0001\u0000\u0000\u0000\u116f\u1173\u0001\u0000"+
		"\u0000\u0000\u1170\u116e\u0001\u0000\u0000\u0000\u1171\u1173\u0003\u0294"+
		"\u014a\u0000\u1172\u115d\u0001\u0000\u0000\u0000\u1172\u1169\u0001\u0000"+
		"\u0000\u0000\u1172\u1171\u0001\u0000\u0000\u0000\u1173\u028d\u0001\u0000"+
		"\u0000\u0000\u1174\u1175\u0005\u009d\u0000\u0000\u1175\u1182\u0003\"\u0011"+
		"\u0000\u1176\u1177\u0005\u00af\u0000\u0000\u1177\u1183\u0003\u0232\u0119"+
		"\u0000\u1178\u117a\u0003\u0290\u0148\u0000\u1179\u1178\u0001\u0000\u0000"+
		"\u0000\u1179\u117a\u0001\u0000\u0000\u0000\u117a\u117b\u0001\u0000\u0000"+
		"\u0000\u117b\u117c\u0005\u00a0\u0000\u0000\u117c\u117d\u0003\u0262\u0131"+
		"\u0000\u117d\u117e\u0005\u0199\u0000\u0000\u117e\u117f\u0003\u0262\u0131"+
		"\u0000\u117f\u1180\u0003\u0292\u0149\u0000\u1180\u1181\u0003\u0262\u0131"+
		"\u0000\u1181\u1183\u0001\u0000\u0000\u0000\u1182\u1176\u0001\u0000\u0000"+
		"\u0000\u1182\u1179\u0001\u0000\u0000\u0000\u1183\u028f\u0001\u0000\u0000"+
		"\u0000\u1184\u1185\u0005\u00d3\u0000\u0000\u1185\u1186\u0003\u0262\u0131"+
		"\u0000\u1186\u0291\u0001\u0000\u0000\u0000\u1187\u1188\u0007-\u0000\u0000"+
		"\u1188\u0293\u0001\u0000\u0000\u0000\u1189\u118a\u0005\u009d\u0000\u0000"+
		"\u118a\u118b\u0005\u0219\u0000\u0000\u118b\u1190\u0003\"\u0011\u0000\u118c"+
		"\u118d\u0005\u021f\u0000\u0000\u118d\u118f\u0003\"\u0011\u0000\u118e\u118c"+
		"\u0001\u0000\u0000\u0000\u118f\u1192\u0001\u0000\u0000\u0000\u1190\u118e"+
		"\u0001\u0000\u0000\u0000\u1190\u1191\u0001\u0000\u0000\u0000\u1191\u1193"+
		"\u0001\u0000\u0000\u0000\u1192\u1190\u0001\u0000\u0000\u0000\u1193\u1194"+
		"\u0005\u021a\u0000\u0000\u1194\u1195\u0005\u00af\u0000\u0000\u1195\u11a2"+
		"\u0005\u0219\u0000\u0000\u1196\u11a3\u0003\u017e\u00bf\u0000\u1197\u1198"+
		"\u0005\u0219\u0000\u0000\u1198\u119d\u0003\u0232\u0119\u0000\u1199\u119a"+
		"\u0005\u021f\u0000\u0000\u119a\u119c\u0003\u0232\u0119\u0000\u119b\u1199"+
		"\u0001\u0000\u0000\u0000\u119c\u119f\u0001\u0000\u0000\u0000\u119d\u119b"+
		"\u0001\u0000\u0000\u0000\u119d\u119e\u0001\u0000\u0000\u0000\u119e\u11a0"+
		"\u0001\u0000\u0000\u0000\u119f\u119d\u0001\u0000\u0000\u0000\u11a0\u11a1"+
		"\u0005\u021a\u0000\u0000\u11a1\u11a3\u0001\u0000\u0000\u0000\u11a2\u1196"+
		"\u0001\u0000\u0000\u0000\u11a2\u1197\u0001\u0000\u0000\u0000\u11a3\u11a4"+
		"\u0001\u0000\u0000\u0000\u11a4\u11a5\u0005\u021a\u0000\u0000\u11a5\u0295"+
		"\u0001\u0000\u0000\u0000\u11a6\u11a7\u0005\u021e\u0000\u0000\u11a7\u11b9"+
		"\u0003\u0296\u014b\u0000\u11a8\u11a9\u0005\u021d\u0000\u0000\u11a9\u11b9"+
		"\u0003\u0296\u014b\u0000\u11aa\u11ab\u0005\u0132\u0000\u0000\u11ab\u11b9"+
		"\u0003\u0296\u014b\u0000\u11ac\u11ad\u0005J\u0000\u0000\u11ad\u11b9\u0003"+
		"\u0296\u014b\u0000\u11ae\u11af\u0005\u00fa\u0000\u0000\u11af\u11b9\u0003"+
		"\u0296\u014b\u0000\u11b0\u11b1\u0005w\u0000\u0000\u11b1\u11b9\u0003\u0296"+
		"\u014b\u0000\u11b2\u11b3\u0005\u000e\u0000\u0000\u11b3\u11b9\u0003\u0296"+
		"\u014b\u0000\u11b4\u11b9\u0003\u0298\u014c\u0000\u11b5\u11b9\u0003\u02aa"+
		"\u0155\u0000\u11b6\u11b9\u0003\u02ac\u0156\u0000\u11b7\u11b9\u0003\u02a4"+
		"\u0152\u0000\u11b8\u11a6\u0001\u0000\u0000\u0000\u11b8\u11a8\u0001\u0000"+
		"\u0000\u0000\u11b8\u11aa\u0001\u0000\u0000\u0000\u11b8\u11ac\u0001\u0000"+
		"\u0000\u0000\u11b8\u11ae\u0001\u0000\u0000\u0000\u11b8\u11b0\u0001\u0000"+
		"\u0000\u0000\u11b8\u11b2\u0001\u0000\u0000\u0000\u11b8\u11b4\u0001\u0000"+
		"\u0000\u0000\u11b8\u11b5\u0001\u0000\u0000\u0000\u11b8\u11b6\u0001\u0000"+
		"\u0000\u0000\u11b8\u11b7\u0001\u0000\u0000\u0000\u11b9\u0297\u0001\u0000"+
		"\u0000\u0000\u11ba\u11bd\u0003\u029e\u014f\u0000\u11bb\u11bd\u0003\u029a"+
		"\u014d\u0000\u11bc\u11ba\u0001\u0000\u0000\u0000\u11bc\u11bb\u0001\u0000"+
		"\u0000\u0000\u11bd\u0299\u0001\u0000\u0000\u0000\u11be\u11c0\u0003\u0312"+
		"\u0189\u0000\u11bf\u11be\u0001\u0000\u0000\u0000\u11bf\u11c0\u0001\u0000"+
		"\u0000\u0000\u11c0\u11c1\u0001\u0000\u0000\u0000\u11c1\u11c2\u00057\u0000"+
		"\u0000\u11c2\u11c4\u0003\u02a4\u0152\u0000\u11c3\u11c5\u0003\u029c\u014e"+
		"\u0000\u11c4\u11c3\u0001\u0000\u0000\u0000\u11c5\u11c6\u0001\u0000\u0000"+
		"\u0000\u11c6\u11c4\u0001\u0000\u0000\u0000\u11c6\u11c7\u0001\u0000\u0000"+
		"\u0000\u11c7\u11c9\u0001\u0000\u0000\u0000\u11c8\u11ca\u0003\u02a2\u0151"+
		"\u0000\u11c9\u11c8\u0001\u0000\u0000\u0000\u11c9\u11ca\u0001\u0000\u0000"+
		"\u0000\u11ca\u11cb\u0001\u0000\u0000\u0000\u11cb\u11cd\u0005\u0083\u0000"+
		"\u0000\u11cc\u11ce\u00057\u0000\u0000\u11cd\u11cc\u0001\u0000\u0000\u0000"+
		"\u11cd\u11ce\u0001\u0000\u0000\u0000\u11ce\u11d0\u0001\u0000\u0000\u0000"+
		"\u11cf\u11d1\u0003\u0312\u0189\u0000\u11d0\u11cf\u0001\u0000\u0000\u0000"+
		"\u11d0\u11d1\u0001\u0000\u0000\u0000\u11d1\u029b\u0001\u0000\u0000\u0000"+
		"\u11d2\u11d3\u0005\u01be\u0000\u0000\u11d3\u11d4\u0003\u0264\u0132\u0000"+
		"\u11d4\u11d7\u0005\u018e\u0000\u0000\u11d5\u11d8\u0003\u011e\u008f\u0000"+
		"\u11d6\u11d8\u0003\u0264\u0132\u0000\u11d7\u11d5\u0001\u0000\u0000\u0000"+
		"\u11d7\u11d6\u0001\u0000\u0000\u0000\u11d8\u029d\u0001\u0000\u0000\u0000"+
		"\u11d9\u11db\u0003\u0312\u0189\u0000\u11da\u11d9\u0001\u0000\u0000\u0000"+
		"\u11da\u11db\u0001\u0000\u0000\u0000\u11db\u11dc\u0001\u0000\u0000\u0000"+
		"\u11dc\u11de\u00057\u0000\u0000\u11dd\u11df\u0003\u02a0\u0150\u0000\u11de"+
		"\u11dd\u0001\u0000\u0000\u0000\u11df\u11e0\u0001\u0000\u0000\u0000\u11e0"+
		"\u11de\u0001\u0000\u0000\u0000\u11e0\u11e1\u0001\u0000\u0000\u0000\u11e1"+
		"\u11e3\u0001\u0000\u0000\u0000\u11e2\u11e4\u0003\u02a2\u0151\u0000\u11e3"+
		"\u11e2\u0001\u0000\u0000\u0000\u11e3\u11e4\u0001\u0000\u0000\u0000\u11e4"+
		"\u11e5\u0001\u0000\u0000\u0000\u11e5\u11e7\u0005\u0083\u0000\u0000\u11e6"+
		"\u11e8\u00057\u0000\u0000\u11e7\u11e6\u0001\u0000\u0000\u0000\u11e7\u11e8"+
		"\u0001\u0000\u0000\u0000\u11e8\u11ea\u0001\u0000\u0000\u0000\u11e9\u11eb"+
		"\u0003\u0312\u0189\u0000\u11ea\u11e9\u0001\u0000\u0000\u0000\u11ea\u11eb"+
		"\u0001\u0000\u0000\u0000\u11eb\u029f\u0001\u0000\u0000\u0000\u11ec\u11ed"+
		"\u0005\u01be\u0000\u0000\u11ed\u11ee\u0003\u0236\u011b\u0000\u11ee\u11f1"+
		"\u0005\u018e\u0000\u0000\u11ef\u11f2\u0003\u011e\u008f\u0000\u11f0\u11f2"+
		"\u0003\u0264\u0132\u0000\u11f1\u11ef\u0001\u0000\u0000\u0000\u11f1\u11f0"+
		"\u0001\u0000\u0000\u0000\u11f2\u02a1\u0001\u0000\u0000\u0000\u11f3\u11f6"+
		"\u0005~\u0000\u0000\u11f4\u11f7\u0003\u011e\u008f\u0000\u11f5\u11f7\u0003"+
		"\u0264\u0132\u0000\u11f6\u11f4\u0001\u0000\u0000\u0000\u11f6\u11f5\u0001"+
		"\u0000\u0000\u0000\u11f7\u02a3\u0001\u0000\u0000\u0000\u11f8\u11f9\u0003"+
		"\u0354\u01aa\u0000\u11f9\u11fa\u0003\u036a\u01b5\u0000\u11fa\u120d\u0001"+
		"\u0000\u0000\u0000\u11fb\u120d\u0003\u0346\u01a3\u0000\u11fc\u120d\u0003"+
		"\u0356\u01ab\u0000\u11fd\u120d\u0003\u0350\u01a8\u0000\u11fe\u120a\u0005"+
		"\u0219\u0000\u0000\u11ff\u1200\u0003\u017e\u00bf\u0000\u1200\u1204\u0005"+
		"\u021a\u0000\u0000\u1201\u1203\u0003\u0180\u00c0\u0000\u1202\u1201\u0001"+
		"\u0000\u0000\u0000\u1203\u1206\u0001\u0000\u0000\u0000\u1204\u1202\u0001"+
		"\u0000\u0000\u0000\u1204\u1205\u0001\u0000\u0000\u0000\u1205\u120b\u0001"+
		"\u0000\u0000\u0000\u1206\u1204\u0001\u0000\u0000\u0000\u1207\u1208\u0003"+
		"\u02a6\u0153\u0000\u1208\u1209\u0005\u021a\u0000\u0000\u1209\u120b\u0001"+
		"\u0000\u0000\u0000\u120a\u11ff\u0001\u0000\u0000\u0000\u120a\u1207\u0001"+
		"\u0000\u0000\u0000\u120b\u120d\u0001\u0000\u0000\u0000\u120c\u11f8\u0001"+
		"\u0000\u0000\u0000\u120c\u11fb\u0001\u0000\u0000\u0000\u120c\u11fc\u0001"+
		"\u0000\u0000\u0000\u120c\u11fd\u0001\u0000\u0000\u0000\u120c\u11fe\u0001"+
		"\u0000\u0000\u0000\u120d\u02a5\u0001\u0000\u0000\u0000\u120e\u1210\u0003"+
		"\u0262\u0131\u0000\u120f\u1211\u0003\u02a8\u0154\u0000\u1210\u120f\u0001"+
		"\u0000\u0000\u0000\u1210\u1211\u0001\u0000\u0000\u0000\u1211\u02a7\u0001"+
		"\u0000\u0000\u0000\u1212\u1213\u0005\u021f\u0000\u0000\u1213\u1218\u0003"+
		"\u0262\u0131\u0000\u1214\u1215\u0005\u021f\u0000\u0000\u1215\u1217\u0003"+
		"\u0262\u0131\u0000\u1216\u1214\u0001\u0000\u0000\u0000\u1217\u121a\u0001"+
		"\u0000\u0000\u0000\u1218\u1216\u0001\u0000\u0000\u0000\u1218\u1219\u0001"+
		"\u0000\u0000\u0000\u1219\u02a9\u0001\u0000\u0000\u0000\u121a\u1218\u0001"+
		"\u0000\u0000\u0000\u121b\u1224\u0007.\u0000\u0000\u121c\u121d\u0005\u0219"+
		"\u0000\u0000\u121d\u121e\u0003\u017e\u00bf\u0000\u121e\u121f\u0005\u021a"+
		"\u0000\u0000\u121f\u1225\u0001\u0000\u0000\u0000\u1220\u1221\u0005\u0219"+
		"\u0000\u0000\u1221\u1222\u0003\u0264\u0132\u0000\u1222\u1223\u0005\u021a"+
		"\u0000\u0000\u1223\u1225\u0001\u0000\u0000\u0000\u1224\u121c\u0001\u0000"+
		"\u0000\u0000\u1224\u1220\u0001\u0000\u0000\u0000\u1225\u02ab\u0001\u0000"+
		"\u0000\u0000\u1226\u1227\u0003\u02ae\u0157\u0000\u1227\u1229\u0003\u0336"+
		"\u019b\u0000\u1228\u122a\u0003\u02b4\u015a\u0000\u1229\u1228\u0001\u0000"+
		"\u0000\u0000\u1229\u122a\u0001\u0000\u0000\u0000\u122a\u1361\u0001\u0000"+
		"\u0000\u0000\u122b\u122c\u0003\u036c\u01b6\u0000\u122c\u122e\u0003\u0338"+
		"\u019c\u0000\u122d\u122f\u0003\u02bc\u015e\u0000\u122e\u122d\u0001\u0000"+
		"\u0000\u0000\u122e\u122f\u0001\u0000\u0000\u0000\u122f\u1361\u0001\u0000"+
		"\u0000\u0000\u1230\u1231\u0005V\u0000\u0000\u1231\u1237\u0005\u0219\u0000"+
		"\u0000\u1232\u1238\u0005\u021c\u0000\u0000\u1233\u1235\u0007\u0016\u0000"+
		"\u0000\u1234\u1233\u0001\u0000\u0000\u0000\u1234\u1235\u0001\u0000\u0000"+
		"\u0000\u1235\u1236\u0001\u0000\u0000\u0000\u1236\u1238\u0003\u0280\u0140"+
		"\u0000\u1237\u1232\u0001\u0000\u0000\u0000\u1237\u1234\u0001\u0000\u0000"+
		"\u0000\u1238\u1239\u0001\u0000\u0000\u0000\u1239\u123b\u0005\u021a\u0000"+
		"\u0000\u123a\u123c\u0003\u02b4\u015a\u0000\u123b\u123a\u0001\u0000\u0000"+
		"\u0000\u123b\u123c\u0001\u0000\u0000\u0000\u123c\u1361\u0001\u0000\u0000"+
		"\u0000\u123d\u123e\u0007/\u0000\u0000\u123e\u1245\u0005\u0219\u0000\u0000"+
		"\u123f\u1240\u0005\u00f0\u0000\u0000\u1240\u1241\u0005\u0219\u0000\u0000"+
		"\u1241\u1242\u0003\u017e\u00bf\u0000\u1242\u1243\u0005\u021a\u0000\u0000"+
		"\u1243\u1246\u0001\u0000\u0000\u0000\u1244\u1246\u0003\u0280\u0140\u0000"+
		"\u1245\u123f\u0001\u0000\u0000\u0000\u1245\u1244\u0001\u0000\u0000\u0000"+
		"\u1246\u1247\u0001\u0000\u0000\u0000\u1247\u1248\u0005\u0015\u0000\u0000"+
		"\u1248\u1249\u0003\u033e\u019f\u0000\u1249\u124a\u0005\u021a\u0000\u0000"+
		"\u124a\u1361\u0001\u0000\u0000\u0000\u124b\u124c\u0005=\u0000\u0000\u124c"+
		"\u124d\u0005\u0219\u0000\u0000\u124d\u124e\u0003\u0280\u0140\u0000\u124e"+
		"\u124f\u0005\u01af\u0000\u0000\u124f\u1250\u0005\u00f7\u0000\u0000\u1250"+
		"\u1251\u0005\u021a\u0000\u0000\u1251\u1361\u0001\u0000\u0000\u0000\u1252"+
		"\u1253\u0005A\u0000\u0000\u1253\u1255";
	
	/** The Constant _serializedATNSegment2. */
	private static final String _serializedATNSegment2 =
		"\u0005\u0219\u0000\u0000\u1254\u1256\u00070\u0000\u0000\u1255\u1254\u0001"+
		"\u0000\u0000\u0000\u1255\u1256\u0001\u0000\u0000\u0000\u1256\u1257\u0001"+
		"\u0000\u0000\u0000\u1257\u1259\u0003\u0280\u0140\u0000\u1258\u125a\u0003"+
		"\u02c0\u0160\u0000\u1259\u1258\u0001\u0000\u0000\u0000\u1259\u125a\u0001"+
		"\u0000\u0000\u0000\u125a\u125b\u0001\u0000\u0000\u0000\u125b\u125c\u0005"+
		"\u021a\u0000\u0000\u125c\u1361\u0001\u0000\u0000\u0000\u125d\u125e\u0003"+
		"\u02b0\u0158\u0000\u125e\u1260\u0003\u0334\u019a\u0000\u125f\u1261\u0003"+
		"\u02c2\u0161\u0000\u1260\u125f\u0001\u0000\u0000\u0000\u1261\u1262\u0001"+
		"\u0000\u0000\u0000\u1262\u1260\u0001\u0000\u0000\u0000\u1262\u1263\u0001"+
		"\u0000\u0000\u0000\u1263\u1361\u0001\u0000\u0000\u0000\u1264\u1265\u0005"+
		"j\u0000\u0000\u1265\u1266\u0005\u0219\u0000\u0000\u1266\u1268\u0003\u0280"+
		"\u0140\u0000\u1267\u1269\u00071\u0000\u0000\u1268\u1267\u0001\u0000\u0000"+
		"\u0000\u1268\u1269\u0001\u0000\u0000\u0000\u1269\u126a\u0001\u0000\u0000"+
		"\u0000\u126a\u126b\u0005\u021a\u0000\u0000\u126b\u1361\u0001\u0000\u0000"+
		"\u0000\u126c\u126d\u0005\u0093\u0000\u0000\u126d\u126e\u0005\u0219\u0000"+
		"\u0000\u126e\u126f\u0003\u036c\u01b6\u0000\u126f\u1270\u0005\u00a0\u0000"+
		"\u0000\u1270\u1271\u0003\u0280\u0140\u0000\u1271\u1272\u0005\u021a\u0000"+
		"\u0000\u1272\u1361\u0001\u0000\u0000\u0000\u1273\u1274\u00072\u0000\u0000"+
		"\u1274\u1276\u0003\u0336\u019b\u0000\u1275\u1277\u0003\u033a\u019d\u0000"+
		"\u1276\u1275\u0001\u0000\u0000\u0000\u1276\u1277\u0001\u0000\u0000\u0000"+
		"\u1277\u1278\u0001\u0000\u0000\u0000\u1278\u1279\u0003\u02b4\u015a\u0000"+
		"\u1279\u1361\u0001\u0000\u0000\u0000\u127a\u127b\u0003\u02b2\u0159\u0000"+
		"\u127b\u127c\u0005\u0219\u0000\u0000\u127c\u1281\u0003\u0264\u0132\u0000"+
		"\u127d\u127e\u0005\u021f\u0000\u0000\u127e\u1280\u0003\u0264\u0132\u0000"+
		"\u127f\u127d\u0001\u0000\u0000\u0000\u1280\u1283\u0001\u0000\u0000\u0000"+
		"\u1281\u127f\u0001\u0000\u0000\u0000\u1281\u1282\u0001\u0000\u0000\u0000"+
		"\u1282\u1285\u0001\u0000\u0000\u0000\u1283\u1281\u0001\u0000\u0000\u0000"+
		"\u1284\u1286\u0003\u02c4\u0162\u0000\u1285\u1284\u0001\u0000\u0000\u0000"+
		"\u1285\u1286\u0001\u0000\u0000\u0000\u1286\u1288\u0001\u0000\u0000\u0000"+
		"\u1287\u1289\u0003\u02bc\u015e\u0000\u1288\u1287\u0001\u0000\u0000\u0000"+
		"\u1288\u1289\u0001\u0000\u0000\u0000\u1289\u128a\u0001\u0000\u0000\u0000"+
		"\u128a\u128b\u0005\u021a\u0000\u0000\u128b\u1361\u0001\u0000\u0000\u0000"+
		"\u128c\u128d\u0005\u019c\u0000\u0000\u128d\u128e\u0005\u0219\u0000\u0000"+
		"\u128e\u1291\u0003\u0264\u0132\u0000\u128f\u1290\u0005\u01af\u0000\u0000"+
		"\u1290\u1292\u00073\u0000\u0000\u1291\u128f\u0001\u0000\u0000\u0000\u1291"+
		"\u1292\u0001\u0000\u0000\u0000\u1292\u1297\u0001\u0000\u0000\u0000\u1293"+
		"\u1294\u0005\u021f\u0000\u0000\u1294\u1296\u0003\u0264\u0132\u0000\u1295"+
		"\u1293\u0001\u0000\u0000\u0000\u1296\u1299\u0001\u0000\u0000\u0000\u1297"+
		"\u1295\u0001\u0000\u0000\u0000\u1297\u1298\u0001\u0000\u0000\u0000\u1298"+
		"\u129a\u0001\u0000\u0000\u0000\u1299\u1297\u0001\u0000\u0000\u0000\u129a"+
		"\u129b\u0005\u021a\u0000\u0000\u129b\u1361\u0001\u0000\u0000\u0000\u129c"+
		"\u129d\u0005\u019d\u0000\u0000\u129d\u129e\u0005\u0219\u0000\u0000\u129e"+
		"\u129f\u0003\u0264\u0132\u0000\u129f\u12a1\u0005\u0015\u0000\u0000\u12a0"+
		"\u12a2\u0005\u013b\u0000\u0000\u12a1\u12a0\u0001\u0000\u0000\u0000\u12a1"+
		"\u12a2\u0001\u0000\u0000\u0000\u12a2\u12a3\u0001\u0000\u0000\u0000\u12a3"+
		"\u12a4\u0003\u033e\u019f\u0000\u12a4\u12a5\u0005\u021a\u0000\u0000\u12a5"+
		"\u1361\u0001\u0000\u0000\u0000\u12a6\u12a7\u0005\u019f\u0000\u0000\u12a7"+
		"\u12af\u0005\u0219\u0000\u0000\u12a8\u12aa\u00074\u0000\u0000\u12a9\u12a8"+
		"\u0001\u0000\u0000\u0000\u12a9\u12aa\u0001\u0000\u0000\u0000\u12aa\u12ac"+
		"\u0001\u0000\u0000\u0000\u12ab\u12ad\u0003\u035c\u01ae\u0000\u12ac\u12ab"+
		"\u0001\u0000\u0000\u0000\u12ac\u12ad\u0001\u0000\u0000\u0000\u12ad\u12ae"+
		"\u0001\u0000\u0000\u0000\u12ae\u12b0\u0005\u00a0\u0000\u0000\u12af\u12a9"+
		"\u0001\u0000\u0000\u0000\u12af\u12b0\u0001\u0000\u0000\u0000\u12b0\u12b1"+
		"\u0001\u0000\u0000\u0000\u12b1\u12b2\u0003\u0280\u0140\u0000\u12b2\u12b3"+
		"\u0005\u021a\u0000\u0000\u12b3\u1361\u0001\u0000\u0000\u0000\u12b4\u12b5"+
		"\u0005\u01c7\u0000\u0000\u12b5\u12b6\u0005\u0219\u0000\u0000\u12b6\u12b8"+
		"\u0003\u0264\u0132\u0000\u12b7\u12b9\u0003\u01de\u00ef\u0000\u12b8\u12b7"+
		"\u0001\u0000\u0000\u0000\u12b8\u12b9\u0001\u0000\u0000\u0000\u12b9\u12ba"+
		"\u0001\u0000\u0000\u0000\u12ba\u12bd\u0005\u021a\u0000\u0000\u12bb\u12bc"+
		"\u0005\u0212\u0000\u0000\u12bc\u12be\u0003\u0352\u01a9\u0000\u12bd\u12bb"+
		"\u0001\u0000\u0000\u0000\u12bd\u12be\u0001\u0000\u0000\u0000\u12be\u1361"+
		"\u0001\u0000\u0000\u0000\u12bf\u12c0\u00075\u0000\u0000\u12c0\u12c1\u0005"+
		"\u0219\u0000\u0000\u12c1\u12c6\u0003\u02d0\u0168\u0000\u12c2\u12c3\u0005"+
		"\u021f\u0000\u0000\u12c3\u12c5\u0003\u02d0\u0168\u0000\u12c4\u12c2\u0001"+
		"\u0000\u0000\u0000\u12c5\u12c8\u0001\u0000\u0000\u0000\u12c6\u12c4\u0001"+
		"\u0000\u0000\u0000\u12c6\u12c7\u0001\u0000\u0000\u0000\u12c7\u12c9\u0001"+
		"\u0000\u0000\u0000\u12c8\u12c6\u0001\u0000\u0000\u0000\u12c9\u12cc\u0005"+
		"\u021a\u0000\u0000\u12ca\u12cb\u0005\u0212\u0000\u0000\u12cb\u12cd\u0003"+
		"\u0352\u01a9\u0000\u12cc\u12ca\u0001\u0000\u0000\u0000\u12cc\u12cd\u0001"+
		"\u0000\u0000\u0000\u12cd\u1361\u0001\u0000\u0000\u0000\u12ce\u12cf\u0005"+
		"\u01cb\u0000\u0000\u12cf\u12d1\u0005\u0219\u0000\u0000\u12d0\u12d2\u0007"+
		"6\u0000\u0000\u12d1\u12d0\u0001\u0000\u0000\u0000\u12d1\u12d2\u0001\u0000"+
		"\u0000\u0000\u12d2\u12d4\u0001\u0000\u0000\u0000\u12d3\u12d5\u00077\u0000"+
		"\u0000\u12d4\u12d3\u0001\u0000\u0000\u0000\u12d4\u12d5\u0001\u0000\u0000"+
		"\u0000\u12d5\u12d6\u0001\u0000\u0000\u0000\u12d6\u12d9\u0003\u0264\u0132"+
		"\u0000\u12d7\u12d8\u0005\u021f\u0000\u0000\u12d8\u12da\u0003\u02c8\u0164"+
		"\u0000\u12d9\u12d7\u0001\u0000\u0000\u0000\u12d9\u12da\u0001\u0000\u0000"+
		"\u0000\u12da\u12e2\u0001\u0000\u0000\u0000\u12db\u12dc\u0005\u021f\u0000"+
		"\u0000\u12dc\u12de\u0003\u0264\u0132\u0000\u12dd\u12df\u0003\u02e8\u0174"+
		"\u0000\u12de\u12dd\u0001\u0000\u0000\u0000\u12de\u12df\u0001\u0000\u0000"+
		"\u0000\u12df\u12e1\u0001\u0000\u0000\u0000\u12e0\u12db\u0001\u0000\u0000"+
		"\u0000\u12e1\u12e4\u0001\u0000\u0000\u0000\u12e2\u12e0\u0001\u0000\u0000"+
		"\u0000\u12e2\u12e3\u0001\u0000\u0000\u0000\u12e3\u12e5\u0001\u0000\u0000"+
		"\u0000\u12e4\u12e2\u0001\u0000\u0000\u0000\u12e5\u12e8\u0005\u021a\u0000"+
		"\u0000\u12e6\u12e7\u0005\u0212\u0000\u0000\u12e7\u12e9\u0003\u0352\u01a9"+
		"\u0000\u12e8\u12e6\u0001\u0000\u0000\u0000\u12e8\u12e9\u0001\u0000\u0000"+
		"\u0000\u12e9\u1361\u0001\u0000\u0000\u0000\u12ea\u12eb\u0005\u01cc\u0000"+
		"\u0000\u12eb\u12ec\u0005\u0219\u0000\u0000\u12ec\u12ee\u0003\u0264\u0132"+
		"\u0000\u12ed\u12ef\u0003\u02c6\u0163\u0000\u12ee\u12ed\u0001\u0000\u0000"+
		"\u0000\u12ee\u12ef\u0001\u0000\u0000\u0000\u12ef\u12f0\u0001\u0000\u0000"+
		"\u0000\u12f0\u12f1\u0005\u021a\u0000\u0000\u12f1\u1361\u0001\u0000\u0000"+
		"\u0000\u12f2\u12f3\u0005\u01cf\u0000\u0000\u12f3\u12f4\u0005\u0219\u0000"+
		"\u0000\u12f4\u12f5\u00078\u0000\u0000\u12f5\u12f7\u0003\u0280\u0140\u0000"+
		"\u12f6\u12f8\u0005\u01bd\u0000\u0000\u12f7\u12f6\u0001\u0000\u0000\u0000"+
		"\u12f7\u12f8\u0001\u0000\u0000\u0000\u12f8\u12f9\u0001\u0000\u0000\u0000"+
		"\u12f9\u12fc\u0005\u021a\u0000\u0000\u12fa\u12fb\u0005\u0212\u0000\u0000"+
		"\u12fb\u12fd\u0003\u0352\u01a9\u0000\u12fc\u12fa\u0001\u0000\u0000\u0000"+
		"\u12fc\u12fd\u0001\u0000\u0000\u0000\u12fd\u1361\u0001\u0000\u0000\u0000"+
		"\u12fe\u12ff\u0005\u01d0\u0000\u0000\u12ff\u1304\u0005\u0219\u0000\u0000"+
		"\u1300\u1301\u0005\u00f1\u0000\u0000\u1301\u1305\u0003\u035e\u01af\u0000"+
		"\u1302\u1303\u0005\u0087\u0000\u0000\u1303\u1305\u0003\u0280\u0140\u0000"+
		"\u1304\u1300\u0001\u0000\u0000\u0000\u1304\u1302\u0001\u0000\u0000\u0000"+
		"\u1305\u1308\u0001\u0000\u0000\u0000\u1306\u1307\u0005\u021f\u0000\u0000"+
		"\u1307\u1309\u0003\u0280\u0140\u0000\u1308\u1306\u0001\u0000\u0000\u0000"+
		"\u1308\u1309\u0001\u0000\u0000\u0000\u1309\u130a\u0001\u0000\u0000\u0000"+
		"\u130a\u130d\u0005\u021a\u0000\u0000\u130b\u130c\u0005\u0212\u0000\u0000"+
		"\u130c\u130e\u0003\u0352\u01a9\u0000\u130d\u130b\u0001\u0000\u0000\u0000"+
		"\u130d\u130e\u0001\u0000\u0000\u0000\u130e\u1361\u0001\u0000\u0000\u0000"+
		"\u130f\u1310\u0005\u01d1\u0000\u0000\u1310\u1311\u0005\u0219\u0000\u0000"+
		"\u1311\u1313\u0003\u0280\u0140\u0000\u1312\u1314\u0003\u02c6\u0163\u0000"+
		"\u1313\u1312\u0001\u0000\u0000\u0000\u1313\u1314\u0001\u0000\u0000\u0000"+
		"\u1314\u1315\u0001\u0000\u0000\u0000\u1315\u1316\u0005\u0148\u0000\u0000"+
		"\u1316\u131a\u0005O\u0000\u0000\u1317\u1318\u0005\u0108\u0000\u0000\u1318"+
		"\u1319\u0005\u0112\u0000\u0000\u1319\u131b\u0005\u0080\u0000\u0000\u131a"+
		"\u1317\u0001\u0000\u0000\u0000\u131a\u131b\u0001\u0000\u0000\u0000\u131b"+
		"\u131c\u0001\u0000\u0000\u0000\u131c\u131f\u0005\u021a\u0000\u0000\u131d"+
		"\u131e\u0005\u0212\u0000\u0000\u131e\u1320\u0003\u0352\u01a9\u0000\u131f"+
		"\u131d\u0001\u0000\u0000\u0000\u131f\u1320\u0001\u0000\u0000\u0000\u1320"+
		"\u1361\u0001\u0000\u0000\u0000\u1321\u1322\u0005\u01d2\u0000\u0000\u1322"+
		"\u1323\u0005\u0219\u0000\u0000\u1323\u1326\u0003\u0280\u0140\u0000\u1324"+
		"\u1325\u0005\u021f\u0000\u0000\u1325\u1327\u0003\u02d2\u0169\u0000\u1326"+
		"\u1324\u0001\u0000\u0000\u0000\u1326\u1327\u0001\u0000\u0000\u0000\u1327"+
		"\u132a\u0001\u0000\u0000\u0000\u1328\u1329\u0005\u021f\u0000\u0000\u1329"+
		"\u132b\u0003\u02d4\u016a\u0000\u132a\u1328\u0001\u0000\u0000\u0000\u132a"+
		"\u132b\u0001\u0000\u0000\u0000\u132b\u132c\u0001\u0000\u0000\u0000\u132c"+
		"\u132f\u0005\u021a\u0000\u0000\u132d\u132e\u0005\u0212\u0000\u0000\u132e"+
		"\u1330\u0003\u0352\u01a9\u0000\u132f\u132d\u0001\u0000\u0000\u0000\u132f"+
		"\u1330\u0001\u0000\u0000\u0000\u1330\u1361\u0001\u0000\u0000\u0000\u1331"+
		"\u1332\u0005\u01d3\u0000\u0000\u1332\u1333\u0005\u0219\u0000\u0000\u1333"+
		"\u1334\u00078\u0000\u0000\u1334\u1337\u0003\u0280\u0140\u0000\u1335\u1336"+
		"\u0005\u0015\u0000\u0000\u1336\u1338\u0003\u033e\u019f\u0000\u1337\u1335"+
		"\u0001\u0000\u0000\u0000\u1337\u1338\u0001\u0000\u0000\u0000\u1338\u133a"+
		"\u0001\u0000\u0000\u0000\u1339\u133b\u0003\u02d6\u016b\u0000\u133a\u1339"+
		"\u0001\u0000\u0000\u0000\u133a\u133b\u0001\u0000\u0000\u0000\u133b\u133d"+
		"\u0001\u0000\u0000\u0000\u133c\u133e\u0003\u02d8\u016c\u0000\u133d\u133c"+
		"\u0001\u0000\u0000\u0000\u133d\u133e\u0001\u0000\u0000\u0000\u133e\u1340"+
		"\u0001\u0000\u0000\u0000\u133f\u1341\u0003\u02da\u016d\u0000\u1340\u133f"+
		"\u0001\u0000\u0000\u0000\u1340\u1341\u0001\u0000\u0000\u0000\u1341\u1344"+
		"\u0001\u0000\u0000\u0000\u1342\u1343\u00079\u0000\u0000\u1343\u1345\u0005"+
		"m\u0000\u0000\u1344\u1342\u0001\u0000\u0000\u0000\u1344\u1345\u0001\u0000"+
		"\u0000\u0000\u1345\u1346\u0001\u0000\u0000\u0000\u1346\u1349\u0005\u021a"+
		"\u0000\u0000\u1347\u1348\u0005\u0212\u0000\u0000\u1348\u134a\u0003\u0352"+
		"\u01a9\u0000\u1349\u1347\u0001\u0000\u0000\u0000\u1349\u134a\u0001\u0000"+
		"\u0000\u0000\u134a\u1361\u0001\u0000\u0000\u0000\u134b\u134c\u0005\u01d4"+
		"\u0000\u0000\u134c\u134e\u0005\u0219\u0000\u0000\u134d\u134f\u0003\u02ca"+
		"\u0165\u0000\u134e\u134d\u0001\u0000\u0000\u0000\u134e\u134f\u0001\u0000"+
		"\u0000\u0000\u134f\u1350\u0001\u0000\u0000\u0000\u1350\u1352\u0003\u0280"+
		"\u0140\u0000\u1351\u1353\u0003\u02c6\u0163\u0000\u1352\u1351\u0001\u0000"+
		"\u0000\u0000\u1352\u1353\u0001\u0000\u0000\u0000\u1353\u1359\u0001\u0000"+
		"\u0000\u0000\u1354\u1355\u0005B\u0000\u0000\u1355\u1356\u0003\u02cc\u0166"+
		"\u0000\u1356\u1357\u0005\u021f\u0000\u0000\u1357\u1358\u0003\u02cc\u0166"+
		"\u0000\u1358\u135a\u0001\u0000\u0000\u0000\u1359\u1354\u0001\u0000\u0000"+
		"\u0000\u1359\u135a\u0001\u0000\u0000\u0000\u135a\u135b\u0001\u0000\u0000"+
		"\u0000\u135b\u135e\u0005\u021a\u0000\u0000\u135c\u135d\u0005\u0212\u0000"+
		"\u0000\u135d\u135f\u0003\u0352\u01a9\u0000\u135e\u135c\u0001\u0000\u0000"+
		"\u0000\u135e\u135f\u0001\u0000\u0000\u0000\u135f\u1361\u0001\u0000\u0000"+
		"\u0000\u1360\u1226\u0001\u0000\u0000\u0000\u1360\u122b\u0001\u0000\u0000"+
		"\u0000\u1360\u1230\u0001\u0000\u0000\u0000\u1360\u123d\u0001\u0000\u0000"+
		"\u0000\u1360\u124b\u0001\u0000\u0000\u0000\u1360\u1252\u0001\u0000\u0000"+
		"\u0000\u1360\u125d\u0001\u0000\u0000\u0000\u1360\u1264\u0001\u0000\u0000"+
		"\u0000\u1360\u126c\u0001\u0000\u0000\u0000\u1360\u1273\u0001\u0000\u0000"+
		"\u0000\u1360\u127a\u0001\u0000\u0000\u0000\u1360\u128c\u0001\u0000\u0000"+
		"\u0000\u1360\u129c\u0001\u0000\u0000\u0000\u1360\u12a6\u0001\u0000\u0000"+
		"\u0000\u1360\u12b4\u0001\u0000\u0000\u0000\u1360\u12bf\u0001\u0000\u0000"+
		"\u0000\u1360\u12ce\u0001\u0000\u0000\u0000\u1360\u12ea\u0001\u0000\u0000"+
		"\u0000\u1360\u12f2\u0001\u0000\u0000\u0000\u1360\u12fe\u0001\u0000\u0000"+
		"\u0000\u1360\u130f\u0001\u0000\u0000\u0000\u1360\u1321\u0001\u0000\u0000"+
		"\u0000\u1360\u1331\u0001\u0000\u0000\u0000\u1360\u134b\u0001\u0000\u0000"+
		"\u0000\u1361\u02ad\u0001\u0000\u0000\u0000\u1362\u1363\u0007:\u0000\u0000"+
		"\u1363\u02af\u0001\u0000\u0000\u0000\u1364\u1365\u0007;\u0000\u0000\u1365"+
		"\u02b1\u0001\u0000\u0000\u0000\u1366\u1367\u0007<\u0000\u0000\u1367\u02b3"+
		"\u0001\u0000\u0000\u0000\u1368\u1369\u0005\u011d\u0000\u0000\u1369\u136b"+
		"\u0005\u0219\u0000\u0000\u136a\u136c\u0003\u019a\u00cd\u0000\u136b\u136a"+
		"\u0001\u0000\u0000\u0000\u136b\u136c\u0001\u0000\u0000\u0000\u136c\u1371"+
		"\u0001\u0000\u0000\u0000\u136d\u136f\u0003\u01de\u00ef\u0000\u136e\u1370"+
		"\u0003\u02b6\u015b\u0000\u136f\u136e\u0001\u0000\u0000\u0000\u136f\u1370"+
		"\u0001\u0000\u0000\u0000\u1370\u1372\u0001\u0000\u0000\u0000\u1371\u136d"+
		"\u0001\u0000\u0000\u0000\u1371\u1372\u0001\u0000\u0000\u0000\u1372\u1373"+
		"\u0001\u0000\u0000\u0000\u1373\u1374\u0005\u021a\u0000\u0000\u1374\u02b5"+
		"\u0001\u0000\u0000\u0000\u1375\u137c\u0003\u02b8\u015c\u0000\u1376\u1377"+
		"\u0005\"\u0000\u0000\u1377\u1378\u0003\u02ba\u015d\u0000\u1378\u1379\u0005"+
		"\u0012\u0000\u0000\u1379\u137a\u0003\u02ba\u015d\u0000\u137a\u137d\u0001"+
		"\u0000\u0000\u0000\u137b\u137d\u0003\u02ba\u015d\u0000\u137c\u1376\u0001"+
		"\u0000\u0000\u0000\u137c\u137b\u0001\u0000\u0000\u0000\u137d\u02b7\u0001"+
		"\u0000\u0000\u0000\u137e\u137f\u0007=\u0000\u0000\u137f\u02b9\u0001\u0000"+
		"\u0000\u0000\u1380\u1381\u0005\u01a3\u0000\u0000\u1381\u1388\u0005\u012f"+
		"\u0000\u0000\u1382\u1383\u0005Z\u0000\u0000\u1383\u1388\u0005\u014f\u0000"+
		"\u0000\u1384\u1385\u0003\u0280\u0140\u0000\u1385\u1386\u0007>\u0000\u0000"+
		"\u1386\u1388\u0001\u0000\u0000\u0000\u1387\u1380\u0001\u0000\u0000\u0000"+
		"\u1387\u1382\u0001\u0000\u0000\u0000\u1387\u1384\u0001\u0000\u0000\u0000"+
		"\u1388\u02bb\u0001\u0000\u0000\u0000\u1389\u1393\u0005\u01af\u0000\u0000"+
		"\u138a\u1394\u0005\u021c\u0000\u0000\u138b\u1390\u0003\u02be\u015f\u0000"+
		"\u138c\u138d\u0005\u021f\u0000\u0000\u138d\u138f\u0003\u02be\u015f\u0000"+
		"\u138e\u138c\u0001\u0000\u0000\u0000\u138f\u1392\u0001\u0000\u0000\u0000"+
		"\u1390\u138e\u0001\u0000\u0000\u0000\u1390\u1391\u0001\u0000\u0000\u0000"+
		"\u1391\u1394\u0001\u0000\u0000\u0000\u1392\u1390\u0001\u0000\u0000\u0000"+
		"\u1393\u138a\u0001\u0000\u0000\u0000\u1393\u138b\u0001\u0000\u0000\u0000"+
		"\u1394\u02bd\u0001\u0000\u0000\u0000\u1395\u1397\u0005\u00af\u0000\u0000"+
		"\u1396\u1398\u0005\u011b\u0000\u0000\u1397\u1396\u0001\u0000\u0000\u0000"+
		"\u1397\u1398\u0001\u0000\u0000\u0000\u1398\u139b\u0001\u0000\u0000\u0000"+
		"\u1399\u139b\u0005\u011b\u0000\u0000\u139a\u1395\u0001\u0000\u0000\u0000"+
		"\u139a\u1399\u0001\u0000\u0000\u0000\u139a\u139b\u0001\u0000\u0000\u0000"+
		"\u139b\u139c\u0001\u0000\u0000\u0000\u139c\u139e\u0003\u018a\u00c5\u0000"+
		"\u139d\u139f\u0003\u02e8\u0174\u0000\u139e\u139d\u0001\u0000\u0000\u0000"+
		"\u139e\u139f\u0001\u0000\u0000\u0000\u139f\u02bf\u0001\u0000\u0000\u0000"+
		"\u13a0\u13a1\u0005\u0118\u0000\u0000\u13a1\u13a2\u00050\u0000\u0000\u13a2"+
		"\u13a3\u0003\u0280\u0140\u0000\u13a3\u02c1\u0001\u0000\u0000\u0000\u13a4"+
		"\u13a5\u0005\u01c3\u0000\u0000\u13a5\u13a6\u0005\u00a5\u0000\u0000\u13a6"+
		"\u13a7\u0005\u0219\u0000\u0000\u13a7\u13a8\u0003\u01de\u00ef\u0000\u13a8"+
		"\u13a9\u0005\u021a\u0000\u0000\u13a9\u13ac\u0001\u0000\u0000\u0000\u13aa"+
		"\u13ac\u0003\u02b4\u015a\u0000\u13ab\u13a4\u0001\u0000\u0000\u0000\u13ab"+
		"\u13aa\u0001\u0000\u0000\u0000\u13ac\u02c3\u0001\u0000\u0000\u0000\u13ad"+
		"\u13bf\u0005U\u0000\u0000\u13ae\u13b0\u0005\u00ed\u0000\u0000\u13af\u13b1"+
		"\u0005\u001c\u0000\u0000\u13b0\u13af\u0001\u0000\u0000\u0000\u13b0\u13b1"+
		"\u0001\u0000\u0000\u0000\u13b1\u13c0\u0001\u0000\u0000\u0000\u13b2\u13b3"+
		"\u0005\u0219\u0000\u0000\u13b3\u13b8\u0003\u02f6\u017b\u0000\u13b4\u13b5"+
		"\u0005\u021f\u0000\u0000\u13b5\u13b7\u0003\u02f6\u017b\u0000\u13b6\u13b4"+
		"\u0001\u0000\u0000\u0000\u13b7\u13ba\u0001\u0000\u0000\u0000\u13b8\u13b6"+
		"\u0001\u0000\u0000\u0000\u13b8\u13b9\u0001\u0000\u0000\u0000\u13b9\u13bb"+
		"\u0001\u0000\u0000\u0000\u13ba\u13b8\u0001\u0000\u0000\u0000\u13bb\u13bc"+
		"\u0005\u021a\u0000\u0000\u13bc\u13bd\u0005\u01b2\u0000\u0000\u13bd\u13be"+
		"\u0003\u0232\u0119\u0000\u13be\u13c0\u0001\u0000\u0000\u0000\u13bf\u13ae"+
		"\u0001\u0000\u0000\u0000\u13bf\u13b2\u0001\u0000\u0000\u0000\u13c0\u02c5"+
		"\u0001\u0000\u0000\u0000\u13c1\u13c4\u0005\u0124\u0000\u0000\u13c2\u13c3"+
		"\u00050\u0000\u0000\u13c3\u13c5\u0005\u01b1\u0000\u0000\u13c4\u13c2\u0001"+
		"\u0000\u0000\u0000\u13c4\u13c5\u0001\u0000\u0000\u0000\u13c5\u13c6\u0001"+
		"\u0000\u0000\u0000\u13c6\u13c8\u0003\u0264\u0132\u0000\u13c7\u13c9\u0003"+
		"\u02e8\u0174\u0000\u13c8\u13c7\u0001\u0000\u0000\u0000\u13c8\u13c9\u0001"+
		"\u0000\u0000\u0000\u13c9\u13ca\u0001\u0000\u0000\u0000\u13ca\u13cb\u0005"+
		"\u021f\u0000\u0000\u13cb\u13cd\u0003\u0264\u0132\u0000\u13cc\u13ce\u0003"+
		"\u02e8\u0174\u0000\u13cd\u13cc\u0001\u0000\u0000\u0000\u13cd\u13ce\u0001"+
		"\u0000\u0000\u0000\u13ce\u02c7\u0001\u0000\u0000\u0000\u13cf\u13d0\u0005"+
		"\u01c8\u0000\u0000\u13d0\u13d2\u0005\u0219\u0000\u0000\u13d1\u13d3\u0007"+
		"6\u0000\u0000\u13d2\u13d1\u0001\u0000\u0000\u0000\u13d2\u13d3\u0001\u0000"+
		"\u0000\u0000\u13d3\u13d5\u0001\u0000\u0000\u0000\u13d4\u13d6\u0007?\u0000"+
		"\u0000\u13d5\u13d4\u0001\u0000\u0000\u0000\u13d5\u13d6\u0001\u0000\u0000"+
		"\u0000\u13d6\u13d7\u0001\u0000\u0000\u0000\u13d7\u13dc\u0003\u02d0\u0168"+
		"\u0000\u13d8\u13d9\u0005\u021f\u0000\u0000\u13d9\u13db\u0003\u02d0\u0168"+
		"\u0000\u13da\u13d8\u0001\u0000\u0000\u0000\u13db\u13de\u0001\u0000\u0000"+
		"\u0000\u13dc\u13da\u0001\u0000\u0000\u0000\u13dc\u13dd\u0001\u0000\u0000"+
		"\u0000\u13dd\u13df\u0001\u0000\u0000\u0000\u13de\u13dc\u0001\u0000\u0000"+
		"\u0000\u13df\u13e0\u0005\u021a\u0000\u0000\u13e0\u02c9\u0001\u0000\u0000"+
		"\u0000\u13e1\u13e2\u0005\u01ce\u0000\u0000\u13e2\u13e6\u0005\u0219\u0000"+
		"\u0000\u13e3\u13e4\u0003\u0280\u0140\u0000\u13e4\u13e5\u0003\u02e8\u0174"+
		"\u0000\u13e5\u13e7\u0001\u0000\u0000\u0000\u13e6\u13e3\u0001\u0000\u0000"+
		"\u0000\u13e6\u13e7\u0001\u0000\u0000\u0000\u13e7\u13ee\u0001\u0000\u0000"+
		"\u0000\u13e8\u13e9\u0005\u021f\u0000\u0000\u13e9\u13ea\u0003\u0280\u0140"+
		"\u0000\u13ea\u13eb\u0003\u02e8\u0174\u0000\u13eb\u13ed\u0001\u0000\u0000"+
		"\u0000\u13ec\u13e8\u0001\u0000\u0000\u0000\u13ed\u13f0\u0001\u0000\u0000"+
		"\u0000\u13ee\u13ec\u0001\u0000\u0000\u0000\u13ee\u13ef\u0001\u0000\u0000"+
		"\u0000\u13ef\u13f2\u0001\u0000\u0000\u0000\u13f0\u13ee\u0001\u0000\u0000"+
		"\u0000\u13f1\u13f3\u0003\u02ce\u0167\u0000\u13f2\u13f1\u0001\u0000\u0000"+
		"\u0000\u13f2\u13f3\u0001\u0000\u0000\u0000\u13f3\u13f4\u0001\u0000\u0000"+
		"\u0000\u13f4\u13f5\u0005\u021a\u0000\u0000\u13f5\u02cb\u0001\u0000\u0000"+
		"\u0000\u13f6\u1401\u0003\u02f4\u017a\u0000\u13f7\u13f8\u0005\u009d\u0000"+
		"\u0000\u13f8\u1402\u0005\u0119\u0000\u0000\u13f9\u13fc\u0003\u033e\u019f"+
		"\u0000\u13fa\u13fb\u0005\u0125\u0000\u0000\u13fb\u13fd\u0003\u0280\u0140"+
		"\u0000\u13fc\u13fa\u0001\u0000\u0000\u0000\u13fc\u13fd\u0001\u0000\u0000"+
		"\u0000\u13fd\u13ff\u0001\u0000\u0000\u0000\u13fe\u1400\u0003\u02ce\u0167"+
		"\u0000\u13ff\u13fe\u0001\u0000\u0000\u0000\u13ff\u1400\u0001\u0000\u0000"+
		"\u0000\u1400\u1402\u0001\u0000\u0000\u0000\u1401\u13f7\u0001\u0000\u0000"+
		"\u0000\u1401\u13f9\u0001\u0000\u0000\u0000\u1402\u02cd\u0001\u0000\u0000"+
		"\u0000\u1403\u1404\u0005l\u0000\u0000\u1404\u1405\u0003\u0280\u0140\u0000"+
		"\u1405\u02cf\u0001\u0000\u0000\u0000\u1406\u140d\u0003\u0262\u0131\u0000"+
		"\u1407\u140b\u0005\u0015\u0000\u0000\u1408\u140c\u0003\u0360\u01b0\u0000"+
		"\u1409\u140a\u0005\u0087\u0000\u0000\u140a\u140c\u0003\u027e\u013f\u0000"+
		"\u140b\u1408\u0001\u0000\u0000\u0000\u140b\u1409\u0001\u0000\u0000\u0000"+
		"\u140c\u140e\u0001\u0000\u0000\u0000\u140d\u1407\u0001\u0000\u0000\u0000"+
		"\u140d\u140e\u0001\u0000\u0000\u0000\u140e\u02d1\u0001\u0000\u0000\u0000"+
		"\u140f\u1413\u0005\u01b8\u0000\u0000\u1410\u1411\u0005\u00fb\u0000\u0000"+
		"\u1411\u1414\u0005\u01b1\u0000\u0000\u1412\u1414\u0003\u0264\u0132\u0000"+
		"\u1413\u1410\u0001\u0000\u0000\u0000\u1413\u1412\u0001\u0000\u0000\u0000"+
		"\u1414\u02d3\u0001\u0000\u0000\u0000\u1415\u141b\u0005\u017d\u0000\u0000"+
		"\u1416\u141c\u0005\u01d6\u0000\u0000\u1417\u1419\u0005\u00fb\u0000\u0000"+
		"\u1418\u141a\u0005\u01b1\u0000\u0000\u1419\u1418\u0001\u0000\u0000\u0000"+
		"\u1419\u141a\u0001\u0000\u0000\u0000\u141a\u141c\u0001\u0000\u0000\u0000"+
		"\u141b\u1416\u0001\u0000\u0000\u0000\u141b\u1417\u0001\u0000\u0000\u0000"+
		"\u141c\u02d5\u0001\u0000\u0000\u0000\u141d\u141e\u0005\u0082\u0000\u0000"+
		"\u141e\u141f\u0003\u0280\u0140\u0000\u141f\u02d7\u0001\u0000\u0000\u0000"+
		"\u1420\u1421\u0005\u01b8\u0000\u0000\u1421\u1422\u0003\u0280\u0140\u0000"+
		"\u1422\u02d9\u0001\u0000\u0000\u0000\u1423\u1424\u0005\u00fb\u0000\u0000"+
		"\u1424\u142c\u0005\u00b3\u0000\u0000\u1425\u1429\u0005\u00b3\u0000\u0000"+
		"\u1426\u1427\u0005\u0171\u0000\u0000\u1427\u1428\u0005\u0230\u0000\u0000"+
		"\u1428\u142a\u0003\u0280\u0140\u0000\u1429\u1426\u0001\u0000\u0000\u0000"+
		"\u1429\u142a\u0001\u0000\u0000\u0000\u142a\u142c\u0001\u0000\u0000\u0000"+
		"\u142b\u1423\u0001\u0000\u0000\u0000\u142b\u1425\u0001\u0000\u0000\u0000"+
		"\u142c\u02db\u0001\u0000\u0000\u0000\u142d\u1433\u0005\u0220\u0000\u0000"+
		"\u142e\u1433\u0003\u02de\u016f\u0000\u142f\u1433\u0003\u02e2\u0171\u0000"+
		"\u1430\u1433\u0003\u02e4\u0172\u0000\u1431\u1433\u0003\u02e0\u0170\u0000"+
		"\u1432\u142d\u0001\u0000\u0000\u0000\u1432\u142e\u0001\u0000\u0000\u0000"+
		"\u1432\u142f\u0001\u0000\u0000\u0000\u1432\u1430\u0001\u0000\u0000\u0000"+
		"\u1432\u1431\u0001\u0000\u0000\u0000\u1433\u1435\u0001\u0000\u0000\u0000"+
		"\u1434\u1436\u0005\u0225\u0000\u0000\u1435\u1434\u0001\u0000\u0000\u0000"+
		"\u1435\u1436\u0001\u0000\u0000\u0000\u1436\u02dd\u0001\u0000\u0000\u0000"+
		"\u1437\u1438\u0005\u01bf\u0000\u0000\u1438\u143e\u0007@\u0000\u0000\u1439"+
		"\u143a\u0005\u0090\u0000\u0000\u143a\u143b\u0007A\u0000\u0000\u143b\u143f"+
		"\u0007B\u0000\u0000\u143c\u143d\u0005Q\u0000\u0000\u143d\u143f\u0007C"+
		"\u0000\u0000\u143e\u1439\u0001\u0000\u0000\u0000\u143e\u143c\u0001\u0000"+
		"\u0000\u0000\u143f\u02df\u0001\u0000\u0000\u0000\u1440\u1441\u0005\u0167"+
		"\u0000\u0000\u1441\u1447\u0003\u036c\u01b6\u0000\u1442\u1448\u0005\u0215"+
		"\u0000\u0000\u1443\u1448\u0005\u0112\u0000\u0000\u1444\u1448\u0005\u010f"+
		"\u0000\u0000\u1445\u1448\u0003\u0358\u01ac\u0000\u1446\u1448\u0003\u036c"+
		"\u01b6\u0000\u1447\u1442\u0001\u0000\u0000\u0000\u1447\u1443\u0001\u0000"+
		"\u0000\u0000\u1447\u1444\u0001\u0000\u0000\u0000\u1447\u1445\u0001\u0000"+
		"\u0000\u0000\u1447\u1446\u0001\u0000\u0000\u0000\u1448\u02e1\u0001\u0000"+
		"\u0000\u0000\u1449\u144a\u0005\u0090\u0000\u0000\u144a\u02e3\u0001\u0000"+
		"\u0000\u0000\u144b\u144c\u0005\u0237\u0000\u0000\u144c\u02e5\u0001\u0000"+
		"\u0000\u0000\u144d\u144f\u0007D\u0000\u0000\u144e\u1450\u0005\u009d\u0000"+
		"\u0000\u144f\u144e\u0001\u0000\u0000\u0000\u144f\u1450\u0001\u0000\u0000"+
		"\u0000\u1450\u1451\u0001\u0000\u0000\u0000\u1451\u1452\u0003\u0232\u0119"+
		"\u0000\u1452\u02e7\u0001\u0000\u0000\u0000\u1453\u1455\u0005\u0015\u0000"+
		"\u0000\u1454\u1453\u0001\u0000\u0000\u0000\u1454\u1455\u0001\u0000\u0000"+
		"\u0000\u1455\u1458\u0001\u0000\u0000\u0000\u1456\u1459\u0003\u035e\u01af"+
		"\u0000\u1457\u1459\u0003\u02ec\u0176\u0000\u1458\u1456\u0001\u0000\u0000"+
		"\u0000\u1458\u1457\u0001\u0000\u0000\u0000\u1459\u145c\u0001\u0000\u0000"+
		"\u0000\u145a\u145c\u0005\u0015\u0000\u0000\u145b\u1454\u0001\u0000\u0000"+
		"\u0000\u145b\u145a\u0001\u0000\u0000\u0000\u145c\u02e9\u0001\u0000\u0000"+
		"\u0000\u145d\u1460\u0003\u035e\u01af\u0000\u145e\u1460\u0003\u02ec\u0176"+
		"\u0000\u145f\u145d\u0001\u0000\u0000\u0000\u145f\u145e\u0001\u0000\u0000"+
		"\u0000\u1460\u02eb\u0001\u0000\u0000\u0000\u1461\u1462\u0003\u035c\u01ae"+
		"\u0000\u1462\u02ed\u0001\u0000\u0000\u0000\u1463\u1466\u0005\u01c0\u0000"+
		"\u0000\u1464\u1467\u0003\u02f0\u0178\u0000\u1465\u1467\u0003\u0236\u011b"+
		"\u0000\u1466\u1464\u0001\u0000\u0000\u0000\u1466\u1465\u0001\u0000\u0000"+
		"\u0000\u1467\u02ef\u0001\u0000\u0000\u0000\u1468\u1469\u0005Z\u0000\u0000"+
		"\u1469\u146a\u0005\u010e\u0000\u0000\u146a\u146b\u0003J%\u0000\u146b\u02f1"+
		"\u0001\u0000\u0000\u0000\u146c\u146d\u0005\u00c3\u0000\u0000\u146d\u1472"+
		"\u0003H$\u0000\u146e\u146f\u0005\u021f\u0000\u0000\u146f\u1471\u0003H"+
		"$\u0000\u1470\u146e\u0001\u0000\u0000\u0000\u1471\u1474\u0001\u0000\u0000"+
		"\u0000\u1472\u1470\u0001\u0000\u0000\u0000\u1472\u1473\u0001\u0000\u0000"+
		"\u0000\u1473\u1481\u0001\u0000\u0000\u0000\u1474\u1472\u0001\u0000\u0000"+
		"\u0000\u1475\u1476\u0005/\u0000\u0000\u1476\u1477\u0005A\u0000\u0000\u1477"+
		"\u1478\u0005\u00c3\u0000\u0000\u1478\u147d\u0003H$\u0000\u1479\u147a\u0005"+
		"\u021f\u0000\u0000\u147a\u147c\u0003H$\u0000\u147b\u1479\u0001\u0000\u0000"+
		"\u0000\u147c\u147f\u0001\u0000\u0000\u0000\u147d\u147b\u0001\u0000\u0000"+
		"\u0000\u147d\u147e\u0001\u0000\u0000\u0000\u147e\u1481\u0001\u0000\u0000"+
		"\u0000\u147f\u147d\u0001\u0000\u0000\u0000\u1480\u146c\u0001\u0000\u0000"+
		"\u0000\u1480\u1475\u0001\u0000\u0000\u0000\u1481\u02f3\u0001\u0000\u0000"+
		"\u0000\u1482\u1485\u0003\u035e\u01af\u0000\u1483\u1485\u0003\u035c\u01ae"+
		"\u0000\u1484\u1482\u0001\u0000\u0000\u0000\u1484\u1483\u0001\u0000\u0000"+
		"\u0000\u1485\u02f5\u0001\u0000\u0000\u0000\u1486\u1487\u0003\u035e\u01af"+
		"\u0000\u1487\u02f7\u0001\u0000\u0000\u0000\u1488\u1489\u0003\u035e\u01af"+
		"\u0000\u1489\u02f9\u0001\u0000\u0000\u0000\u148a\u148b\u0003\u035e\u01af"+
		"\u0000\u148b\u02fb\u0001\u0000\u0000\u0000\u148c\u148d\u0003\u035e\u01af"+
		"\u0000\u148d\u02fd\u0001\u0000\u0000\u0000\u148e\u148f\u0003\u035e\u01af"+
		"\u0000\u148f\u02ff\u0001\u0000\u0000\u0000\u1490\u1491\u0003\u0360\u01b0"+
		"\u0000\u1491\u0301\u0001\u0000\u0000\u0000\u1492\u1497\u0003\u035e\u01af"+
		"\u0000\u1493\u1494\u0005\u0212\u0000\u0000\u1494\u1496\u0003\u0360\u01b0"+
		"\u0000\u1495\u1493\u0001\u0000\u0000\u0000\u1496\u1499\u0001\u0000\u0000"+
		"\u0000\u1497\u1495\u0001\u0000\u0000\u0000\u1497\u1498\u0001\u0000\u0000"+
		"\u0000\u1498\u149c\u0001\u0000\u0000\u0000\u1499\u1497\u0001\u0000\u0000"+
		"\u0000\u149a\u149b\u0005\u0221\u0000\u0000\u149b\u149d\u0003\u032a\u0195"+
		"\u0000\u149c\u149a\u0001\u0000\u0000\u0000\u149c\u149d\u0001\u0000\u0000"+
		"\u0000\u149d\u0303\u0001\u0000\u0000\u0000\u149e\u149f\u0003\u035e\u01af"+
		"\u0000\u149f\u0305\u0001\u0000\u0000\u0000\u14a0\u14a3\u0003\u035e\u01af"+
		"\u0000\u14a1\u14a2\u0005\u0212\u0000\u0000\u14a2\u14a4\u0003\u0360\u01b0"+
		"\u0000\u14a3\u14a1\u0001\u0000\u0000\u0000\u14a3\u14a4\u0001\u0000\u0000"+
		"\u0000\u14a4\u0307\u0001\u0000\u0000\u0000\u14a5\u14a6\u0003\u035e\u01af"+
		"\u0000\u14a6\u0309\u0001\u0000\u0000\u0000\u14a7\u14a8\u0003\u035e\u01af"+
		"\u0000\u14a8\u030b\u0001\u0000\u0000\u0000\u14a9\u14ae\u0003\u035e\u01af"+
		"\u0000\u14aa\u14ab\u0005\u0212\u0000\u0000\u14ab\u14ad\u0003\u0360\u01b0"+
		"\u0000\u14ac\u14aa\u0001\u0000\u0000\u0000\u14ad\u14b0\u0001\u0000\u0000"+
		"\u0000\u14ae\u14ac\u0001\u0000\u0000\u0000\u14ae\u14af\u0001\u0000\u0000"+
		"\u0000\u14af\u030d\u0001\u0000\u0000\u0000\u14b0\u14ae\u0001\u0000\u0000"+
		"\u0000\u14b1\u14b2\u0003\u035e\u01af\u0000\u14b2\u030f\u0001\u0000\u0000"+
		"\u0000\u14b3\u14b8\u0003\u035e\u01af\u0000\u14b4\u14b5\u0005\u0212\u0000"+
		"\u0000\u14b5\u14b7\u0003\u0360\u01b0\u0000\u14b6\u14b4\u0001\u0000\u0000"+
		"\u0000\u14b7\u14ba\u0001\u0000\u0000\u0000\u14b8\u14b6\u0001\u0000\u0000"+
		"\u0000\u14b8\u14b9\u0001\u0000\u0000\u0000\u14b9\u14bd\u0001\u0000\u0000"+
		"\u0000\u14ba\u14b8\u0001\u0000\u0000\u0000\u14bb\u14bc\u0005\u0221\u0000"+
		"\u0000\u14bc\u14be\u0003\u032a\u0195\u0000\u14bd\u14bb\u0001\u0000\u0000"+
		"\u0000\u14bd\u14be\u0001\u0000\u0000\u0000\u14be\u0311\u0001\u0000\u0000"+
		"\u0000\u14bf\u14c0\u0003\u0360\u01b0\u0000\u14c0\u0313\u0001\u0000\u0000"+
		"\u0000\u14c1\u14c6\u0003\u0360\u01b0\u0000\u14c2\u14c3\u0005\u0212\u0000"+
		"\u0000\u14c3\u14c5\u0003\u0360\u01b0\u0000\u14c4\u14c2\u0001\u0000\u0000"+
		"\u0000\u14c5\u14c8\u0001\u0000\u0000\u0000\u14c6\u14c4\u0001\u0000\u0000"+
		"\u0000\u14c6\u14c7\u0001\u0000\u0000\u0000\u14c7\u0315\u0001\u0000\u0000"+
		"\u0000\u14c8\u14c6\u0001\u0000\u0000\u0000\u14c9\u14ce\u0003\u0360\u01b0"+
		"\u0000\u14ca\u14cb\u0005\u0212\u0000\u0000\u14cb\u14cd\u0003\u0360\u01b0"+
		"\u0000\u14cc\u14ca\u0001\u0000\u0000\u0000\u14cd\u14d0\u0001\u0000\u0000"+
		"\u0000\u14ce\u14cc\u0001\u0000\u0000\u0000\u14ce\u14cf\u0001\u0000\u0000"+
		"\u0000\u14cf\u0317\u0001\u0000\u0000\u0000\u14d0\u14ce\u0001\u0000\u0000"+
		"\u0000\u14d1\u14d6\u0003\u035e\u01af\u0000\u14d2\u14d3\u0005\u0212\u0000"+
		"\u0000\u14d3\u14d5\u0003\u0360\u01b0\u0000\u14d4\u14d2\u0001\u0000\u0000"+
		"\u0000\u14d5\u14d8\u0001\u0000\u0000\u0000\u14d6\u14d4\u0001\u0000\u0000"+
		"\u0000\u14d6\u14d7\u0001\u0000\u0000\u0000\u14d7\u0319\u0001\u0000\u0000"+
		"\u0000\u14d8\u14d6\u0001\u0000\u0000\u0000\u14d9\u14dc\u0003\u035e\u01af"+
		"\u0000\u14da\u14db\u0005\u0212\u0000\u0000\u14db\u14dd\u0003\u0360\u01b0"+
		"\u0000\u14dc\u14da\u0001\u0000\u0000\u0000\u14dc\u14dd\u0001\u0000\u0000"+
		"\u0000\u14dd\u031b\u0001\u0000\u0000\u0000\u14de\u14df\u0003\u0300\u0180"+
		"\u0000\u14df\u14e0\u0005\u0212\u0000\u0000\u14e0\u14e2\u0001\u0000\u0000"+
		"\u0000\u14e1\u14de\u0001\u0000\u0000\u0000\u14e1\u14e2\u0001\u0000\u0000"+
		"\u0000\u14e2\u14e3\u0001\u0000\u0000\u0000\u14e3\u14e4\u0003\u0360\u01b0"+
		"\u0000\u14e4\u031d\u0001\u0000\u0000\u0000\u14e5\u14e8\u0003\u035e\u01af"+
		"\u0000\u14e6\u14e7\u0005\u0212\u0000\u0000\u14e7\u14e9\u0003\u0360\u01b0"+
		"\u0000\u14e8\u14e6\u0001\u0000\u0000\u0000\u14e8\u14e9\u0001\u0000\u0000"+
		"\u0000\u14e9\u031f\u0001\u0000\u0000\u0000\u14ea\u14eb\u0005\u0233\u0000"+
		"\u0000\u14eb\u14ed\u0003\u0330\u0198\u0000\u14ec\u14ea\u0001\u0000\u0000"+
		"\u0000\u14ec\u14ed\u0001\u0000\u0000\u0000\u14ed\u14ee\u0001\u0000\u0000"+
		"\u0000\u14ee\u14f1\u0003\u0360\u01b0\u0000\u14ef\u14f0\u0005\u0212\u0000"+
		"\u0000\u14f0\u14f2\u0003\u0360\u01b0\u0000\u14f1\u14ef\u0001\u0000\u0000"+
		"\u0000\u14f1\u14f2\u0001\u0000\u0000\u0000\u14f2\u14f5\u0001\u0000\u0000"+
		"\u0000\u14f3\u14f5\u0003\u0346\u01a3\u0000\u14f4\u14ec\u0001\u0000\u0000"+
		"\u0000\u14f4\u14f3\u0001\u0000\u0000\u0000\u14f5\u0321\u0001\u0000\u0000"+
		"\u0000\u14f6\u14f7\u0003\u035e\u01af\u0000\u14f7\u0323\u0001\u0000\u0000"+
		"\u0000\u14f8\u14fb\u0003\u035e\u01af\u0000\u14f9\u14fb\u0003\u0346\u01a3"+
		"\u0000\u14fa\u14f8\u0001\u0000\u0000\u0000\u14fa\u14f9\u0001\u0000\u0000"+
		"\u0000\u14fb\u0325\u0001\u0000\u0000\u0000\u14fc\u14ff\u0003\u035e\u01af"+
		"\u0000\u14fd\u14ff\u0003\u0346\u01a3\u0000\u14fe\u14fc\u0001\u0000\u0000"+
		"\u0000\u14fe\u14fd\u0001\u0000\u0000\u0000\u14ff\u0327\u0001\u0000\u0000"+
		"\u0000\u1500\u1503\u0003\u035e\u01af\u0000\u1501\u1502\u0005\u0212\u0000"+
		"\u0000\u1502\u1504\u0003\u0360\u01b0\u0000\u1503\u1501\u0001\u0000\u0000"+
		"\u0000\u1503\u1504\u0001\u0000\u0000\u0000\u1504\u0329\u0001\u0000\u0000"+
		"\u0000\u1505\u1506\u0003\u035e\u01af\u0000\u1506\u032b\u0001\u0000\u0000"+
		"\u0000\u1507\u150c\u0003\u035e\u01af\u0000\u1508\u1509\u0005\u0212\u0000"+
		"\u0000\u1509\u150b\u0003\u0360\u01b0\u0000\u150a\u1508\u0001\u0000\u0000"+
		"\u0000\u150b\u150e\u0001\u0000\u0000\u0000\u150c\u150a\u0001\u0000\u0000"+
		"\u0000\u150c\u150d\u0001\u0000\u0000\u0000\u150d\u032d\u0001\u0000\u0000"+
		"\u0000\u150e\u150c\u0001\u0000\u0000\u0000\u150f\u1512\u0003\u035e\u01af"+
		"\u0000\u1510\u1511\u0005\u0212\u0000\u0000\u1511\u1513\u0003\u0360\u01b0"+
		"\u0000\u1512\u1510\u0001\u0000\u0000\u0000\u1512\u1513\u0001\u0000\u0000"+
		"\u0000\u1513\u1517\u0001\u0000\u0000\u0000\u1514\u1515\u0005\u0221\u0000"+
		"\u0000\u1515\u1518\u0003\u032a\u0195\u0000\u1516\u1518\u0003\u02e6\u0173"+
		"\u0000\u1517\u1514\u0001\u0000\u0000\u0000\u1517\u1516\u0001\u0000\u0000"+
		"\u0000\u1517\u1518\u0001\u0000\u0000\u0000\u1518\u032f\u0001\u0000\u0000"+
		"\u0000\u1519\u151e\u0003\u0360\u01b0\u0000\u151a\u151b\u0005\u0212\u0000"+
		"\u0000\u151b\u151d\u0003\u0360\u01b0\u0000\u151c\u151a\u0001\u0000\u0000"+
		"\u0000\u151d\u1520\u0001\u0000\u0000\u0000\u151e\u151c\u0001\u0000\u0000"+
		"\u0000\u151e\u151f\u0001\u0000\u0000\u0000\u151f\u0331\u0001\u0000\u0000"+
		"\u0000\u1520\u151e\u0001\u0000\u0000\u0000\u1521\u1522\u0005\u00cb\u0000"+
		"\u0000\u1522\u1523\u0005\u0219\u0000\u0000\u1523\u1524\u0005\u01f8\u0000"+
		"\u0000\u1524\u1525\u0007!\u0000\u0000\u1525\u1526\u0003\u01de\u00ef\u0000"+
		"\u1526\u1528\u0005\u021a\u0000\u0000\u1527\u1529\u0003\u02b4\u015a\u0000"+
		"\u1528\u1527\u0001\u0000\u0000\u0000\u1528\u1529\u0001\u0000\u0000\u0000"+
		"\u1529\u0333\u0001\u0000\u0000\u0000\u152a\u152c\u0005\u0219\u0000\u0000"+
		"\u152b\u152d\u0003\u033c\u019e\u0000\u152c\u152b\u0001\u0000\u0000\u0000"+
		"\u152c\u152d\u0001\u0000\u0000\u0000\u152d\u1532\u0001\u0000\u0000\u0000"+
		"\u152e\u152f\u0005\u021f\u0000\u0000\u152f\u1531\u0003\u033c\u019e\u0000"+
		"\u1530\u152e\u0001\u0000\u0000\u0000\u1531\u1534\u0001\u0000\u0000\u0000"+
		"\u1532\u1530\u0001\u0000\u0000\u0000\u1532\u1533\u0001\u0000\u0000\u0000"+
		"\u1533\u1535\u0001\u0000\u0000\u0000\u1534\u1532\u0001\u0000\u0000\u0000"+
		"\u1535\u1537\u0005\u021a\u0000\u0000\u1536\u1538\u0003\u0332\u0199\u0000"+
		"\u1537\u1536\u0001\u0000\u0000\u0000\u1537\u1538\u0001\u0000\u0000\u0000"+
		"\u1538\u0335\u0001\u0000\u0000\u0000\u1539\u153e\u0005\u0219\u0000\u0000"+
		"\u153a\u153c\u0003\u033c\u019e\u0000\u153b\u153d\u0003\u033a\u019d\u0000"+
		"\u153c\u153b\u0001\u0000\u0000\u0000\u153c\u153d\u0001\u0000\u0000\u0000"+
		"\u153d\u153f\u0001\u0000\u0000\u0000\u153e\u153a\u0001\u0000\u0000\u0000"+
		"\u153e\u153f\u0001\u0000\u0000\u0000\u153f\u1547\u0001\u0000\u0000\u0000"+
		"\u1540\u1541\u0005\u021f\u0000\u0000\u1541\u1543\u0003\u033c\u019e\u0000"+
		"\u1542\u1544\u0003\u033a\u019d\u0000\u1543\u1542\u0001\u0000\u0000\u0000"+
		"\u1543\u1544\u0001\u0000\u0000\u0000\u1544\u1546\u0001\u0000\u0000\u0000"+
		"\u1545\u1540\u0001\u0000\u0000\u0000\u1546\u1549\u0001\u0000\u0000\u0000"+
		"\u1547\u1545\u0001\u0000\u0000\u0000\u1547\u1548\u0001\u0000\u0000\u0000"+
		"\u1548\u154a\u0001\u0000\u0000\u0000\u1549\u1547\u0001\u0000\u0000\u0000"+
		"\u154a\u154c\u0005\u021a\u0000\u0000\u154b\u154d\u0003\u0332\u0199\u0000"+
		"\u154c\u154b\u0001\u0000\u0000\u0000\u154c\u154d\u0001\u0000\u0000\u0000"+
		"\u154d\u0337\u0001\u0000\u0000\u0000\u154e\u154f\u0005\u0219\u0000\u0000"+
		"\u154f\u155c\u0003\"\u0011\u0000\u1550\u1553\u0005\u021f\u0000\u0000\u1551"+
		"\u1554\u0003\u0358\u01ac\u0000\u1552\u1554\u0005\u0108\u0000\u0000\u1553"+
		"\u1551\u0001\u0000\u0000\u0000\u1553\u1552\u0001\u0000\u0000\u0000\u1554"+
		"\u155a\u0001\u0000\u0000\u0000\u1555\u1558\u0005\u021f\u0000\u0000\u1556"+
		"\u1559\u0003\u0358\u01ac\u0000\u1557\u1559\u0005\u0108\u0000\u0000\u1558"+
		"\u1556\u0001\u0000\u0000\u0000\u1558\u1557\u0001\u0000\u0000\u0000\u1559"+
		"\u155b\u0001\u0000\u0000\u0000\u155a\u1555\u0001\u0000\u0000\u0000\u155a"+
		"\u155b\u0001\u0000\u0000\u0000\u155b\u155d\u0001\u0000\u0000\u0000\u155c"+
		"\u1550\u0001\u0000\u0000\u0000\u155c\u155d\u0001\u0000\u0000\u0000\u155d"+
		"\u155e\u0001\u0000\u0000\u0000\u155e\u1572\u0005\u01af\u0000\u0000\u155f"+
		"\u1560\u0003\u032e\u0197\u0000\u1560\u1561\u0005\u0212\u0000\u0000\u1561"+
		"\u1562\u0005\u021c\u0000\u0000\u1562\u1573\u0001\u0000\u0000\u0000\u1563"+
		"\u1573\u0005\u021c\u0000\u0000\u1564\u1566\u0003\u0262\u0131\u0000\u1565"+
		"\u1567\u0003\u02e8\u0174\u0000\u1566\u1565\u0001\u0000\u0000\u0000\u1566"+
		"\u1567\u0001\u0000\u0000\u0000\u1567\u156f\u0001\u0000\u0000\u0000\u1568"+
		"\u1569\u0005\u021f\u0000\u0000\u1569\u156b\u0003\u0262\u0131\u0000\u156a"+
		"\u156c\u0003\u02e8\u0174\u0000\u156b\u156a\u0001\u0000\u0000\u0000\u156b"+
		"\u156c\u0001\u0000\u0000\u0000\u156c\u156e\u0001\u0000\u0000\u0000\u156d"+
		"\u1568\u0001\u0000\u0000\u0000\u156e\u1571\u0001\u0000\u0000\u0000\u156f"+
		"\u156d\u0001\u0000\u0000\u0000\u156f\u1570\u0001\u0000\u0000\u0000\u1570"+
		"\u1573\u0001\u0000\u0000\u0000\u1571\u156f\u0001\u0000\u0000\u0000\u1572"+
		"\u155f\u0001\u0000\u0000\u0000\u1572\u1563\u0001\u0000\u0000\u0000\u1572"+
		"\u1564\u0001\u0000\u0000\u0000\u1573\u1574\u0001\u0000\u0000\u0000\u1574"+
		"\u1576\u0005\u021a\u0000\u0000\u1575\u1577\u0003\u0332\u0199\u0000\u1576"+
		"\u1575\u0001\u0000\u0000\u0000\u1576\u1577\u0001\u0000\u0000\u0000\u1577"+
		"\u0339\u0001\u0000\u0000\u0000\u1578\u1579\u0007E\u0000\u0000\u1579\u157a"+
		"\u0005\u0109\u0000\u0000\u157a\u033b\u0001\u0000\u0000\u0000\u157b\u157c"+
		"\u0003\u035e\u01af\u0000\u157c\u157d\u0005\u0230\u0000\u0000\u157d\u157e"+
		"\u0005\u022d\u0000\u0000\u157e\u1580\u0001\u0000\u0000\u0000\u157f\u157b"+
		"\u0001\u0000\u0000\u0000\u157f\u1580\u0001\u0000\u0000\u0000\u1580\u1581"+
		"\u0001\u0000\u0000\u0000\u1581\u1584\u0003\u0264\u0132\u0000\u1582\u1584"+
		"\u0003\u0146\u00a3\u0000\u1583\u157f\u0001\u0000\u0000\u0000\u1583\u1582"+
		"\u0001\u0000\u0000\u0000\u1584\u033d\u0001\u0000\u0000\u0000\u1585\u158e"+
		"\u0003\u0340\u01a0\u0000\u1586\u1588\u0005\u013b\u0000\u0000\u1587\u1586"+
		"\u0001\u0000\u0000\u0000\u1587\u1588\u0001\u0000\u0000\u0000\u1588\u1589"+
		"\u0001\u0000\u0000\u0000\u1589\u158b\u0003\u0314\u018a\u0000\u158a\u158c"+
		"\u0007\r\u0000\u0000\u158b\u158a\u0001\u0000\u0000\u0000\u158b\u158c\u0001"+
		"\u0000\u0000\u0000\u158c\u158e\u0001\u0000\u0000\u0000\u158d\u1585\u0001"+
		"\u0000\u0000\u0000\u158d\u1587\u0001\u0000\u0000\u0000\u158e\u033f\u0001"+
		"\u0000\u0000\u0000\u158f\u1591\u0003\u0344\u01a2\u0000\u1590\u1592\u0003"+
		"\u0342\u01a1\u0000\u1591\u1590\u0001\u0000\u0000\u0000\u1591\u1592\u0001"+
		"\u0000\u0000\u0000\u1592\u1599\u0001\u0000\u0000\u0000\u1593\u1595\u0005"+
		"\u01c2\u0000\u0000\u1594\u1596\u0005\u00d9\u0000\u0000\u1595\u1594\u0001"+
		"\u0000\u0000\u0000\u1595\u1596\u0001\u0000\u0000\u0000\u1596\u1597\u0001"+
		"\u0000\u0000\u0000\u1597\u1598\u0005\u018f\u0000\u0000\u1598\u159a\u0005"+
		"\u01d8\u0000\u0000\u1599\u1593\u0001\u0000\u0000\u0000\u1599\u159a\u0001"+
		"\u0000\u0000\u0000\u159a\u15ac\u0001\u0000\u0000\u0000\u159b\u159c\u0005"+
		"\u00c2\u0000\u0000\u159c\u15a1\u0007F\u0000\u0000\u159d\u159e\u0005\u0219"+
		"\u0000\u0000\u159e\u159f\u0003\u0264\u0132\u0000\u159f\u15a0\u0005\u021a"+
		"\u0000\u0000\u15a0\u15a2\u0001\u0000\u0000\u0000\u15a1\u159d\u0001\u0000"+
		"\u0000\u0000\u15a1\u15a2\u0001\u0000\u0000\u0000\u15a2\u15a3\u0001\u0000"+
		"\u0000\u0000\u15a3\u15a4\u0005\u0199\u0000\u0000\u15a4\u15a9\u0007G\u0000"+
		"\u0000\u15a5\u15a6\u0005\u0219\u0000\u0000\u15a6\u15a7\u0003\u0264\u0132"+
		"\u0000\u15a7\u15a8\u0005\u021a\u0000\u0000\u15a8\u15aa\u0001\u0000\u0000"+
		"\u0000\u15a9\u15a5\u0001\u0000\u0000\u0000\u15a9\u15aa\u0001\u0000\u0000"+
		"\u0000\u15aa\u15ac\u0001\u0000\u0000\u0000\u15ab\u158f\u0001\u0000\u0000"+
		"\u0000\u15ab\u159b\u0001\u0000\u0000\u0000\u15ac\u0341\u0001\u0000\u0000"+
		"\u0000\u15ad\u15ae\u0005\u0219\u0000\u0000\u15ae\u15b1\u0003\u0358\u01ac"+
		"\u0000\u15af\u15b0\u0005\u021f\u0000\u0000\u15b0\u15b2\u0003\u0358\u01ac"+
		"\u0000\u15b1\u15af\u0001\u0000\u0000\u0000\u15b1\u15b2\u0001\u0000\u0000"+
		"\u0000\u15b2\u15b4\u0001\u0000\u0000\u0000\u15b3\u15b5\u0007H\u0000\u0000"+
		"\u15b4\u15b3\u0001\u0000\u0000\u0000\u15b4\u15b5\u0001\u0000\u0000\u0000"+
		"\u15b5\u15b6\u0001\u0000\u0000\u0000\u15b6\u15b7\u0005\u021a\u0000\u0000"+
		"\u15b7\u0343\u0001\u0000\u0000\u0000\u15b8\u15f7\u0005&\u0000\u0000\u15b9"+
		"\u15f7\u0005\u012b\u0000\u0000\u15ba\u15f7\u0005\u00f3\u0000\u0000\u15bb"+
		"\u15f7\u0005%\u0000\u0000\u15bc\u15f7\u0005$\u0000\u0000\u15bd\u15f7\u0005"+
		"\'\u0000\u0000\u15be\u15f7\u0005\u00f4\u0000\u0000\u15bf\u15f7\u0005\u012c"+
		"\u0000\u0000\u15c0\u15f7\u0005\u012d\u0000\u0000\u15c1\u15f7\u0005\u015b"+
		"\u0000\u0000\u15c2\u15f7\u0005\u016e\u0000\u0000\u15c3\u15f7\u0005\u016f"+
		"\u0000\u0000\u15c4\u15f7\u0005\u010c\u0000\u0000\u15c5\u15f7\u0005g\u0000"+
		"\u0000\u15c6\u15f7\u0005\u00c0\u0000\u0000\u15c7\u15f7\u0005\u00bf\u0000"+
		"\u0000\u15c8\u15f7\u0005\u010b\u0000\u0000\u15c9\u15f7\u0005\u0173\u0000"+
		"\u0000\u15ca\u15f7\u0005\u010a\u0000\u0000\u15cb\u15f7\u0005h\u0000\u0000"+
		"\u15cc\u15ce\u0005y\u0000\u0000\u15cd\u15cf\u0005\u0130\u0000\u0000\u15ce"+
		"\u15cd\u0001\u0000\u0000\u0000\u15ce\u15cf\u0001\u0000\u0000\u0000\u15cf"+
		"\u15f7\u0001\u0000\u0000\u0000\u15d0\u15f7\u0005\u009a\u0000\u0000\u15d1"+
		"\u15f7\u0005\u0139\u0000\u0000\u15d2\u15f7\u0005\u00f6\u0000\u0000\u15d3"+
		"\u15d5\u0005\u00df\u0000\u0000\u15d4\u15d6\u0005\u0136\u0000\u0000\u15d5"+
		"\u15d4\u0001\u0000\u0000\u0000\u15d5\u15d6\u0001\u0000\u0000\u0000\u15d6"+
		"\u15f7\u0001\u0000\u0000\u0000\u15d7\u15f7\u00059\u0000\u0000\u15d8\u15f7"+
		"\u0005;\u0000\u0000\u15d9\u15f7\u0005\u01b4\u0000\u0000\u15da\u15f7\u0005"+
		"\u01b3\u0000\u0000\u15db\u15f7\u0005\u0184\u0000\u0000\u15dc\u15f7\u0005"+
		"\u0136\u0000\u0000\u15dd\u15f7\u0005+\u0000\u0000\u15de\u15f7\u0005a\u0000"+
		"\u0000\u15df\u15f7\u0005\u0150\u0000\u0000\u15e0\u15f7\u0005\u01ad\u0000"+
		"\u0000\u15e1\u15f7\u0005\u01d5\u0000\u0000\u15e2\u15f7\u0005\u00ef\u0000"+
		"\u0000\u15e3\u15f7\u0005b\u0000\u0000\u15e4\u15f7\u0005\u00ab\u0000\u0000"+
		"\u15e5\u15f7\u0005\u00e9\u0000\u0000\u15e6\u15f7\u0005\u015a\u0000\u0000"+
		"\u15e7\u15f7\u0005\u0195\u0000\u0000\u15e8\u15f7\u0005\u0196\u0000\u0000"+
		"\u15e9\u15f7\u0005\u0197\u0000\u0000\u15ea\u15f7\u0005\u0194\u0000\u0000"+
		"\u15eb\u15f7\u0005\u0190\u0000\u0000\u15ec\u15f7\u0005\u0193\u0000\u0000"+
		"\u15ed\u15f7\u0005\u0192\u0000\u0000\u15ee\u15f7\u0005\u0191\u0000\u0000"+
		"\u15ef\u15f7\u0005\u01d7\u0000\u0000\u15f0\u15f7\u0005{\u0000\u0000\u15f1"+
		"\u15f7\u0005#\u0000\u0000\u15f2\u15f7\u0005(\u0000\u0000\u15f3\u15f7\u0005"+
		">\u0000\u0000\u15f4\u15f7\u0005\u00f8\u0000\u0000\u15f5\u15f7\u0005\u00eb"+
		"\u0000\u0000\u15f6\u15b8\u0001\u0000\u0000\u0000\u15f6\u15b9\u0001\u0000"+
		"\u0000\u0000\u15f6\u15ba\u0001\u0000\u0000\u0000\u15f6\u15bb\u0001\u0000"+
		"\u0000\u0000\u15f6\u15bc\u0001\u0000\u0000\u0000\u15f6\u15bd\u0001\u0000"+
		"\u0000\u0000\u15f6\u15be\u0001\u0000\u0000\u0000\u15f6\u15bf\u0001\u0000"+
		"\u0000\u0000\u15f6\u15c0\u0001\u0000\u0000\u0000\u15f6\u15c1\u0001\u0000"+
		"\u0000\u0000\u15f6\u15c2\u0001\u0000\u0000\u0000\u15f6\u15c3\u0001\u0000"+
		"\u0000\u0000\u15f6\u15c4\u0001\u0000\u0000\u0000\u15f6\u15c5\u0001\u0000"+
		"\u0000\u0000\u15f6\u15c6\u0001\u0000\u0000\u0000\u15f6\u15c7\u0001\u0000"+
		"\u0000\u0000\u15f6\u15c8\u0001\u0000\u0000\u0000\u15f6\u15c9\u0001\u0000"+
		"\u0000\u0000\u15f6\u15ca\u0001\u0000\u0000\u0000\u15f6\u15cb\u0001\u0000"+
		"\u0000\u0000\u15f6\u15cc\u0001\u0000\u0000\u0000\u15f6\u15d0\u0001\u0000"+
		"\u0000\u0000\u15f6\u15d1\u0001\u0000\u0000\u0000\u15f6\u15d2\u0001\u0000"+
		"\u0000\u0000\u15f6\u15d3\u0001\u0000\u0000\u0000\u15f6\u15d7\u0001\u0000"+
		"\u0000\u0000\u15f6\u15d8\u0001\u0000\u0000\u0000\u15f6\u15d9\u0001\u0000"+
		"\u0000\u0000\u15f6\u15da\u0001\u0000\u0000\u0000\u15f6\u15db\u0001\u0000"+
		"\u0000\u0000\u15f6\u15dc\u0001\u0000\u0000\u0000\u15f6\u15dd\u0001\u0000"+
		"\u0000\u0000\u15f6\u15de\u0001\u0000\u0000\u0000\u15f6\u15df\u0001\u0000"+
		"\u0000\u0000\u15f6\u15e0\u0001\u0000\u0000\u0000\u15f6\u15e1\u0001\u0000"+
		"\u0000\u0000\u15f6\u15e2\u0001\u0000\u0000\u0000\u15f6\u15e3\u0001\u0000"+
		"\u0000\u0000\u15f6\u15e4\u0001\u0000\u0000\u0000\u15f6\u15e5\u0001\u0000"+
		"\u0000\u0000\u15f6\u15e6\u0001\u0000\u0000\u0000\u15f6\u15e7\u0001\u0000"+
		"\u0000\u0000\u15f6\u15e8\u0001\u0000\u0000\u0000\u15f6\u15e9\u0001\u0000"+
		"\u0000\u0000\u15f6\u15ea\u0001\u0000\u0000\u0000\u15f6\u15eb\u0001\u0000"+
		"\u0000\u0000\u15f6\u15ec\u0001\u0000\u0000\u0000\u15f6\u15ed\u0001\u0000"+
		"\u0000\u0000\u15f6\u15ee\u0001\u0000\u0000\u0000\u15f6\u15ef\u0001\u0000"+
		"\u0000\u0000\u15f6\u15f0\u0001\u0000\u0000\u0000\u15f6\u15f1\u0001\u0000"+
		"\u0000\u0000\u15f6\u15f2\u0001\u0000\u0000\u0000\u15f6\u15f3\u0001\u0000"+
		"\u0000\u0000\u15f6\u15f4\u0001\u0000\u0000\u0000\u15f6\u15f5\u0001\u0000"+
		"\u0000\u0000\u15f7\u0345\u0001\u0000\u0000\u0000\u15f8\u15fc\u0005\u0223"+
		"\u0000\u0000\u15f9\u15fa\u0005\u0224\u0000\u0000\u15fa\u15fc\u0005\u0213"+
		"\u0000\u0000\u15fb\u15f8\u0001\u0000\u0000\u0000\u15fb\u15f9\u0001\u0000"+
		"\u0000\u0000\u15fc\u1605\u0001\u0000\u0000\u0000\u15fd\u15ff\u0005\u00b6"+
		"\u0000\u0000\u15fe\u15fd\u0001\u0000\u0000\u0000\u15fe\u15ff\u0001\u0000"+
		"\u0000\u0000\u15ff\u1603\u0001\u0000\u0000\u0000\u1600\u1604\u0005\u0223"+
		"\u0000\u0000\u1601\u1602\u0005\u0224\u0000\u0000\u1602\u1604\u0005\u0213"+
		"\u0000\u0000\u1603\u1600\u0001\u0000\u0000\u0000\u1603\u1601\u0001\u0000"+
		"\u0000\u0000\u1604\u1606\u0001\u0000\u0000\u0000\u1605\u15fe\u0001\u0000"+
		"\u0000\u0000\u1605\u1606\u0001\u0000\u0000\u0000\u1606\u160b\u0001\u0000"+
		"\u0000\u0000\u1607\u1608\u0005\u0212\u0000\u0000\u1608\u160a\u0003\u0352"+
		"\u01a9\u0000\u1609\u1607\u0001\u0000\u0000\u0000\u160a\u160d\u0001\u0000"+
		"\u0000\u0000\u160b\u1609\u0001\u0000\u0000\u0000\u160b\u160c\u0001\u0000"+
		"\u0000\u0000\u160c\u1612\u0001\u0000\u0000\u0000\u160d\u160b\u0001\u0000"+
		"\u0000\u0000\u160e\u160f\u0005\u0231\u0000\u0000\u160f\u1610\u0003\u0346"+
		"\u01a3\u0000\u1610\u1611\u0005\u0232\u0000\u0000\u1611\u1613\u0001\u0000"+
		"\u0000\u0000\u1612\u160e\u0001\u0000\u0000\u0000\u1612\u1613\u0001\u0000"+
		"\u0000\u0000\u1613\u1619\u0001\u0000\u0000\u0000\u1614\u1619\u0003\u0348"+
		"\u01a4\u0000\u1615\u1619\u0003\u034a\u01a5\u0000\u1616\u1619\u0003\u034c"+
		"\u01a6\u0000\u1617\u1619\u0003\u034e\u01a7\u0000\u1618\u15fb\u0001\u0000"+
		"\u0000\u0000\u1618\u1614\u0001\u0000\u0000\u0000\u1618\u1615\u0001\u0000"+
		"\u0000\u0000\u1618\u1616\u0001\u0000\u0000\u0000\u1618\u1617\u0001\u0000"+
		"\u0000\u0000\u1619\u0347\u0001\u0000\u0000\u0000\u161a\u161b\u0005\u0006"+
		"\u0000\u0000\u161b\u161c\u0005\u01e4\u0000\u0000\u161c\u0349\u0001\u0000"+
		"\u0000\u0000\u161d\u161e\u0005\u01e4\u0000\u0000\u161e\u034b\u0001\u0000"+
		"\u0000\u0000\u161f\u1620\u0005\u0006\u0000\u0000\u1620\u1621\u0005\u01e5"+
		"\u0000\u0000\u1621\u034d\u0001\u0000\u0000\u0000\u1622\u1623\u0005\u01e5"+
		"\u0000\u0000\u1623\u034f\u0001\u0000\u0000\u0000\u1624\u1629\u0003\u0352"+
		"\u01a9\u0000\u1625\u1626\u0005\u0212\u0000\u0000\u1626\u1628\u0003\u0352"+
		"\u01a9\u0000\u1627\u1625\u0001\u0000\u0000\u0000\u1628\u162b\u0001\u0000"+
		"\u0000\u0000\u1629\u1627\u0001\u0000\u0000\u0000\u1629\u162a\u0001\u0000"+
		"\u0000\u0000\u162a\u0351\u0001\u0000\u0000\u0000\u162b\u1629\u0001\u0000"+
		"\u0000\u0000\u162c\u162d\u0005\u0233\u0000\u0000\u162d\u162f\u0003\u0330"+
		"\u0198\u0000\u162e\u162c\u0001\u0000\u0000\u0000\u162e\u162f\u0001\u0000"+
		"\u0000\u0000\u162f\u1630\u0001\u0000\u0000\u0000\u1630\u1635\u0003\u0360"+
		"\u01b0\u0000\u1631\u1632\u0005\u0212\u0000\u0000\u1632\u1634\u0003\u0360"+
		"\u01b0\u0000\u1633\u1631\u0001\u0000\u0000\u0000\u1634\u1637\u0001\u0000"+
		"\u0000\u0000\u1635\u1633\u0001\u0000\u0000\u0000\u1635\u1636\u0001\u0000"+
		"\u0000\u0000\u1636\u1639\u0001\u0000\u0000\u0000\u1637\u1635\u0001\u0000"+
		"\u0000\u0000\u1638\u163a\u0003\u0334\u019a\u0000\u1639\u1638\u0001\u0000"+
		"\u0000\u0000\u1639\u163a\u0001\u0000\u0000\u0000\u163a\u0353\u0001\u0000"+
		"\u0000\u0000\u163b\u163c\u0005\u0233\u0000\u0000\u163c\u163e\u0003\u0330"+
		"\u0198\u0000\u163d\u163b\u0001\u0000\u0000\u0000\u163d\u163e\u0001\u0000"+
		"\u0000\u0000\u163e\u163f\u0001\u0000\u0000\u0000\u163f\u1644\u0003\u0360"+
		"\u01b0\u0000\u1640\u1641\u0005\u0212\u0000\u0000\u1641\u1643\u0003\u0360"+
		"\u01b0\u0000\u1642\u1640\u0001\u0000\u0000\u0000\u1643\u1646\u0001\u0000"+
		"\u0000\u0000\u1644\u1642\u0001\u0000\u0000\u0000\u1644\u1645\u0001\u0000"+
		"\u0000\u0000\u1645\u0355\u0001\u0000\u0000\u0000\u1646\u1644\u0001\u0000"+
		"\u0000\u0000\u1647\u164a\u0005\u0190\u0000\u0000\u1648\u164b\u0003\u035c"+
		"\u01ae\u0000\u1649\u164b\u0003\u0346\u01a3\u0000\u164a\u1648\u0001\u0000"+
		"\u0000\u0000\u164a\u1649\u0001\u0000\u0000\u0000\u164b\u1650\u0001\u0000"+
		"\u0000\u0000\u164c\u164d\u0005\u0018\u0000\u0000\u164d\u164e\u0005\u018f"+
		"\u0000\u0000\u164e\u164f\u0005\u01d8\u0000\u0000\u164f\u1651\u0003\u035c"+
		"\u01ae\u0000\u1650\u164c\u0001\u0000\u0000\u0000\u1650\u1651\u0001\u0000"+
		"\u0000\u0000\u1651\u1686\u0001\u0000\u0000\u0000\u1652\u1656\u0005\u00c2"+
		"\u0000\u0000\u1653\u1657\u0003\u035c\u01ae\u0000\u1654\u1657\u0003\u0346"+
		"\u01a3\u0000\u1655\u1657\u0003\u0352\u01a9\u0000\u1656\u1653\u0001\u0000"+
		"\u0000\u0000\u1656\u1654\u0001\u0000\u0000\u0000\u1656\u1655\u0001\u0000"+
		"\u0000\u0000\u1657\u1658\u0001\u0000\u0000\u0000\u1658\u1666\u0007I\u0000"+
		"\u0000\u1659\u165c\u0005\u0219\u0000\u0000\u165a\u165d\u0005\u0213\u0000"+
		"\u0000\u165b\u165d\u0003\u0346\u01a3\u0000\u165c\u165a\u0001\u0000\u0000"+
		"\u0000\u165c\u165b\u0001\u0000\u0000\u0000\u165d\u1663\u0001\u0000\u0000"+
		"\u0000\u165e\u1661\u0005\u021f\u0000\u0000\u165f\u1662\u0005\u0213\u0000"+
		"\u0000\u1660\u1662\u0003\u0346\u01a3\u0000\u1661\u165f\u0001\u0000\u0000"+
		"\u0000\u1661\u1660\u0001\u0000\u0000\u0000\u1662\u1664\u0001\u0000\u0000"+
		"\u0000\u1663\u165e\u0001\u0000\u0000\u0000\u1663\u1664\u0001\u0000\u0000"+
		"\u0000\u1664\u1665\u0001\u0000\u0000\u0000\u1665\u1667\u0005\u021a\u0000"+
		"\u0000\u1666\u1659\u0001\u0000\u0000\u0000\u1666\u1667\u0001\u0000\u0000"+
		"\u0000\u1667\u1677\u0001\u0000\u0000\u0000\u1668\u1675\u0005\u0199\u0000"+
		"\u0000\u1669\u1676\u0005b\u0000\u0000\u166a\u1676\u0005\u00ab\u0000\u0000"+
		"\u166b\u1676\u0005\u00e9\u0000\u0000\u166c\u1673\u0005\u015a\u0000\u0000"+
		"\u166d\u1670\u0005\u0219\u0000\u0000\u166e\u1671\u0005\u0213\u0000\u0000"+
		"\u166f\u1671\u0003\u0346\u01a3\u0000\u1670\u166e\u0001\u0000\u0000\u0000"+
		"\u1670\u166f\u0001\u0000\u0000\u0000\u1671\u1672\u0001\u0000\u0000\u0000"+
		"\u1672\u1674\u0005\u021a\u0000\u0000\u1673\u166d\u0001\u0000\u0000\u0000"+
		"\u1673\u1674\u0001\u0000\u0000\u0000\u1674\u1676\u0001\u0000\u0000\u0000"+
		"\u1675\u1669\u0001\u0000\u0000\u0000\u1675\u166a\u0001\u0000\u0000\u0000"+
		"\u1675\u166b\u0001\u0000\u0000\u0000\u1675\u166c\u0001\u0000\u0000\u0000"+
		"\u1676\u1678\u0001\u0000\u0000\u0000\u1677\u1668\u0001\u0000\u0000\u0000"+
		"\u1677\u1678\u0001\u0000\u0000\u0000\u1678\u1686\u0001\u0000\u0000\u0000"+
		"\u1679\u1686\u0003\u0358\u01ac\u0000\u167a\u167b\u0005a\u0000\u0000\u167b"+
		"\u1686\u0003\u035c\u01ae\u0000\u167c\u1686\u0003\u035c\u01ae\u0000\u167d"+
		"\u1686\u0005\u0108\u0000\u0000\u167e\u1686\u0005\u01a0\u0000\u0000\u167f"+
		"\u1686\u0005\u0095\u0000\u0000\u1680\u1686\u0005d\u0000\u0000\u1681\u1686"+
		"\u0005\u0166\u0000\u0000\u1682\u1686\u0005\u00ea\u0000\u0000\u1683\u1686"+
		"\u0005\u00e4\u0000\u0000\u1684\u1686\u0005l\u0000\u0000\u1685\u1647\u0001"+
		"\u0000\u0000\u0000\u1685\u1652\u0001\u0000\u0000\u0000\u1685\u1679\u0001"+
		"\u0000\u0000\u0000\u1685\u167a\u0001\u0000\u0000\u0000\u1685\u167c\u0001"+
		"\u0000\u0000\u0000\u1685\u167d\u0001\u0000\u0000\u0000\u1685\u167e\u0001"+
		"\u0000\u0000\u0000\u1685\u167f\u0001\u0000\u0000\u0000\u1685\u1680\u0001"+
		"\u0000\u0000\u0000\u1685\u1681\u0001\u0000\u0000\u0000\u1685\u1682\u0001"+
		"\u0000\u0000\u0000\u1685\u1683\u0001\u0000\u0000\u0000\u1685\u1684\u0001"+
		"\u0000\u0000\u0000\u1686\u0357\u0001\u0000\u0000\u0000\u1687\u1688\u0007"+
		"J\u0000\u0000\u1688\u0359\u0001\u0000\u0000\u0000\u1689\u168a\u0005\u021e"+
		"\u0000\u0000\u168a\u168b\u0003\u0358\u01ac\u0000\u168b\u035b\u0001\u0000"+
		"\u0000\u0000\u168c\u168d\u0007K\u0000\u0000\u168d\u035d\u0001\u0000\u0000"+
		"\u0000\u168e\u168f\u0005\u0233\u0000\u0000\u168f\u1691\u0003\u0330\u0198"+
		"\u0000\u1690\u168e\u0001\u0000\u0000\u0000\u1690\u1691\u0001\u0000\u0000"+
		"\u0000\u1691\u1692\u0001\u0000\u0000\u0000\u1692\u1693\u0003\u0360\u01b0"+
		"\u0000\u1693\u035f\u0001\u0000\u0000\u0000\u1694\u1697\u0003\u036c\u01b6"+
		"\u0000\u1695\u1697\u0005\u0216\u0000\u0000\u1696\u1694\u0001\u0000\u0000"+
		"\u0000\u1696\u1695\u0001\u0000\u0000\u0000\u1697\u0361\u0001\u0000\u0000"+
		"\u0000\u1698\u16a3\u0005\u0004\u0000\u0000\u1699\u16a3\u0005\u0005\u0000"+
		"\u0000\u169a\u16a3\u0005\u0007\u0000\u0000\u169b\u16a3\u0005\b\u0000\u0000"+
		"\u169c\u169d\u0005\u0227\u0000\u0000\u169d\u16a3\u0005\u022d\u0000\u0000"+
		"\u169e\u169f\u0005\u022c\u0000\u0000\u169f\u16a3\u0005\u0230\u0000\u0000"+
		"\u16a0\u16a1\u0005\u022a\u0000\u0000\u16a1\u16a3\u0005\u0230\u0000\u0000"+
		"\u16a2\u1698\u0001\u0000\u0000\u0000\u16a2\u1699\u0001\u0000\u0000\u0000"+
		"\u16a2\u169a\u0001\u0000\u0000\u0000\u16a2\u169b\u0001\u0000\u0000\u0000"+
		"\u16a2\u169c\u0001\u0000\u0000\u0000\u16a2\u169e\u0001\u0000\u0000\u0000"+
		"\u16a2\u16a0\u0001\u0000\u0000\u0000\u16a3\u0363\u0001\u0000\u0000\u0000"+
		"\u16a4\u16a8\u0005\u0228\u0000\u0000\u16a5\u16a6\u0005\u022d\u0000\u0000"+
		"\u16a6\u16a8\u0005\u0230\u0000\u0000\u16a7\u16a4\u0001\u0000\u0000\u0000"+
		"\u16a7\u16a5\u0001\u0000\u0000\u0000\u16a8\u0365\u0001\u0000\u0000\u0000"+
		"\u16a9\u16ad\u0005\u0226\u0000\u0000\u16aa\u16ab\u0005\u0227\u0000\u0000"+
		"\u16ab\u16ad\u0005\u0230\u0000\u0000\u16ac\u16a9\u0001\u0000\u0000\u0000"+
		"\u16ac\u16aa\u0001\u0000\u0000\u0000\u16ad\u0367\u0001\u0000\u0000\u0000"+
		"\u16ae\u16b2\u0005\u022e\u0000\u0000\u16af\u16b0\u0005\u022f\u0000\u0000"+
		"\u16b0\u16b2\u0005\u022f\u0000\u0000\u16b1\u16ae\u0001\u0000\u0000\u0000"+
		"\u16b1\u16af\u0001\u0000\u0000\u0000\u16b2\u0369\u0001\u0000\u0000\u0000"+
		"\u16b3\u16b4\u0005\u0219\u0000\u0000\u16b4\u16b5\u0005\u021d\u0000\u0000"+
		"\u16b5\u16b6\u0005\u021a\u0000\u0000\u16b6\u036b\u0001\u0000\u0000\u0000"+
		"\u16b7\u16b8\u0007L\u0000\u0000\u16b8\u036d\u0001\u0000\u0000\u0000\u02f2"+
		"\u0371\u0376\u037e\u0389\u0396\u039b\u039f\u03a4\u03a9\u03b2\u03b4\u03ba"+
		"\u03bd\u03c1\u03c6\u03cc\u03d1\u03d6\u03df\u03e1\u03e7\u03ea\u03f3\u03fb"+
		"\u040b\u040f\u0419\u0420\u0427\u042e\u0439\u043b\u0440\u044d\u045d\u0460"+
		"\u0463\u0468\u046c\u0472\u0483\u048e\u0492\u0496\u049a\u049d\u04a2\u04a7"+
		"\u04ad\u04b6\u04c1\u04cb\u04d3\u04da\u04e9\u04ee\u04f3\u0501\u0508\u050d"+
		"\u0512\u0520\u0534\u053a\u053e\u0541\u0544\u0547\u054c\u0567\u056e\u0572"+
		"\u0584\u058a\u058d\u0593\u059f\u05aa\u05ae\u05b1\u05b4\u05b7\u05ba\u05bd"+
		"\u05ca\u05ce\u05d1\u05d4\u05d7\u05de\u05e2\u05e5\u05e8\u05ec\u05ef\u05f2"+
		"\u05f5\u05f8\u0602\u0609\u060b\u061f\u063a\u0642\u0645\u064c\u065b\u0667"+
		"\u0671\u0677\u0691\u0694\u0697\u06ae\u06b3\u06b7\u06bf\u06c7\u06cc\u06cf"+
		"\u06d1\u06d4\u06dd\u06e0\u06e3\u06e7\u06ea\u06f2\u06f7\u06fc\u0703\u070d"+
		"\u071f\u0726\u0730\u073a\u0741\u0746\u074c\u0756\u075b\u0762\u0767\u076d"+
		"\u0770\u0773\u0784\u0789\u0792\u0797\u079d\u07a0\u07a7\u07aa\u07b1\u07b6"+
		"\u07ba\u07bf\u07c4\u07ce\u07d4\u07de\u07e3\u07ea\u07f0\u07f4\u07f7\u07fa"+
		"\u080b\u0810\u0818\u0826\u082d\u0837\u0839\u084e\u085e\u0867\u086c\u0870"+
		"\u0873\u087d\u0889\u088f\u089e\u08a2\u08a7\u08aa\u08b7\u08bb\u08c7\u08cc"+
		"\u08d0\u08d4\u08da\u08dd\u08e0\u08fb\u0901\u0905\u090b\u0917\u0920\u0922"+
		"\u0928\u092c\u092f\u0938\u0943\u0947\u094a\u094e\u0956\u095f\u0968\u096a"+
		"\u0989\u098d\u0994\u0998\u099c\u09a0\u09ac\u09b0\u09be\u09c4\u09cb\u09d0"+
		"\u09da\u09e0\u09e2\u09eb\u09f5\u09fa\u0a09\u0a0d\u0a11\u0a14\u0a18\u0a1d"+
		"\u0a21\u0a27\u0a2f\u0a36\u0a3b\u0a3d\u0a42\u0a47\u0a4f\u0a56\u0a5a\u0a5d"+
		"\u0a6b\u0a71\u0a79\u0a83\u0a8e\u0a91\u0a98\u0a9b\u0aa2\u0aad\u0ab3\u0ab7"+
		"\u0ac1\u0ac4\u0aca\u0ad5\u0ad7\u0ad9\u0adc\u0ae0\u0ae3\u0ae7\u0aeb\u0af0"+
		"\u0afb\u0aff\u0b07\u0b0a\u0b0f\u0b11\u0b1a\u0b24\u0b29\u0b2f\u0b33\u0b36"+
		"\u0b3e\u0b41\u0b45\u0b49\u0b4e\u0b51\u0b55\u0b59\u0b5d\u0b69\u0b77\u0b7c"+
		"\u0b80\u0b89\u0b8d\u0b91\u0b99\u0b9c\u0b9f\u0ba3\u0ba6\u0ba9\u0bac\u0baf"+
		"\u0bb2\u0bb5\u0bba\u0bbc\u0bc0\u0bc5\u0bcf\u0bd6\u0bdd\u0be2\u0be7\u0bee"+
		"\u0bf4\u0bfe\u0c00\u0c05\u0c09\u0c0c\u0c10\u0c13\u0c15\u0c18\u0c1b\u0c1f"+
		"\u0c24\u0c28\u0c2a\u0c37\u0c3e\u0c4c\u0c4f\u0c59\u0c5d\u0c65\u0c71\u0c7b"+
		"\u0c80\u0c8a\u0c92\u0c95\u0c9b\u0c9f\u0ca4\u0cae\u0cb3\u0cc0\u0ccc\u0cd1"+
		"\u0cdb\u0ce0\u0ce2\u0ce7\u0ceb\u0cf1\u0cf5\u0d02\u0d06\u0d10\u0d13\u0d15"+
		"\u0d1a\u0d23\u0d30\u0d38\u0d41\u0d45\u0d4a\u0d55\u0d57\u0d67\u0d6c\u0d72"+
		"\u0d78\u0d8a\u0d91\u0d94\u0d9c\u0da5\u0da7\u0dab\u0dae\u0db3\u0db5\u0db9"+
		"\u0dc5\u0dce\u0dd6\u0ddb\u0ddf\u0de4\u0de7\u0def\u0df7\u0dfd\u0e00\u0e03"+
		"\u0e0b\u0e15\u0e21\u0e28\u0e2c\u0e30\u0e33\u0e36\u0e3b\u0e40\u0e43\u0e4e"+
		"\u0e53\u0e56\u0e59\u0e5f\u0e62\u0e68\u0e6b\u0e6e\u0e73\u0e76\u0e7e\u0e84"+
		"\u0e8e\u0e93\u0e9c\u0ea6\u0eaa\u0eac\u0eaf\u0ebb\u0ebf\u0ec2\u0ed6\u0edb"+
		"\u0ee0\u0ee7\u0eea\u0ef3\u0efa\u0eff\u0f03\u0f0b\u0f11\u0f19\u0f1c\u0f24"+
		"\u0f2c\u0f2f\u0f32\u0f3b\u0f41\u0f47\u0f49\u0f4d\u0f4f\u0f5c\u0f5e\u0f67"+
		"\u0f69\u0f6d\u0f73\u0f77\u0f85\u0f8b\u0f9c\u0fa4\u0fa6\u0faf\u0fb4\u0fb8"+
		"\u0fbe\u0fc7\u0fcc\u0fcf\u0fd8\u0fde\u0fe3\u0fec\u1002\u1005\u100d\u1016"+
		"\u1025\u102a\u103a\u103f\u104a\u105c\u1066\u1069\u106d\u1073\u1079\u107f"+
		"\u1087\u108b\u108f\u1096\u109d\u10a3\u10a8\u10b3\u10b7\u10be\u10c3\u10c7"+
		"\u10cd\u10d1\u10db\u10e4\u10e8\u10f1\u10f3\u10f5\u1106\u110e\u111a\u1124"+
		"\u112c\u1135\u1138\u113f\u1147\u114e\u1152\u1159\u115d\u1162\u1166\u116e"+
		"\u1172\u1179\u1182\u1190\u119d\u11a2\u11b8\u11bc\u11bf\u11c6\u11c9\u11cd"+
		"\u11d0\u11d7\u11da\u11e0\u11e3\u11e7\u11ea\u11f1\u11f6\u1204\u120a\u120c"+
		"\u1210\u1218\u1224\u1229\u122e\u1234\u1237\u123b\u1245\u1255\u1259\u1262"+
		"\u1268\u1276\u1281\u1285\u1288\u1291\u1297\u12a1\u12a9\u12ac\u12af\u12b8"+
		"\u12bd\u12c6\u12cc\u12d1\u12d4\u12d9\u12de\u12e2\u12e8\u12ee\u12f7\u12fc"+
		"\u1304\u1308\u130d\u1313\u131a\u131f\u1326\u132a\u132f\u1337\u133a\u133d"+
		"\u1340\u1344\u1349\u134e\u1352\u1359\u135e\u1360\u136b\u136f\u1371\u137c"+
		"\u1387\u1390\u1393\u1397\u139a\u139e\u13ab\u13b0\u13b8\u13bf\u13c4\u13c8"+
		"\u13cd\u13d2\u13d5\u13dc\u13e6\u13ee\u13f2\u13fc\u13ff\u1401\u140b\u140d"+
		"\u1413\u1419\u141b\u1429\u142b\u1432\u1435\u143e\u1447\u144f\u1454\u1458"+
		"\u145b\u145f\u1466\u1472\u147d\u1480\u1484\u1497\u149c\u14a3\u14ae\u14b8"+
		"\u14bd\u14c6\u14ce\u14d6\u14dc\u14e1\u14e8\u14ec\u14f1\u14f4\u14fa\u14fe"+
		"\u1503\u150c\u1512\u1517\u151e\u1528\u152c\u1532\u1537\u153c\u153e\u1543"+
		"\u1547\u154c\u1553\u1558\u155a\u155c\u1566\u156b\u156f\u1572\u1576\u157f"+
		"\u1583\u1587\u158b\u158d\u1591\u1595\u1599\u15a1\u15a9\u15ab\u15b1\u15b4"+
		"\u15ce\u15d5\u15f6\u15fb\u15fe\u1603\u1605\u160b\u1612\u1618\u1629\u162e"+
		"\u1635\u1639\u163d\u1644\u164a\u1650\u1656\u165c\u1661\u1663\u1666\u1670"+
		"\u1673\u1675\u1677\u1685\u1690\u1696\u16a2\u16a7\u16ac\u16b1";
	
	/** The Constant _serializedATN. */
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	
	/** The Constant _ATN. */
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}